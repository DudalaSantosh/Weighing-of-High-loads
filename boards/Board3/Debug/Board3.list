
Board3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008a48  08008a48  00009a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea4  08008ea4  0000a1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ea4  08008ea4  00009ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eac  08008eac  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eac  08008eac  00009eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008eb0  08008eb0  00009eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008eb4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001ec  080090a0  0000a1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080090a0  0000a4cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d68e  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe0  00000000  00000000  000178aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00019890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f1  00000000  00000000  0001a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017151  00000000  00000000  0001af49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f60d  00000000  00000000  0003209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b697  00000000  00000000  000416a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccd3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  000ccd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d17cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a2c 	.word	0x08008a2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008a2c 	.word	0x08008a2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <CS_Select>:
#define NRF24_CSN_PORT   GPIOA
#define NRF24_CSN_PIN    GPIO_PIN_3


void CS_Select (void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2108      	movs	r1, #8
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <CS_Select+0x14>)
 800103a:	f001 fb33 	bl	80026a4 <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000

08001048 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2108      	movs	r1, #8
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <CS_UnSelect+0x14>)
 8001052:	f001 fb27 	bl	80026a4 <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000

08001060 <CE_Enable>:


void CE_Enable (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2110      	movs	r1, #16
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <CE_Enable+0x14>)
 800106a:	f001 fb1b 	bl	80026a4 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020000 	.word	0x40020000

08001078 <CE_Disable>:

void CE_Disable (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <CE_Disable+0x14>)
 8001082:	f001 fb0f 	bl	80026a4 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020000 	.word	0x40020000

08001090 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010ae:	f7ff ffbf 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80010b2:	f107 010c 	add.w	r1, r7, #12
 80010b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ba:	2202      	movs	r2, #2
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <nrf24_WriteReg+0x40>)
 80010be:	f002 f930 	bl	8003322 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010c2:	f7ff ffc1 	bl	8001048 <CS_UnSelect>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000025c 	.word	0x2000025c

080010d4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010ec:	f7ff ffa0 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80010f0:	f107 0114 	add.w	r1, r7, #20
 80010f4:	2364      	movs	r3, #100	@ 0x64
 80010f6:	2201      	movs	r2, #1
 80010f8:	4808      	ldr	r0, [pc, #32]	@ (800111c <nrf24_WriteRegMulti+0x48>)
 80010fa:	f002 f912 	bl	8003322 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	b29a      	uxth	r2, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <nrf24_WriteRegMulti+0x48>)
 800110a:	f002 f90a 	bl	8003322 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110e:	f7ff ff9b 	bl	8001048 <CS_UnSelect>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000025c 	.word	0x2000025c

08001120 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800112e:	f7ff ff7f 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001132:	1df9      	adds	r1, r7, #7
 8001134:	2364      	movs	r3, #100	@ 0x64
 8001136:	2201      	movs	r2, #1
 8001138:	4808      	ldr	r0, [pc, #32]	@ (800115c <nrf24_ReadReg+0x3c>)
 800113a:	f002 f8f2 	bl	8003322 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800113e:	f107 010f 	add.w	r1, r7, #15
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	2201      	movs	r2, #1
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <nrf24_ReadReg+0x3c>)
 8001148:	f002 fa2f 	bl	80035aa <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800114c:	f7ff ff7c 	bl	8001048 <CS_UnSelect>

	return data;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000025c 	.word	0x2000025c

08001160 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800116a:	f7ff ff61 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	2364      	movs	r3, #100	@ 0x64
 8001172:	2201      	movs	r2, #1
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <nrfsendCmd+0x28>)
 8001176:	f002 f8d4 	bl	8003322 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800117a:	f7ff ff65 	bl	8001048 <CS_UnSelect>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000025c 	.word	0x2000025c

0800118c <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d104      	bne.n	80011a6 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 800119c:	2100      	movs	r1, #0
 800119e:	2007      	movs	r0, #7
 80011a0:	f7ff ff76 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011a4:	e090      	b.n	80012c8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b17      	cmp	r3, #23
 80011aa:	d104      	bne.n	80011b6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80011ac:	2111      	movs	r1, #17
 80011ae:	2017      	movs	r0, #23
 80011b0:	f7ff ff6e 	bl	8001090 <nrf24_WriteReg>
}
 80011b4:	e088      	b.n	80012c8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80011b6:	2108      	movs	r1, #8
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff ff69 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80011be:	213f      	movs	r1, #63	@ 0x3f
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ff65 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80011c6:	2103      	movs	r1, #3
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff ff61 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff ff5d 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80011d6:	2103      	movs	r1, #3
 80011d8:	2004      	movs	r0, #4
 80011da:	f7ff ff59 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80011de:	2102      	movs	r1, #2
 80011e0:	2005      	movs	r0, #5
 80011e2:	f7ff ff55 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80011e6:	210e      	movs	r1, #14
 80011e8:	2006      	movs	r0, #6
 80011ea:	f7ff ff51 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2007      	movs	r0, #7
 80011f2:	f7ff ff4d 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80011f6:	2100      	movs	r1, #0
 80011f8:	2008      	movs	r0, #8
 80011fa:	f7ff ff49 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80011fe:	2100      	movs	r1, #0
 8001200:	2009      	movs	r0, #9
 8001202:	f7ff ff45 	bl	8001090 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001206:	4a32      	ldr	r2, [pc, #200]	@ (80012d0 <nrf24_reset+0x144>)
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2205      	movs	r2, #5
 800121c:	4619      	mov	r1, r3
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff ff58 	bl	80010d4 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001224:	4a2b      	ldr	r2, [pc, #172]	@ (80012d4 <nrf24_reset+0x148>)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122e:	6018      	str	r0, [r3, #0]
 8001230:	3304      	adds	r3, #4
 8001232:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2205      	movs	r2, #5
 800123a:	4619      	mov	r1, r3
 800123c:	200b      	movs	r0, #11
 800123e:	f7ff ff49 	bl	80010d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001242:	21c3      	movs	r1, #195	@ 0xc3
 8001244:	200c      	movs	r0, #12
 8001246:	f7ff ff23 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800124a:	21c4      	movs	r1, #196	@ 0xc4
 800124c:	200d      	movs	r0, #13
 800124e:	f7ff ff1f 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001252:	21c5      	movs	r1, #197	@ 0xc5
 8001254:	200e      	movs	r0, #14
 8001256:	f7ff ff1b 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800125a:	21c6      	movs	r1, #198	@ 0xc6
 800125c:	200f      	movs	r0, #15
 800125e:	f7ff ff17 	bl	8001090 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001262:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <nrf24_reset+0x144>)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126c:	6018      	str	r0, [r3, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2205      	movs	r2, #5
 8001278:	4619      	mov	r1, r3
 800127a:	2010      	movs	r0, #16
 800127c:	f7ff ff2a 	bl	80010d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001280:	2100      	movs	r1, #0
 8001282:	2011      	movs	r0, #17
 8001284:	f7ff ff04 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2012      	movs	r0, #18
 800128c:	f7ff ff00 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001290:	2100      	movs	r1, #0
 8001292:	2013      	movs	r0, #19
 8001294:	f7ff fefc 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001298:	2100      	movs	r1, #0
 800129a:	2014      	movs	r0, #20
 800129c:	f7ff fef8 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2015      	movs	r0, #21
 80012a4:	f7ff fef4 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2016      	movs	r0, #22
 80012ac:	f7ff fef0 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80012b0:	2111      	movs	r1, #17
 80012b2:	2017      	movs	r0, #23
 80012b4:	f7ff feec 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f7ff fee8 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	201d      	movs	r0, #29
 80012c4:	f7ff fee4 	bl	8001090 <nrf24_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08008a48 	.word	0x08008a48
 80012d4:	08008a50 	.word	0x08008a50

080012d8 <NRF24_Init>:




void NRF24_Init (void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80012dc:	f7ff fecc 	bl	8001078 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff53 	bl	800118c <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80012e6:	2100      	movs	r1, #0
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fed1 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80012ee:	2100      	movs	r1, #0
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fecd 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80012f6:	2100      	movs	r1, #0
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7ff fec9 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80012fe:	2103      	movs	r1, #3
 8001300:	2003      	movs	r0, #3
 8001302:	f7ff fec5 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001306:	2100      	movs	r1, #0
 8001308:	2004      	movs	r0, #4
 800130a:	f7ff fec1 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800130e:	2100      	movs	r1, #0
 8001310:	2005      	movs	r0, #5
 8001312:	f7ff febd 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001316:	210e      	movs	r1, #14
 8001318:	2006      	movs	r0, #6
 800131a:	f7ff feb9 	bl	8001090 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800131e:	f7ff fe9f 	bl	8001060 <CE_Enable>

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}

08001326 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8001332:	f7ff fea1 	bl	8001078 <CE_Disable>

	nrf24_reset (STATUS);
 8001336:	2007      	movs	r0, #7
 8001338:	f7ff ff28 	bl	800118c <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	4619      	mov	r1, r3
 8001340:	2005      	movs	r0, #5
 8001342:	f7ff fea5 	bl	8001090 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8001346:	2002      	movs	r0, #2
 8001348:	f7ff feea 	bl	8001120 <nrf24_ReadReg>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	4619      	mov	r1, r3
 800135c:	2002      	movs	r0, #2
 800135e:	f7ff fe97 	bl	8001090 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8001362:	2205      	movs	r2, #5
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	200b      	movs	r0, #11
 8001368:	f7ff feb4 	bl	80010d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 800136c:	21ee      	movs	r1, #238	@ 0xee
 800136e:	200c      	movs	r0, #12
 8001370:	f7ff fe8e 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8001374:	2120      	movs	r1, #32
 8001376:	2013      	movs	r0, #19
 8001378:	f7ff fe8a 	bl	8001090 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fecf 	bl	8001120 <nrf24_ReadReg>
 8001382:	4603      	mov	r3, r0
 8001384:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	f043 0303 	orr.w	r3, r3, #3
 800138c:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	4619      	mov	r1, r3
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fe7c 	bl	8001090 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001398:	f7ff fe62 	bl	8001060 <CE_Enable>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80013ac:	2007      	movs	r0, #7
 80013ae:	f7ff feb7 	bl	8001120 <nrf24_ReadReg>
 80013b2:	4603      	mov	r3, r0
 80013b4:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <isDataAvailable+0x34>
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80013cc:	2140      	movs	r1, #64	@ 0x40
 80013ce:	2007      	movs	r0, #7
 80013d0:	f7ff fe5e 	bl	8001090 <nrf24_WriteReg>

		return 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <isDataAvailable+0x36>
	}

	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80013f0:	f7ff fe1e 	bl	8001030 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80013f4:	2361      	movs	r3, #97	@ 0x61
 80013f6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80013f8:	f107 010f 	add.w	r1, r7, #15
 80013fc:	2364      	movs	r3, #100	@ 0x64
 80013fe:	2201      	movs	r2, #1
 8001400:	480c      	ldr	r0, [pc, #48]	@ (8001434 <NRF24_Receive+0x50>)
 8001402:	f001 ff8e 	bl	8003322 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	2220      	movs	r2, #32
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4809      	ldr	r0, [pc, #36]	@ (8001434 <NRF24_Receive+0x50>)
 8001410:	f002 f8cb 	bl	80035aa <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8001414:	f7ff fe18 	bl	8001048 <CS_UnSelect>

	HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 feb5 	bl	8002188 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800141e:	23e2      	movs	r3, #226	@ 0xe2
 8001420:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe9b 	bl	8001160 <nrfsendCmd>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000025c 	.word	0x2000025c

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b093      	sub	sp, #76	@ 0x4c
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f000 fe31 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f941 	bl	80016c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8001446:	2064      	movs	r0, #100	@ 0x64
 8001448:	f000 fe9e 	bl	8002188 <HAL_Delay>
  max7219_Init(5);
 800144c:	2005      	movs	r0, #5
 800144e:	f000 facb 	bl	80019e8 <max7219_Init>
  max7219_Decode_On();
 8001452:	f000 fb47 	bl	8001ae4 <max7219_Decode_On>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f000 fa5b 	bl	8001910 <MX_GPIO_Init>
  MX_I2C1_Init();
 800145a:	f000 f995 	bl	8001788 <MX_I2C1_Init>
  MX_SPI1_Init();
 800145e:	f000 f9c1 	bl	80017e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001462:	f000 fa2b 	bl	80018bc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001466:	f000 f9f3 	bl	8001850 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f000 fe8c 	bl	8002188 <HAL_Delay>
  NRF24_Init();
 8001470:	f7ff ff32 	bl	80012d8 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001474:	210a      	movs	r1, #10
 8001476:	4890      	ldr	r0, [pc, #576]	@ (80016b8 <main+0x280>)
 8001478:	f7ff ff55 	bl	8001326 <NRF24_RxMode>
  HAL_Delay(5);
 800147c:	2005      	movs	r0, #5
 800147e:	f000 fe83 	bl	8002188 <HAL_Delay>
//  NRF24_ReadAll(data);
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2110      	movs	r1, #16
 8001486:	488d      	ldr	r0, [pc, #564]	@ (80016bc <main+0x284>)
 8001488:	f001 f90c 	bl	80026a4 <HAL_GPIO_WritePin>
  max7219_Init(7);
 800148c:	2007      	movs	r0, #7
 800148e:	f000 faab 	bl	80019e8 <max7219_Init>
  max7219_Decode_On();
 8001492:	f000 fb27 	bl	8001ae4 <max7219_Decode_On>

  //


  MAX7219_Digits ds[6] = { DIGIT_6, DIGIT_5, DIGIT_4, DIGIT_3, DIGIT_2, DIGIT_1 };
 8001496:	4a8a      	ldr	r2, [pc, #552]	@ (80016c0 <main+0x288>)
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a0:	6018      	str	r0, [r3, #0]
 80014a2:	3304      	adds	r3, #4
 80014a4:	8019      	strh	r1, [r3, #0]

  for (int i = -2; i < 6 + 2; i++) {
 80014a6:	f06f 0301 	mvn.w	r3, #1
 80014aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80014ac:	e024      	b.n	80014f8 <main+0xc0>
      max7219_Clean();
 80014ae:	f000 fac3 	bl	8001a38 <max7219_Clean>
      for (int j = 0; j < 3; j++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80014b6:	e016      	b.n	80014e6 <main+0xae>
          int p = i - j;
 80014b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	61fb      	str	r3, [r7, #28]
          if (p >= 0 && p < 6) max7219_PrintDigit(ds[p], NUM_8, false);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0c      	blt.n	80014e0 <main+0xa8>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	dc09      	bgt.n	80014e0 <main+0xa8>
 80014cc:	f107 0214 	add.w	r2, r7, #20
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	2108      	movs	r1, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fb12 	bl	8001b04 <max7219_PrintDigit>
      for (int j = 0; j < 3; j++) {
 80014e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014e2:	3301      	adds	r3, #1
 80014e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80014e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	dde5      	ble.n	80014b8 <main+0x80>
      }
      HAL_Delay(150);
 80014ec:	2096      	movs	r0, #150	@ 0x96
 80014ee:	f000 fe4b 	bl	8002188 <HAL_Delay>
  for (int i = -2; i < 6 + 2; i++) {
 80014f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f4:	3301      	adds	r3, #1
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	ddd7      	ble.n	80014ae <main+0x76>
  }

  for (int i = 6 + 1 + 2; i >= -2; i--) {
 80014fe:	2309      	movs	r3, #9
 8001500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001502:	e024      	b.n	800154e <main+0x116>
      max7219_Clean();
 8001504:	f000 fa98 	bl	8001a38 <max7219_Clean>
      for (int j = 0; j < 3; j++) {
 8001508:	2300      	movs	r3, #0
 800150a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800150c:	e016      	b.n	800153c <main+0x104>
          int p = i - j;
 800150e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	623b      	str	r3, [r7, #32]
          if (p >= 0 && p < 6) max7219_PrintDigit(ds[p], NUM_8, false);
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0c      	blt.n	8001536 <main+0xfe>
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	2b05      	cmp	r3, #5
 8001520:	dc09      	bgt.n	8001536 <main+0xfe>
 8001522:	f107 0214 	add.w	r2, r7, #20
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	2108      	movs	r1, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fae7 	bl	8001b04 <max7219_PrintDigit>
      for (int j = 0; j < 3; j++) {
 8001536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001538:	3301      	adds	r3, #1
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153e:	2b02      	cmp	r3, #2
 8001540:	dde5      	ble.n	800150e <main+0xd6>
      }
      HAL_Delay(150);
 8001542:	2096      	movs	r0, #150	@ 0x96
 8001544:	f000 fe20 	bl	8002188 <HAL_Delay>
  for (int i = 6 + 1 + 2; i >= -2; i--) {
 8001548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800154a:	3b01      	subs	r3, #1
 800154c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800154e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001550:	f113 0f02 	cmn.w	r3, #2
 8001554:	dad6      	bge.n	8001504 <main+0xcc>
  }

  max7219_Clean();
 8001556:	f000 fa6f 	bl	8001a38 <max7219_Clean>
  for (int i = 0; i < 6; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	637b      	str	r3, [r7, #52]	@ 0x34
 800155e:	e00c      	b.n	800157a <main+0x142>
      max7219_PrintDigit(ds[i], NUM_0, 1);
 8001560:	f107 0214 	add.w	r2, r7, #20
 8001564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fac8 	bl	8001b04 <max7219_PrintDigit>
  for (int i = 0; i < 6; i++)
 8001574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001576:	3301      	adds	r3, #1
 8001578:	637b      	str	r3, [r7, #52]	@ 0x34
 800157a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157c:	2b05      	cmp	r3, #5
 800157e:	ddef      	ble.n	8001560 <main+0x128>
  HAL_Delay(1000);
 8001580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001584:	f000 fe00 	bl	8002188 <HAL_Delay>
  while (1)


  {

	  if (isDataAvailable(2) == 1)
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff ff0b 	bl	80013a4 <isDataAvailable>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 808c 	bne.w	80016ae <main+0x276>
	  	  {
	  		  NRF24_Receive(RxData);
 8001596:	484b      	ldr	r0, [pc, #300]	@ (80016c4 <main+0x28c>)
 8001598:	f7ff ff24 	bl	80013e4 <NRF24_Receive>
//	  			sprintf(buf,sizeof(buf),"%f",recvValue);


//	  			recvValue=123.45f;

	  		  	RxData[0]='0';
 800159c:	4b49      	ldr	r3, [pc, #292]	@ (80016c4 <main+0x28c>)
 800159e:	2230      	movs	r2, #48	@ 0x30
 80015a0:	701a      	strb	r2, [r3, #0]
  	  	  	  	max7219_Clean();
 80015a2:	f000 fa49 	bl	8001a38 <max7219_Clean>

				char str[9];
				strncpy(str, (char*)RxData, sizeof(str));
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2209      	movs	r2, #9
 80015ac:	4945      	ldr	r1, [pc, #276]	@ (80016c4 <main+0x28c>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fe71 	bl	8005296 <strncpy>
				str[8] = '\0';
 80015b4:	2300      	movs	r3, #0
 80015b6:	743b      	strb	r3, [r7, #16]
  	  			int i = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
  	  			int len = strlen(str);
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fe5d 	bl	8000280 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  	  			memmove(str, str + 1, strlen(str));
 80015ca:	f107 0408 	add.w	r4, r7, #8
 80015ce:	3401      	adds	r4, #1
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fe53 	bl	8000280 <strlen>
 80015da:	4602      	mov	r2, r0
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4621      	mov	r1, r4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fe35 	bl	8005252 <memmove>
  	  			MAX7219_Digits displayDigits[6] = {DIGIT_6, DIGIT_5, DIGIT_4, DIGIT_3, DIGIT_2,DIGIT_1};
 80015e8:	4a35      	ldr	r2, [pc, #212]	@ (80016c0 <main+0x288>)
 80015ea:	463b      	mov	r3, r7
 80015ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f0:	6018      	str	r0, [r3, #0]
 80015f2:	3304      	adds	r3, #4
 80015f4:	8019      	strh	r1, [r3, #0]
  	  			int displayIndex = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  	  			while (i < len && displayIndex < 6) {
 80015fa:	e051      	b.n	80016a0 <main+0x268>
  	  			    char ch = str[i];
 80015fc:	f107 0208 	add.w	r2, r7, #8
 8001600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  	  			    if (ch >= '0' && ch <= '9') {
 800160a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800160e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001610:	d933      	bls.n	800167a <main+0x242>
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001616:	2b39      	cmp	r3, #57	@ 0x39
 8001618:	d82f      	bhi.n	800167a <main+0x242>
  	  			        bool hasDot = (i + 1 < len && str[i + 1] == '.');
 800161a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800161c:	3301      	adds	r3, #1
 800161e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001620:	429a      	cmp	r2, r3
 8001622:	dd09      	ble.n	8001638 <main+0x200>
 8001624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001626:	3301      	adds	r3, #1
 8001628:	3348      	adds	r3, #72	@ 0x48
 800162a:	443b      	add	r3, r7
 800162c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8001630:	2b2e      	cmp	r3, #46	@ 0x2e
 8001632:	d101      	bne.n	8001638 <main+0x200>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <main+0x202>
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800163e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  	  			        max7219_PrintDigit(displayDigits[displayIndex], NUM_0 + (ch - '0'), hasDot);
 800164a:	463a      	mov	r2, r7
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164e:	4413      	add	r3, r2
 8001650:	7818      	ldrb	r0, [r3, #0]
 8001652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001656:	3b30      	subs	r3, #48	@ 0x30
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800165e:	4619      	mov	r1, r3
 8001660:	f000 fa50 	bl	8001b04 <max7219_PrintDigit>
  	  			        if (hasDot) i++;
 8001664:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <main+0x23a>
 800166c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166e:	3301      	adds	r3, #1
 8001670:	633b      	str	r3, [r7, #48]	@ 0x30
  	  			        displayIndex++;
 8001672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001674:	3301      	adds	r3, #1
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	  			    if (ch >= '0' && ch <= '9') {
 8001678:	e00f      	b.n	800169a <main+0x262>
  	  			    } else if (ch == '.') {
 800167a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800167e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001680:	d00b      	beq.n	800169a <main+0x262>
  	  			    } else {
  	  			        max7219_PrintDigit(displayDigits[displayIndex], BLANK, false);
 8001682:	463a      	mov	r2, r7
 8001684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	210f      	movs	r1, #15
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fa38 	bl	8001b04 <max7219_PrintDigit>
  	  			        displayIndex++;
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	3301      	adds	r3, #1
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	  			    }

  	  			    i++;
 800169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800169c:	3301      	adds	r3, #1
 800169e:	633b      	str	r3, [r7, #48]	@ 0x30
  	  			while (i < len && displayIndex < 6) {
 80016a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a4:	429a      	cmp	r2, r3
 80016a6:	da02      	bge.n	80016ae <main+0x276>
 80016a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	dda6      	ble.n	80015fc <main+0x1c4>
  	  			}
	  	  }
	  	     HAL_Delay(500);
 80016ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016b2:	f000 fd69 	bl	8002188 <HAL_Delay>
	  if (isDataAvailable(2) == 1)
 80016b6:	e767      	b.n	8001588 <main+0x150>
 80016b8:	20000000 	.word	0x20000000
 80016bc:	40020000 	.word	0x40020000
 80016c0:	08008a58 	.word	0x08008a58
 80016c4:	20000354 	.word	0x20000354

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	@ 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	@ 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fdd5 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <SystemClock_Config+0xb8>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <SystemClock_Config+0xb8>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <SystemClock_Config+0xb8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <SystemClock_Config+0xbc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001714:	4a1b      	ldr	r2, [pc, #108]	@ (8001784 <SystemClock_Config+0xbc>)
 8001716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <SystemClock_Config+0xbc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2310      	movs	r3, #16
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f90f 	bl	8002960 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001748:	f000 f948 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	230f      	movs	r3, #15
 800174e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fb72 	bl	8002e50 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001772:	f000 f933 	bl	80019dc <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3750      	adds	r7, #80	@ 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <MX_I2C1_Init+0x50>)
 800178e:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <MX_I2C1_Init+0x54>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_I2C1_Init+0x50>)
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <MX_I2C1_Init+0x58>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <MX_I2C1_Init+0x50>)
 80017c6:	f000 ff87 	bl	80026d8 <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f000 f904 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000208 	.word	0x20000208
 80017dc:	40005400 	.word	0x40005400
 80017e0:	000186a0 	.word	0x000186a0

080017e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <MX_SPI1_Init+0x64>)
 80017ea:	4a18      	ldr	r2, [pc, #96]	@ (800184c <MX_SPI1_Init+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_SPI1_Init+0x64>)
 80017f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_SPI1_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_SPI1_Init+0x64>)
 8001810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_SPI1_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_SPI1_Init+0x64>)
 8001830:	220a      	movs	r2, #10
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_SPI1_Init+0x64>)
 8001836:	f001 fceb 	bl	8003210 <HAL_SPI_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001840:	f000 f8cc 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000025c 	.word	0x2000025c
 800184c:	40013000 	.word	0x40013000

08001850 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001856:	4a18      	ldr	r2, [pc, #96]	@ (80018b8 <MX_SPI2_Init+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800185a:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_SPI2_Init+0x64>)
 800185c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <MX_SPI2_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_SPI2_Init+0x64>)
 800187c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <MX_SPI2_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <MX_SPI2_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_SPI2_Init+0x64>)
 800189c:	220a      	movs	r2, #10
 800189e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <MX_SPI2_Init+0x64>)
 80018a2:	f001 fcb5 	bl	8003210 <HAL_SPI_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018ac:	f000 f896 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200002b4 	.word	0x200002b4
 80018b8:	40003800 	.word	0x40003800

080018bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <MX_USART1_UART_Init+0x50>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	@ (8001908 <MX_USART1_UART_Init+0x4c>)
 80018f4:	f002 fa5e 	bl	8003db4 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018fe:	f000 f86d 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000030c 	.word	0x2000030c
 800190c:	40011000 	.word	0x40011000

08001910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <MX_GPIO_Init+0xc0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <MX_GPIO_Init+0xc0>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_GPIO_Init+0xc0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <MX_GPIO_Init+0xc0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a21      	ldr	r2, [pc, #132]	@ (80019d0 <MX_GPIO_Init+0xc0>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <MX_GPIO_Init+0xc0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2118      	movs	r1, #24
 8001962:	481c      	ldr	r0, [pc, #112]	@ (80019d4 <MX_GPIO_Init+0xc4>)
 8001964:	f000 fe9e 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196e:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <MX_GPIO_Init+0xc8>)
 8001970:	f000 fe98 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001974:	2318      	movs	r3, #24
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <MX_GPIO_Init+0xc4>)
 800198c:	f000 fd06 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001990:	2301      	movs	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <MX_GPIO_Init+0xc8>)
 80019a4:	f000 fcfa 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : LOAD_Pin */
  GPIO_InitStruct.Pin = LOAD_Pin;
 80019a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LOAD_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_GPIO_Init+0xc8>)
 80019c2:	f000 fceb 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <Error_Handler+0x8>

080019e8 <max7219_Init>:

static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);

void max7219_Init(uint8_t intensivity)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	max7219_Turn_On();
 80019f2:	f000 f86f 	bl	8001ad4 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 80019f6:	2107      	movs	r1, #7
 80019f8:	200b      	movs	r0, #11
 80019fa:	f000 f841 	bl	8001a80 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f806 	bl	8001a12 <max7219_SetIntensivity>
	max7219_Clean();
 8001a06:	f000 f817 	bl	8001a38 <max7219_Clean>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
	if (intensivity > 0x0F)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	d805      	bhi.n	8001a2e <max7219_SetIntensivity+0x1c>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4619      	mov	r1, r3
 8001a26:	200a      	movs	r0, #10
 8001a28:	f000 f82a 	bl	8001a80 <max7219_SendData>
 8001a2c:	e000      	b.n	8001a30 <max7219_SetIntensivity+0x1e>
		return;
 8001a2e:	bf00      	nop
}
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <max7219_Clean>:

void max7219_Clean()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]

	if(decodeMode == 0xFF)
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <max7219_Clean+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2bff      	cmp	r3, #255	@ 0xff
 8001a48:	d101      	bne.n	8001a4e <max7219_Clean+0x16>
	{
		clear = BLANK;
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	71fb      	strb	r3, [r7, #7]
	}

	for (int i = 0; i < 8; ++i)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	e00b      	b.n	8001a6c <max7219_Clean+0x34>
	{
		max7219_SendData(i + 1, clear);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f80d 	bl	8001a80 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b07      	cmp	r3, #7
 8001a70:	ddf0      	ble.n	8001a54 <max7219_Clean+0x1c>
	}
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000374 	.word	0x20000374

08001a80 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	460a      	mov	r2, r1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	71bb      	strb	r3, [r7, #6]
	CS_SET();
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <max7219_SendData+0x4c>)
 8001a98:	f000 fe04 	bl	80026a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001a9c:	1df9      	adds	r1, r7, #7
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	480a      	ldr	r0, [pc, #40]	@ (8001ad0 <max7219_SendData+0x50>)
 8001aa6:	f001 fc3c 	bl	8003322 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001aaa:	1db9      	adds	r1, r7, #6
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <max7219_SendData+0x50>)
 8001ab4:	f001 fc35 	bl	8003322 <HAL_SPI_Transmit>
	CS_RESET();
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001abe:	4803      	ldr	r0, [pc, #12]	@ (8001acc <max7219_SendData+0x4c>)
 8001ac0:	f000 fdf0 	bl	80026a4 <HAL_GPIO_WritePin>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	200002b4 	.word	0x200002b4

08001ad4 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	200c      	movs	r0, #12
 8001adc:	f7ff ffd0 	bl	8001a80 <max7219_SendData>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <max7219_Decode_On+0x1c>)
 8001aea:	22ff      	movs	r2, #255	@ 0xff
 8001aec:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8001aee:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <max7219_Decode_On+0x1c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2009      	movs	r0, #9
 8001af6:	f7ff ffc3 	bl	8001a80 <max7219_SendData>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000374 	.word	0x20000374

08001b04 <max7219_PrintDigit>:
	decodeMode = 0x00;
	max7219_SendData(REG_DECODE_MODE, decodeMode);
}

void max7219_PrintDigit(MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	71bb      	strb	r3, [r7, #6]
 8001b12:	4613      	mov	r3, r2
 8001b14:	717b      	strb	r3, [r7, #5]
	if(position > NUMBER_OF_DIGITS)
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d844      	bhi.n	8001ba6 <max7219_PrintDigit+0xa2>
	{
		return;
	}

	if(point)
 8001b1c:	797b      	ldrb	r3, [r7, #5]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d020      	beq.n	8001b64 <max7219_PrintDigit+0x60>
	{
		if(decodeMode == 0x00)
 8001b22:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <max7219_PrintDigit+0xac>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10e      	bne.n	8001b48 <max7219_PrintDigit+0x44>
		{
			max7219_SendData(position, getSymbol(numeric) | (1 << 7));
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f841 	bl	8001bb4 <getSymbol>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff9d 	bl	8001a80 <max7219_SendData>
 8001b46:	e02f      	b.n	8001ba8 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <max7219_PrintDigit+0xac>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2bff      	cmp	r3, #255	@ 0xff
 8001b4e:	d12b      	bne.n	8001ba8 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric | (1 << 7));
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff8f 	bl	8001a80 <max7219_SendData>
 8001b62:	e021      	b.n	8001ba8 <max7219_PrintDigit+0xa4>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <max7219_PrintDigit+0xac>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10e      	bne.n	8001b8a <max7219_PrintDigit+0x86>
		{
			max7219_SendData(position, getSymbol(numeric) & (~(1 << 7)));
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f820 	bl	8001bb4 <getSymbol>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff7c 	bl	8001a80 <max7219_SendData>
 8001b88:	e00e      	b.n	8001ba8 <max7219_PrintDigit+0xa4>
		}
		else if(decodeMode == 0xFF)
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <max7219_PrintDigit+0xac>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2bff      	cmp	r3, #255	@ 0xff
 8001b90:	d10a      	bne.n	8001ba8 <max7219_PrintDigit+0xa4>
		{
			max7219_SendData(position, numeric & (~(1 << 7)));
 8001b92:	79bb      	ldrb	r3, [r7, #6]
 8001b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff6e 	bl	8001a80 <max7219_SendData>
 8001ba4:	e000      	b.n	8001ba8 <max7219_PrintDigit+0xa4>
		return;
 8001ba6:	bf00      	nop
		}
	}
}
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000374 	.word	0x20000374

08001bb4 <getSymbol>:

	return position;
}

static uint16_t getSymbol(uint8_t number)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
	return SYMBOLS[number];
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4a03      	ldr	r2, [pc, #12]	@ (8001bd0 <getSymbol+0x1c>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	20000008 	.word	0x20000008

08001bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c20 <HAL_MspInit+0x4c>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <HAL_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <HAL_MspInit+0x4c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_MspInit+0x4c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_I2C_MspInit+0x84>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12b      	bne.n	8001c9e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_I2C_MspInit+0x88>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <HAL_I2C_MspInit+0x88>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_I2C_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c62:	23c0      	movs	r3, #192	@ 0xc0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c66:	2312      	movs	r3, #18
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c72:	2304      	movs	r3, #4
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <HAL_I2C_MspInit+0x8c>)
 8001c7e:	f000 fb8d 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_I2C_MspInit+0x88>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a08      	ldr	r2, [pc, #32]	@ (8001cac <HAL_I2C_MspInit+0x88>)
 8001c8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_I2C_MspInit+0x88>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	@ 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a32      	ldr	r2, [pc, #200]	@ (8001d9c <HAL_SPI_MspInit+0xe8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a30      	ldr	r2, [pc, #192]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a29      	ldr	r2, [pc, #164]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d0e:	23e0      	movs	r3, #224	@ 0xe0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d1e:	2305      	movs	r3, #5
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	481e      	ldr	r0, [pc, #120]	@ (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d2a:	f000 fb37 	bl	800239c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d2e:	e031      	b.n	8001d94 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <HAL_SPI_MspInit+0xf4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12c      	bne.n	8001d94 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_SPI_MspInit+0xec>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d72:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d84:	2305      	movs	r3, #5
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	@ (8001dac <HAL_SPI_MspInit+0xf8>)
 8001d90:	f000 fb04 	bl	800239c <HAL_GPIO_Init>
}
 8001d94:	bf00      	nop
 8001d96:	3730      	adds	r7, #48	@ 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40013000 	.word	0x40013000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40003800 	.word	0x40003800
 8001dac:	40020400 	.word	0x40020400

08001db0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	@ (8001e34 <HAL_UART_MspInit+0x84>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12c      	bne.n	8001e2c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <HAL_UART_MspInit+0x88>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <HAL_UART_MspInit+0x88>)
 8001ddc:	f043 0310 	orr.w	r3, r3, #16
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_UART_MspInit+0x88>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_UART_MspInit+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_UART_MspInit+0x88>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_UART_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <HAL_UART_MspInit+0x8c>)
 8001e28:	f000 fab8 	bl	800239c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	@ 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x4>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e96:	f000 f957 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_kill>:

int _kill(int pid, int sig)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb8:	f003 fa4a 	bl	8005350 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2216      	movs	r2, #22
 8001ec0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_exit>:

void _exit (int status)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffe7 	bl	8001eae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <_exit+0x12>

08001ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e00a      	b.n	8001f0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ef6:	f3af 8000 	nop.w
 8001efa:	4601      	mov	r1, r0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbf0      	blt.n	8001ef6 <_read+0x12>
  }

  return len;
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e009      	b.n	8001f44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf1      	blt.n	8001f30 <_write+0x12>
  }
  return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_close>:

int _close(int file)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_isatty>:

int _isatty(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	@ (800201c <_sbrk+0x5c>)
 8001fca:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <_sbrk+0x60>)
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd4:	4b13      	ldr	r3, [pc, #76]	@ (8002024 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <_sbrk+0x64>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <_sbrk+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff0:	f003 f9ae 	bl	8005350 <__errno>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	e009      	b.n	8002014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <_sbrk+0x64>)
 8002010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20010000 	.word	0x20010000
 8002020:	00000400 	.word	0x00000400
 8002024:	20000378 	.word	0x20000378
 8002028:	200004d0 	.word	0x200004d0

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002088 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002054:	f7ff ffea 	bl	800202c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002058:	480c      	ldr	r0, [pc, #48]	@ (800208c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800205a:	490d      	ldr	r1, [pc, #52]	@ (8002090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800205c:	4a0d      	ldr	r2, [pc, #52]	@ (8002094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002070:	4c0a      	ldr	r4, [pc, #40]	@ (800209c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207e:	f003 f96d 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002082:	f7ff f9d9 	bl	8001438 <main>
  bx  lr    
 8002086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002088:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002094:	08008eb4 	.word	0x08008eb4
  ldr r2, =_sbss
 8002098:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800209c:	200004cc 	.word	0x200004cc

080020a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC_IRQHandler>
	...

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <HAL_Init+0x40>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <HAL_Init+0x40>)
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <HAL_Init+0x40>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020cc:	2003      	movs	r0, #3
 80020ce:	f000 f931 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d2:	200f      	movs	r0, #15
 80020d4:	f000 f808 	bl	80020e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d8:	f7ff fd7c 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_InitTick+0x54>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_InitTick+0x58>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f93b 	bl	8002382 <HAL_SYSTICK_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00e      	b.n	8002134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d80a      	bhi.n	8002132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f000 f911 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002128:	4a06      	ldr	r2, [pc, #24]	@ (8002144 <HAL_InitTick+0x5c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000018 	.word	0x20000018
 8002140:	20000020 	.word	0x20000020
 8002144:	2000001c 	.word	0x2000001c

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000020 	.word	0x20000020
 800216c:	2000037c 	.word	0x2000037c

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2000037c 	.word	0x2000037c

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000020 	.word	0x20000020

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff47 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff5c 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffb0 	bl	80022f0 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e159      	b.n	800266c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8148 	bne.w	8002666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d005      	beq.n	80023ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d130      	bne.n	8002450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 0201 	and.w	r2, r3, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b03      	cmp	r3, #3
 800245a:	d017      	beq.n	800248c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d123      	bne.n	80024e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a2 	beq.w	8002666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b57      	ldr	r3, [pc, #348]	@ (8002684 <HAL_GPIO_Init+0x2e8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a56      	ldr	r2, [pc, #344]	@ (8002684 <HAL_GPIO_Init+0x2e8>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <HAL_GPIO_Init+0x2e8>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253e:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_GPIO_Init+0x2ec>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a49      	ldr	r2, [pc, #292]	@ (800268c <HAL_GPIO_Init+0x2f0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x202>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a48      	ldr	r2, [pc, #288]	@ (8002690 <HAL_GPIO_Init+0x2f4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x1fe>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a47      	ldr	r2, [pc, #284]	@ (8002694 <HAL_GPIO_Init+0x2f8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x1fa>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a46      	ldr	r2, [pc, #280]	@ (8002698 <HAL_GPIO_Init+0x2fc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x1f6>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a45      	ldr	r2, [pc, #276]	@ (800269c <HAL_GPIO_Init+0x300>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x1f2>
 800258a:	2304      	movs	r3, #4
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 800258e:	2307      	movs	r3, #7
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	@ (8002688 <HAL_GPIO_Init+0x2ec>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e2:	4a2f      	ldr	r2, [pc, #188]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800260c:	4a24      	ldr	r2, [pc, #144]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002636:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002660:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f aea2 	bls.w	80023b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40013c00 	.word	0x40013c00

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e12b      	b.n	8002942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff fa90 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	@ 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800273a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800273c:	f000 fd40 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a81      	ldr	r2, [pc, #516]	@ (800294c <HAL_I2C_Init+0x274>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d807      	bhi.n	800275c <HAL_I2C_Init+0x84>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a80      	ldr	r2, [pc, #512]	@ (8002950 <HAL_I2C_Init+0x278>)
 8002750:	4293      	cmp	r3, r2
 8002752:	bf94      	ite	ls
 8002754:	2301      	movls	r3, #1
 8002756:	2300      	movhi	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e006      	b.n	800276a <HAL_I2C_Init+0x92>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a7d      	ldr	r2, [pc, #500]	@ (8002954 <HAL_I2C_Init+0x27c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	bf94      	ite	ls
 8002764:	2301      	movls	r3, #1
 8002766:	2300      	movhi	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0e7      	b.n	8002942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a78      	ldr	r2, [pc, #480]	@ (8002958 <HAL_I2C_Init+0x280>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9b      	lsrs	r3, r3, #18
 800277c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	@ (800294c <HAL_I2C_Init+0x274>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d802      	bhi.n	80027ac <HAL_I2C_Init+0xd4>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	e009      	b.n	80027c0 <HAL_I2C_Init+0xe8>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a69      	ldr	r2, [pc, #420]	@ (800295c <HAL_I2C_Init+0x284>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	495c      	ldr	r1, [pc, #368]	@ (800294c <HAL_I2C_Init+0x274>)
 80027dc:	428b      	cmp	r3, r1
 80027de:	d819      	bhi.n	8002814 <HAL_I2C_Init+0x13c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e59      	subs	r1, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027f4:	400b      	ands	r3, r1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_I2C_Init+0x138>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e59      	subs	r1, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fbb1 f3f3 	udiv	r3, r1, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	e051      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002810:	2304      	movs	r3, #4
 8002812:	e04f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <HAL_I2C_Init+0x168>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e012      	b.n	8002866 <HAL_I2C_Init+0x18e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x196>
 800286a:	2301      	movs	r3, #1
 800286c:	e022      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_I2C_Init+0x1bc>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e58      	subs	r0, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	440b      	add	r3, r1
 8002884:	fbb0 f3f3 	udiv	r3, r0, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	0099      	lsls	r1, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6911      	ldr	r1, [r2, #16]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	000186a0 	.word	0x000186a0
 8002950:	001e847f 	.word	0x001e847f
 8002954:	003d08ff 	.word	0x003d08ff
 8002958:	431bde83 	.word	0x431bde83
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e267      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d075      	beq.n	8002a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800297e:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b85      	ldr	r3, [pc, #532]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002992:	2b08      	cmp	r3, #8
 8002994:	d112      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b82      	ldr	r3, [pc, #520]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029a2:	d10b      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05b      	beq.n	8002a68 <HAL_RCC_OscConfig+0x108>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d157      	bne.n	8002a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e242      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x74>
 80029c6:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b70      	ldr	r3, [pc, #448]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6f      	ldr	r2, [pc, #444]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6c      	ldr	r2, [pc, #432]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029f8:	4b69      	ldr	r3, [pc, #420]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fbaa 	bl	8002170 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7ff fba6 	bl	8002170 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e207      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xc0>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fb96 	bl	8002170 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff fb92 	bl	8002170 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1f3      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0xe8>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1c7      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e03a      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fb4b 	bl	8002170 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7ff fb47 	bl	8002170 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1a8      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4925      	ldr	r1, [pc, #148]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff fb2a 	bl	8002170 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b20:	f7ff fb26 	bl	8002170 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e187      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d036      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff fb0a 	bl	8002170 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff fb06 	bl	8002170 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e167      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x200>
 8002b7e:	e01b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7ff faf3 	bl	8002170 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7ff faef 	bl	8002170 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d907      	bls.n	8002bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e150      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b88      	ldr	r3, [pc, #544]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ea      	bne.n	8002b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8097 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b81      	ldr	r3, [pc, #516]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b7d      	ldr	r3, [pc, #500]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a7c      	ldr	r2, [pc, #496]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b77      	ldr	r3, [pc, #476]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b74      	ldr	r3, [pc, #464]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a73      	ldr	r2, [pc, #460]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff faaf 	bl	8002170 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7ff faab 	bl	8002170 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e10c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2ea>
 8002c3c:	4b64      	ldr	r3, [pc, #400]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a63      	ldr	r2, [pc, #396]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x30c>
 8002c52:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c6c:	4b58      	ldr	r3, [pc, #352]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a57      	ldr	r2, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	4b55      	ldr	r3, [pc, #340]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a54      	ldr	r2, [pc, #336]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fa70 	bl	8002170 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7ff fa6c 	bl	8002170 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0cb      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7ff fa5a 	bl	8002170 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fa56 	bl	8002170 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0b5      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	4a38      	ldr	r2, [pc, #224]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a1 	beq.w	8002e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d05c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d141      	bne.n	8002d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fa2a 	bl	8002170 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff fa26 	bl	8002170 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e087      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	491b      	ldr	r1, [pc, #108]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff f9ff 	bl	8002170 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7ff f9fb 	bl	8002170 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e05c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x416>
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f9e8 	bl	8002170 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff f9e4 	bl	8002170 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e045      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e038      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x4ec>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d028      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0cc      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b68      	ldr	r3, [pc, #416]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d90c      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b65      	ldr	r3, [pc, #404]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d044      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d119      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e067      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b37      	ldr	r3, [pc, #220]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4934      	ldr	r1, [pc, #208]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f40:	f7ff f916 	bl	8002170 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7ff f912 	bl	8002170 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e04f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d20c      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f876 	bl	80020e8 <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00
 800300c:	40023800 	.word	0x40023800
 8003010:	08008a60 	.word	0x08008a60
 8003014:	20000018 	.word	0x20000018
 8003018:	2000001c 	.word	0x2000001c

0800301c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b090      	sub	sp, #64	@ 0x40
 8003022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003034:	4b59      	ldr	r3, [pc, #356]	@ (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d00d      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x40>
 8003040:	2b08      	cmp	r3, #8
 8003042:	f200 80a1 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x16c>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x34>
 800304a:	2b04      	cmp	r3, #4
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x3a>
 800304e:	e09b      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003054:	e09b      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003056:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003058:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800305a:	e098      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4b4f      	ldr	r3, [pc, #316]	@ (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003064:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003066:	4b4d      	ldr	r3, [pc, #308]	@ (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d028      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	627a      	str	r2, [r7, #36]	@ 0x24
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003084:	2100      	movs	r1, #0
 8003086:	4b47      	ldr	r3, [pc, #284]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003088:	fb03 f201 	mul.w	r2, r3, r1
 800308c:	2300      	movs	r3, #0
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	4413      	add	r3, r2
 8003094:	4a43      	ldr	r2, [pc, #268]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003096:	fba0 1202 	umull	r1, r2, r0, r2
 800309a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800309c:	460a      	mov	r2, r1
 800309e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030a2:	4413      	add	r3, r2
 80030a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	2200      	movs	r2, #0
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030b6:	f7fd fdef 	bl	8000c98 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4613      	mov	r3, r2
 80030c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030c2:	e053      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c4:	4b35      	ldr	r3, [pc, #212]	@ (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	2200      	movs	r2, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	617a      	str	r2, [r7, #20]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030d6:	f04f 0b00 	mov.w	fp, #0
 80030da:	4652      	mov	r2, sl
 80030dc:	465b      	mov	r3, fp
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	ebb2 080a 	subs.w	r8, r2, sl
 80030f6:	eb63 090b 	sbc.w	r9, r3, fp
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800310a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800310e:	ebb2 0408 	subs.w	r4, r2, r8
 8003112:	eb63 0509 	sbc.w	r5, r3, r9
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	00eb      	lsls	r3, r5, #3
 8003120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003124:	00e2      	lsls	r2, r4, #3
 8003126:	4614      	mov	r4, r2
 8003128:	461d      	mov	r5, r3
 800312a:	eb14 030a 	adds.w	r3, r4, sl
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	eb45 030b 	adc.w	r3, r5, fp
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003142:	4629      	mov	r1, r5
 8003144:	028b      	lsls	r3, r1, #10
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800314c:	4621      	mov	r1, r4
 800314e:	028a      	lsls	r2, r1, #10
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	2200      	movs	r2, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	60fa      	str	r2, [r7, #12]
 800315c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003160:	f7fd fd9a 	bl	8000c98 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_RCC_GetSysClockFreq+0x180>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	3301      	adds	r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800317c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800318a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003190:	4618      	mov	r0, r3
 8003192:	3740      	adds	r7, #64	@ 0x40
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	017d7840 	.word	0x017d7840

080031a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000018 	.word	0x20000018

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a9b      	lsrs	r3, r3, #10
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	@ (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08008a70 	.word	0x08008a70

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ec:	f7ff ffdc 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0b5b      	lsrs	r3, r3, #13
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4903      	ldr	r1, [pc, #12]	@ (800320c <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	08008a70 	.word	0x08008a70

08003210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e07b      	b.n	800331a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d108      	bne.n	800323c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003232:	d009      	beq.n	8003248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
 800323a:	e005      	b.n	8003248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fd26 	bl	8001cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800327e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	f003 0104 	and.w	r1, r3, #4
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	f003 0210 	and.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b088      	sub	sp, #32
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003332:	f7fe ff1d 	bl	8002170 <HAL_GetTick>
 8003336:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
 800334a:	e12a      	b.n	80035a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_SPI_Transmit+0x36>
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e122      	b.n	80035a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_SPI_Transmit+0x48>
 8003366:	2302      	movs	r3, #2
 8003368:	e11b      	b.n	80035a2 <HAL_SPI_Transmit+0x280>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	d10f      	bne.n	80033da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e4:	2b40      	cmp	r3, #64	@ 0x40
 80033e6:	d007      	beq.n	80033f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003400:	d152      	bne.n	80034a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_SPI_Transmit+0xee>
 800340a:	8b7b      	ldrh	r3, [r7, #26]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d145      	bne.n	800349c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003434:	e032      	b.n	800349c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d112      	bne.n	800346a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	881a      	ldrh	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003468:	e018      	b.n	800349c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346a:	f7fe fe81 	bl	8002170 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d803      	bhi.n	8003482 <HAL_SPI_Transmit+0x160>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d102      	bne.n	8003488 <HAL_SPI_Transmit+0x166>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e082      	b.n	80035a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1c7      	bne.n	8003436 <HAL_SPI_Transmit+0x114>
 80034a6:	e053      	b.n	8003550 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_Transmit+0x194>
 80034b0:	8b7b      	ldrh	r3, [r7, #26]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d147      	bne.n	8003546 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034dc:	e033      	b.n	8003546 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d113      	bne.n	8003514 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003512:	e018      	b.n	8003546 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003514:	f7fe fe2c 	bl	8002170 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d803      	bhi.n	800352c <HAL_SPI_Transmit+0x20a>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Transmit+0x210>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e02d      	b.n	80035a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1c6      	bne.n	80034de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fbd9 	bl	8003d0c <SPI_EndRxTxTransaction>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b088      	sub	sp, #32
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	e104      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_SPI_Receive+0x2c>
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0fc      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e2:	d112      	bne.n	800360a <HAL_SPI_Receive+0x60>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10e      	bne.n	800360a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2204      	movs	r2, #4
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f8eb 	bl	80037dc <HAL_SPI_TransmitReceive>
 8003606:	4603      	mov	r3, r0
 8003608:	e0e4      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360a:	f7fe fdb1 	bl	8002170 <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_SPI_Receive+0x74>
 800361a:	2302      	movs	r3, #2
 800361c:	e0da      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2204      	movs	r2, #4
 800362a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800366c:	d10f      	bne.n	800368e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b40      	cmp	r3, #64	@ 0x40
 800369a:	d007      	beq.n	80036ac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d170      	bne.n	8003796 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036b4:	e035      	b.n	8003722 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d115      	bne.n	80036f0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f103 020c 	add.w	r2, r3, #12
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ee:	e018      	b.n	8003722 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f0:	f7fe fd3e 	bl	8002170 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d803      	bhi.n	8003708 <HAL_SPI_Receive+0x15e>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d102      	bne.n	800370e <HAL_SPI_Receive+0x164>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e058      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1c4      	bne.n	80036b6 <HAL_SPI_Receive+0x10c>
 800372c:	e038      	b.n	80037a0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d113      	bne.n	8003764 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003746:	b292      	uxth	r2, r2
 8003748:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003762:	e018      	b.n	8003796 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003764:	f7fe fd04 	bl	8002170 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d803      	bhi.n	800377c <HAL_SPI_Receive+0x1d2>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d102      	bne.n	8003782 <HAL_SPI_Receive+0x1d8>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e01e      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1c6      	bne.n	800372e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fa4b 	bl	8003c40 <SPI_EndRxTransaction>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	@ 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ee:	f7fe fcbf 	bl	8002170 <HAL_GetTick>
 80037f2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037fa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d00c      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x4a>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003812:	d106      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x46>
 800381c:	7ffb      	ldrb	r3, [r7, #31]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d001      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	e17f      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x5c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x5c>
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e174      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_SPI_TransmitReceive+0x6e>
 8003846:	2302      	movs	r3, #2
 8003848:	e16d      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b04      	cmp	r3, #4
 800385c:	d003      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2205      	movs	r2, #5
 8003862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	887a      	ldrh	r2, [r7, #2]
 800388e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b40      	cmp	r3, #64	@ 0x40
 80038a8:	d007      	beq.n	80038ba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c2:	d17e      	bne.n	80039c2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0xf6>
 80038cc:	8afb      	ldrh	r3, [r7, #22]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d16c      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	1c9a      	adds	r2, r3, #2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f6:	e059      	b.n	80039ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d11b      	bne.n	800393e <HAL_SPI_TransmitReceive+0x162>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d016      	beq.n	800393e <HAL_SPI_TransmitReceive+0x162>
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	2b01      	cmp	r3, #1
 8003914:	d113      	bne.n	800393e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	1c9a      	adds	r2, r3, #2
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d119      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x1a4>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d014      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	b292      	uxth	r2, r2
 8003962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003968:	1c9a      	adds	r2, r3, #2
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003980:	f7fe fbf6 	bl	8002170 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398c:	429a      	cmp	r2, r3
 800398e:	d80d      	bhi.n	80039ac <HAL_SPI_TransmitReceive+0x1d0>
 8003990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d009      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0bc      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1a0      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x11c>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d19b      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x11c>
 80039c0:	e082      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_TransmitReceive+0x1f4>
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d171      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039f6:	e05d      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d11c      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x264>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d017      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x264>
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d114      	bne.n	8003a40 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d119      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x2a6>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d014      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a82:	f7fe fb75 	bl	8002170 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d803      	bhi.n	8003a9a <HAL_SPI_TransmitReceive+0x2be>
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x2c4>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e038      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d19c      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x21c>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d197      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f91d 	bl	8003d0c <SPI_EndRxTxTransaction>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e01d      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b40:	f7fe fb16 	bl	8002170 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b50:	f7fe fb0e 	bl	8002170 <HAL_GetTick>
 8003b54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b56:	4b39      	ldr	r3, [pc, #228]	@ (8003c3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	015b      	lsls	r3, r3, #5
 8003b5c:	0d1b      	lsrs	r3, r3, #20
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b66:	e055      	b.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d051      	beq.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b70:	f7fe fafe 	bl	8002170 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d902      	bls.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d13d      	bne.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b9e:	d111      	bne.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba8:	d004      	beq.n	8003bb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb2:	d107      	bne.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bcc:	d10f      	bne.n	8003bee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e018      	b.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e002      	b.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d19a      	bne.n	8003b68 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000018 	.word	0x20000018

08003c40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c54:	d111      	bne.n	8003c7a <SPI_EndRxTransaction+0x3a>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5e:	d004      	beq.n	8003c6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c68:	d107      	bne.n	8003c7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c82:	d12a      	bne.n	8003cda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c8c:	d012      	beq.n	8003cb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2180      	movs	r1, #128	@ 0x80
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff ff49 	bl	8003b30 <SPI_WaitFlagStateUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02d      	beq.n	8003d00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e026      	b.n	8003d02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff36 	bl	8003b30 <SPI_WaitFlagStateUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01a      	beq.n	8003d00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e013      	b.n	8003d02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff ff23 	bl	8003b30 <SPI_WaitFlagStateUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	2102      	movs	r1, #2
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ff04 	bl	8003b30 <SPI_WaitFlagStateUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e032      	b.n	8003da4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <SPI_EndRxTxTransaction+0xa0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	@ (8003db0 <SPI_EndRxTxTransaction+0xa4>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	0d5b      	lsrs	r3, r3, #21
 8003d4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d5c:	d112      	bne.n	8003d84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	@ 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fee1 	bl	8003b30 <SPI_WaitFlagStateUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e00f      	b.n	8003da4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b80      	cmp	r3, #128	@ 0x80
 8003d9c:	d0f2      	beq.n	8003d84 <SPI_EndRxTxTransaction+0x78>
 8003d9e:	e000      	b.n	8003da2 <SPI_EndRxTxTransaction+0x96>
        break;
 8003da0:	bf00      	nop
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000018 	.word	0x20000018
 8003db0:	165e9f81 	.word	0x165e9f81

08003db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e042      	b.n	8003e4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd ffe8 	bl	8001db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	@ 0x24
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f82b 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b0c0      	sub	sp, #256	@ 0x100
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	ea40 0301 	orr.w	r3, r0, r1
 8003e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003eac:	f021 010c 	bic.w	r1, r1, #12
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	ea40 0301 	orr.w	r3, r0, r1
 8003eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8004120 <UART_SetConfig+0x2cc>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0xa0>
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b8d      	ldr	r3, [pc, #564]	@ (8004124 <UART_SetConfig+0x2d0>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d104      	bne.n	8003efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7ff f978 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003efc:	e003      	b.n	8003f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efe:	f7ff f95f 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8003f02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f10:	f040 810c 	bne.w	800412c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f36:	4621      	mov	r1, r4
 8003f38:	eb12 0801 	adds.w	r8, r2, r1
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb43 0901 	adc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb49 0303 	adc.w	r3, r9, r3
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f82:	460b      	mov	r3, r1
 8003f84:	18db      	adds	r3, r3, r3
 8003f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f88:	4613      	mov	r3, r2
 8003f8a:	eb42 0303 	adc.w	r3, r2, r3
 8003f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f98:	f7fc fe7e 	bl	8000c98 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4b61      	ldr	r3, [pc, #388]	@ (8004128 <UART_SetConfig+0x2d4>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011c      	lsls	r4, r3, #4
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fcc:	4641      	mov	r1, r8
 8003fce:	eb12 0a01 	adds.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fec:	4692      	mov	sl, r2
 8003fee:	469b      	mov	fp, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8004000:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004010:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004018:	460b      	mov	r3, r1
 800401a:	18db      	adds	r3, r3, r3
 800401c:	643b      	str	r3, [r7, #64]	@ 0x40
 800401e:	4613      	mov	r3, r2
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	647b      	str	r3, [r7, #68]	@ 0x44
 8004026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800402a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800402e:	f7fc fe33 	bl	8000c98 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4611      	mov	r1, r2
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <UART_SetConfig+0x2d4>)
 800403a:	fba3 2301 	umull	r2, r3, r3, r1
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2264      	movs	r2, #100	@ 0x64
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800404e:	4b36      	ldr	r3, [pc, #216]	@ (8004128 <UART_SetConfig+0x2d4>)
 8004050:	fba3 2302 	umull	r2, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800405c:	441c      	add	r4, r3
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004068:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800406c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004078:	415b      	adcs	r3, r3
 800407a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800407c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004080:	4641      	mov	r1, r8
 8004082:	1851      	adds	r1, r2, r1
 8004084:	6339      	str	r1, [r7, #48]	@ 0x30
 8004086:	4649      	mov	r1, r9
 8004088:	414b      	adcs	r3, r1
 800408a:	637b      	str	r3, [r7, #52]	@ 0x34
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004098:	4659      	mov	r1, fp
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4651      	mov	r1, sl
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4642      	mov	r2, r8
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040b4:	464b      	mov	r3, r9
 80040b6:	460a      	mov	r2, r1
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040d4:	460b      	mov	r3, r1
 80040d6:	18db      	adds	r3, r3, r3
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040da:	4613      	mov	r3, r2
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040ea:	f7fc fdd5 	bl	8000c98 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <UART_SetConfig+0x2d4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	@ 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3332      	adds	r3, #50	@ 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <UART_SetConfig+0x2d4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 0207 	and.w	r2, r3, #7
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800411c:	e106      	b.n	800432c <UART_SetConfig+0x4d8>
 800411e:	bf00      	nop
 8004120:	40011000 	.word	0x40011000
 8004124:	40011400 	.word	0x40011400
 8004128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004136:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800413a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	1891      	adds	r1, r2, r2
 8004144:	6239      	str	r1, [r7, #32]
 8004146:	415b      	adcs	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800414e:	4641      	mov	r1, r8
 8004150:	1854      	adds	r4, r2, r1
 8004152:	4649      	mov	r1, r9
 8004154:	eb43 0501 	adc.w	r5, r3, r1
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	00eb      	lsls	r3, r5, #3
 8004162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004166:	00e2      	lsls	r2, r4, #3
 8004168:	4614      	mov	r4, r2
 800416a:	461d      	mov	r5, r3
 800416c:	4643      	mov	r3, r8
 800416e:	18e3      	adds	r3, r4, r3
 8004170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004174:	464b      	mov	r3, r9
 8004176:	eb45 0303 	adc.w	r3, r5, r3
 800417a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800418a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800419a:	4629      	mov	r1, r5
 800419c:	008b      	lsls	r3, r1, #2
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a4:	4621      	mov	r1, r4
 80041a6:	008a      	lsls	r2, r1, #2
 80041a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041ac:	f7fc fd74 	bl	8000c98 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b60      	ldr	r3, [pc, #384]	@ (8004338 <UART_SetConfig+0x4e4>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	011c      	lsls	r4, r3, #4
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	61b9      	str	r1, [r7, #24]
 80041d8:	415b      	adcs	r3, r3
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6139      	str	r1, [r7, #16]
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	67bb      	str	r3, [r7, #120]	@ 0x78
 800422a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004238:	4649      	mov	r1, r9
 800423a:	008b      	lsls	r3, r1, #2
 800423c:	4641      	mov	r1, r8
 800423e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004242:	4641      	mov	r1, r8
 8004244:	008a      	lsls	r2, r1, #2
 8004246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800424a:	f7fc fd25 	bl	8000c98 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4611      	mov	r1, r2
 8004254:	4b38      	ldr	r3, [pc, #224]	@ (8004338 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2301 	umull	r2, r3, r3, r1
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2264      	movs	r2, #100	@ 0x64
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	1acb      	subs	r3, r1, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	@ 0x32
 8004268:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <UART_SetConfig+0x4e4>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004274:	441c      	add	r4, r3
 8004276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427a:	2200      	movs	r2, #0
 800427c:	673b      	str	r3, [r7, #112]	@ 0x70
 800427e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	415b      	adcs	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c6:	464b      	mov	r3, r9
 80042c8:	460a      	mov	r2, r1
 80042ca:	eb42 0303 	adc.w	r3, r2, r3
 80042ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042da:	667a      	str	r2, [r7, #100]	@ 0x64
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042e8:	4649      	mov	r1, r9
 80042ea:	008b      	lsls	r3, r1, #2
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f2:	4641      	mov	r1, r8
 80042f4:	008a      	lsls	r2, r1, #2
 80042f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042fa:	f7fc fccd 	bl	8000c98 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <UART_SetConfig+0x4e4>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	@ 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	3332      	adds	r3, #50	@ 0x32
 8004316:	4a08      	ldr	r2, [pc, #32]	@ (8004338 <UART_SetConfig+0x4e4>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4422      	add	r2, r4
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004338:	51eb851f 	.word	0x51eb851f

0800433c <__cvt>:
 800433c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	ec57 6b10 	vmov	r6, r7, d0
 8004344:	2f00      	cmp	r7, #0
 8004346:	460c      	mov	r4, r1
 8004348:	4619      	mov	r1, r3
 800434a:	463b      	mov	r3, r7
 800434c:	bfbb      	ittet	lt
 800434e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004352:	461f      	movlt	r7, r3
 8004354:	2300      	movge	r3, #0
 8004356:	232d      	movlt	r3, #45	@ 0x2d
 8004358:	700b      	strb	r3, [r1, #0]
 800435a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800435c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004360:	4691      	mov	r9, r2
 8004362:	f023 0820 	bic.w	r8, r3, #32
 8004366:	bfbc      	itt	lt
 8004368:	4632      	movlt	r2, r6
 800436a:	4616      	movlt	r6, r2
 800436c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004370:	d005      	beq.n	800437e <__cvt+0x42>
 8004372:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004376:	d100      	bne.n	800437a <__cvt+0x3e>
 8004378:	3401      	adds	r4, #1
 800437a:	2102      	movs	r1, #2
 800437c:	e000      	b.n	8004380 <__cvt+0x44>
 800437e:	2103      	movs	r1, #3
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	ab02      	add	r3, sp, #8
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	ec47 6b10 	vmov	d0, r6, r7
 800438c:	4653      	mov	r3, sl
 800438e:	4622      	mov	r2, r4
 8004390:	f001 f89a 	bl	80054c8 <_dtoa_r>
 8004394:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004398:	4605      	mov	r5, r0
 800439a:	d119      	bne.n	80043d0 <__cvt+0x94>
 800439c:	f019 0f01 	tst.w	r9, #1
 80043a0:	d00e      	beq.n	80043c0 <__cvt+0x84>
 80043a2:	eb00 0904 	add.w	r9, r0, r4
 80043a6:	2200      	movs	r2, #0
 80043a8:	2300      	movs	r3, #0
 80043aa:	4630      	mov	r0, r6
 80043ac:	4639      	mov	r1, r7
 80043ae:	f7fc fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80043b2:	b108      	cbz	r0, 80043b8 <__cvt+0x7c>
 80043b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80043b8:	2230      	movs	r2, #48	@ 0x30
 80043ba:	9b03      	ldr	r3, [sp, #12]
 80043bc:	454b      	cmp	r3, r9
 80043be:	d31e      	bcc.n	80043fe <__cvt+0xc2>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043c4:	1b5b      	subs	r3, r3, r5
 80043c6:	4628      	mov	r0, r5
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	b004      	add	sp, #16
 80043cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043d4:	eb00 0904 	add.w	r9, r0, r4
 80043d8:	d1e5      	bne.n	80043a6 <__cvt+0x6a>
 80043da:	7803      	ldrb	r3, [r0, #0]
 80043dc:	2b30      	cmp	r3, #48	@ 0x30
 80043de:	d10a      	bne.n	80043f6 <__cvt+0xba>
 80043e0:	2200      	movs	r2, #0
 80043e2:	2300      	movs	r3, #0
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc fb76 	bl	8000ad8 <__aeabi_dcmpeq>
 80043ec:	b918      	cbnz	r0, 80043f6 <__cvt+0xba>
 80043ee:	f1c4 0401 	rsb	r4, r4, #1
 80043f2:	f8ca 4000 	str.w	r4, [sl]
 80043f6:	f8da 3000 	ldr.w	r3, [sl]
 80043fa:	4499      	add	r9, r3
 80043fc:	e7d3      	b.n	80043a6 <__cvt+0x6a>
 80043fe:	1c59      	adds	r1, r3, #1
 8004400:	9103      	str	r1, [sp, #12]
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e7d9      	b.n	80043ba <__cvt+0x7e>

08004406 <__exponent>:
 8004406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004408:	2900      	cmp	r1, #0
 800440a:	bfba      	itte	lt
 800440c:	4249      	neglt	r1, r1
 800440e:	232d      	movlt	r3, #45	@ 0x2d
 8004410:	232b      	movge	r3, #43	@ 0x2b
 8004412:	2909      	cmp	r1, #9
 8004414:	7002      	strb	r2, [r0, #0]
 8004416:	7043      	strb	r3, [r0, #1]
 8004418:	dd29      	ble.n	800446e <__exponent+0x68>
 800441a:	f10d 0307 	add.w	r3, sp, #7
 800441e:	461d      	mov	r5, r3
 8004420:	270a      	movs	r7, #10
 8004422:	461a      	mov	r2, r3
 8004424:	fbb1 f6f7 	udiv	r6, r1, r7
 8004428:	fb07 1416 	mls	r4, r7, r6, r1
 800442c:	3430      	adds	r4, #48	@ 0x30
 800442e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004432:	460c      	mov	r4, r1
 8004434:	2c63      	cmp	r4, #99	@ 0x63
 8004436:	f103 33ff 	add.w	r3, r3, #4294967295
 800443a:	4631      	mov	r1, r6
 800443c:	dcf1      	bgt.n	8004422 <__exponent+0x1c>
 800443e:	3130      	adds	r1, #48	@ 0x30
 8004440:	1e94      	subs	r4, r2, #2
 8004442:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004446:	1c41      	adds	r1, r0, #1
 8004448:	4623      	mov	r3, r4
 800444a:	42ab      	cmp	r3, r5
 800444c:	d30a      	bcc.n	8004464 <__exponent+0x5e>
 800444e:	f10d 0309 	add.w	r3, sp, #9
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	42ac      	cmp	r4, r5
 8004456:	bf88      	it	hi
 8004458:	2300      	movhi	r3, #0
 800445a:	3302      	adds	r3, #2
 800445c:	4403      	add	r3, r0
 800445e:	1a18      	subs	r0, r3, r0
 8004460:	b003      	add	sp, #12
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004464:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004468:	f801 6f01 	strb.w	r6, [r1, #1]!
 800446c:	e7ed      	b.n	800444a <__exponent+0x44>
 800446e:	2330      	movs	r3, #48	@ 0x30
 8004470:	3130      	adds	r1, #48	@ 0x30
 8004472:	7083      	strb	r3, [r0, #2]
 8004474:	70c1      	strb	r1, [r0, #3]
 8004476:	1d03      	adds	r3, r0, #4
 8004478:	e7f1      	b.n	800445e <__exponent+0x58>
	...

0800447c <_printf_float>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	b08d      	sub	sp, #52	@ 0x34
 8004482:	460c      	mov	r4, r1
 8004484:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004488:	4616      	mov	r6, r2
 800448a:	461f      	mov	r7, r3
 800448c:	4605      	mov	r5, r0
 800448e:	f000 ff15 	bl	80052bc <_localeconv_r>
 8004492:	6803      	ldr	r3, [r0, #0]
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fb fef2 	bl	8000280 <strlen>
 800449c:	2300      	movs	r3, #0
 800449e:	930a      	str	r3, [sp, #40]	@ 0x28
 80044a0:	f8d8 3000 	ldr.w	r3, [r8]
 80044a4:	9005      	str	r0, [sp, #20]
 80044a6:	3307      	adds	r3, #7
 80044a8:	f023 0307 	bic.w	r3, r3, #7
 80044ac:	f103 0208 	add.w	r2, r3, #8
 80044b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044b4:	f8d4 b000 	ldr.w	fp, [r4]
 80044b8:	f8c8 2000 	str.w	r2, [r8]
 80044bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80044c4:	9307      	str	r3, [sp, #28]
 80044c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80044ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80044ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004744 <_printf_float+0x2c8>)
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	f7fc fb30 	bl	8000b3c <__aeabi_dcmpun>
 80044dc:	bb70      	cbnz	r0, 800453c <_printf_float+0xc0>
 80044de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044e2:	4b98      	ldr	r3, [pc, #608]	@ (8004744 <_printf_float+0x2c8>)
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	f7fc fb0a 	bl	8000b00 <__aeabi_dcmple>
 80044ec:	bb30      	cbnz	r0, 800453c <_printf_float+0xc0>
 80044ee:	2200      	movs	r2, #0
 80044f0:	2300      	movs	r3, #0
 80044f2:	4640      	mov	r0, r8
 80044f4:	4649      	mov	r1, r9
 80044f6:	f7fc faf9 	bl	8000aec <__aeabi_dcmplt>
 80044fa:	b110      	cbz	r0, 8004502 <_printf_float+0x86>
 80044fc:	232d      	movs	r3, #45	@ 0x2d
 80044fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004502:	4a91      	ldr	r2, [pc, #580]	@ (8004748 <_printf_float+0x2cc>)
 8004504:	4b91      	ldr	r3, [pc, #580]	@ (800474c <_printf_float+0x2d0>)
 8004506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800450a:	bf8c      	ite	hi
 800450c:	4690      	movhi	r8, r2
 800450e:	4698      	movls	r8, r3
 8004510:	2303      	movs	r3, #3
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	f02b 0304 	bic.w	r3, fp, #4
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	f04f 0900 	mov.w	r9, #0
 800451e:	9700      	str	r7, [sp, #0]
 8004520:	4633      	mov	r3, r6
 8004522:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004524:	4621      	mov	r1, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f000 f9d2 	bl	80048d0 <_printf_common>
 800452c:	3001      	adds	r0, #1
 800452e:	f040 808d 	bne.w	800464c <_printf_float+0x1d0>
 8004532:	f04f 30ff 	mov.w	r0, #4294967295
 8004536:	b00d      	add	sp, #52	@ 0x34
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	4640      	mov	r0, r8
 8004542:	4649      	mov	r1, r9
 8004544:	f7fc fafa 	bl	8000b3c <__aeabi_dcmpun>
 8004548:	b140      	cbz	r0, 800455c <_printf_float+0xe0>
 800454a:	464b      	mov	r3, r9
 800454c:	2b00      	cmp	r3, #0
 800454e:	bfbc      	itt	lt
 8004550:	232d      	movlt	r3, #45	@ 0x2d
 8004552:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004556:	4a7e      	ldr	r2, [pc, #504]	@ (8004750 <_printf_float+0x2d4>)
 8004558:	4b7e      	ldr	r3, [pc, #504]	@ (8004754 <_printf_float+0x2d8>)
 800455a:	e7d4      	b.n	8004506 <_printf_float+0x8a>
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004562:	9206      	str	r2, [sp, #24]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	d13b      	bne.n	80045e0 <_printf_float+0x164>
 8004568:	2306      	movs	r3, #6
 800456a:	6063      	str	r3, [r4, #4]
 800456c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004570:	2300      	movs	r3, #0
 8004572:	6022      	str	r2, [r4, #0]
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	ab0a      	add	r3, sp, #40	@ 0x28
 8004578:	e9cd a301 	strd	sl, r3, [sp, #4]
 800457c:	ab09      	add	r3, sp, #36	@ 0x24
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	6861      	ldr	r1, [r4, #4]
 8004582:	ec49 8b10 	vmov	d0, r8, r9
 8004586:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800458a:	4628      	mov	r0, r5
 800458c:	f7ff fed6 	bl	800433c <__cvt>
 8004590:	9b06      	ldr	r3, [sp, #24]
 8004592:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004594:	2b47      	cmp	r3, #71	@ 0x47
 8004596:	4680      	mov	r8, r0
 8004598:	d129      	bne.n	80045ee <_printf_float+0x172>
 800459a:	1cc8      	adds	r0, r1, #3
 800459c:	db02      	blt.n	80045a4 <_printf_float+0x128>
 800459e:	6863      	ldr	r3, [r4, #4]
 80045a0:	4299      	cmp	r1, r3
 80045a2:	dd41      	ble.n	8004628 <_printf_float+0x1ac>
 80045a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80045a8:	fa5f fa8a 	uxtb.w	sl, sl
 80045ac:	3901      	subs	r1, #1
 80045ae:	4652      	mov	r2, sl
 80045b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80045b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80045b6:	f7ff ff26 	bl	8004406 <__exponent>
 80045ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80045bc:	1813      	adds	r3, r2, r0
 80045be:	2a01      	cmp	r2, #1
 80045c0:	4681      	mov	r9, r0
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	dc02      	bgt.n	80045cc <_printf_float+0x150>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d2      	lsls	r2, r2, #31
 80045ca:	d501      	bpl.n	80045d0 <_printf_float+0x154>
 80045cc:	3301      	adds	r3, #1
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0a2      	beq.n	800451e <_printf_float+0xa2>
 80045d8:	232d      	movs	r3, #45	@ 0x2d
 80045da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045de:	e79e      	b.n	800451e <_printf_float+0xa2>
 80045e0:	9a06      	ldr	r2, [sp, #24]
 80045e2:	2a47      	cmp	r2, #71	@ 0x47
 80045e4:	d1c2      	bne.n	800456c <_printf_float+0xf0>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1c0      	bne.n	800456c <_printf_float+0xf0>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e7bd      	b.n	800456a <_printf_float+0xee>
 80045ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045f2:	d9db      	bls.n	80045ac <_printf_float+0x130>
 80045f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80045f8:	d118      	bne.n	800462c <_printf_float+0x1b0>
 80045fa:	2900      	cmp	r1, #0
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	dd0b      	ble.n	8004618 <_printf_float+0x19c>
 8004600:	6121      	str	r1, [r4, #16]
 8004602:	b913      	cbnz	r3, 800460a <_printf_float+0x18e>
 8004604:	6822      	ldr	r2, [r4, #0]
 8004606:	07d0      	lsls	r0, r2, #31
 8004608:	d502      	bpl.n	8004610 <_printf_float+0x194>
 800460a:	3301      	adds	r3, #1
 800460c:	440b      	add	r3, r1
 800460e:	6123      	str	r3, [r4, #16]
 8004610:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004612:	f04f 0900 	mov.w	r9, #0
 8004616:	e7db      	b.n	80045d0 <_printf_float+0x154>
 8004618:	b913      	cbnz	r3, 8004620 <_printf_float+0x1a4>
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	07d2      	lsls	r2, r2, #31
 800461e:	d501      	bpl.n	8004624 <_printf_float+0x1a8>
 8004620:	3302      	adds	r3, #2
 8004622:	e7f4      	b.n	800460e <_printf_float+0x192>
 8004624:	2301      	movs	r3, #1
 8004626:	e7f2      	b.n	800460e <_printf_float+0x192>
 8004628:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800462c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800462e:	4299      	cmp	r1, r3
 8004630:	db05      	blt.n	800463e <_printf_float+0x1c2>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	6121      	str	r1, [r4, #16]
 8004636:	07d8      	lsls	r0, r3, #31
 8004638:	d5ea      	bpl.n	8004610 <_printf_float+0x194>
 800463a:	1c4b      	adds	r3, r1, #1
 800463c:	e7e7      	b.n	800460e <_printf_float+0x192>
 800463e:	2900      	cmp	r1, #0
 8004640:	bfd4      	ite	le
 8004642:	f1c1 0202 	rsble	r2, r1, #2
 8004646:	2201      	movgt	r2, #1
 8004648:	4413      	add	r3, r2
 800464a:	e7e0      	b.n	800460e <_printf_float+0x192>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	055a      	lsls	r2, r3, #21
 8004650:	d407      	bmi.n	8004662 <_printf_float+0x1e6>
 8004652:	6923      	ldr	r3, [r4, #16]
 8004654:	4642      	mov	r2, r8
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	d12b      	bne.n	80046b8 <_printf_float+0x23c>
 8004660:	e767      	b.n	8004532 <_printf_float+0xb6>
 8004662:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004666:	f240 80dd 	bls.w	8004824 <_printf_float+0x3a8>
 800466a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800466e:	2200      	movs	r2, #0
 8004670:	2300      	movs	r3, #0
 8004672:	f7fc fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004676:	2800      	cmp	r0, #0
 8004678:	d033      	beq.n	80046e2 <_printf_float+0x266>
 800467a:	4a37      	ldr	r2, [pc, #220]	@ (8004758 <_printf_float+0x2dc>)
 800467c:	2301      	movs	r3, #1
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	f43f af54 	beq.w	8004532 <_printf_float+0xb6>
 800468a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800468e:	4543      	cmp	r3, r8
 8004690:	db02      	blt.n	8004698 <_printf_float+0x21c>
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	07d8      	lsls	r0, r3, #31
 8004696:	d50f      	bpl.n	80046b8 <_printf_float+0x23c>
 8004698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800469c:	4631      	mov	r1, r6
 800469e:	4628      	mov	r0, r5
 80046a0:	47b8      	blx	r7
 80046a2:	3001      	adds	r0, #1
 80046a4:	f43f af45 	beq.w	8004532 <_printf_float+0xb6>
 80046a8:	f04f 0900 	mov.w	r9, #0
 80046ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80046b0:	f104 0a1a 	add.w	sl, r4, #26
 80046b4:	45c8      	cmp	r8, r9
 80046b6:	dc09      	bgt.n	80046cc <_printf_float+0x250>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	079b      	lsls	r3, r3, #30
 80046bc:	f100 8103 	bmi.w	80048c6 <_printf_float+0x44a>
 80046c0:	68e0      	ldr	r0, [r4, #12]
 80046c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046c4:	4298      	cmp	r0, r3
 80046c6:	bfb8      	it	lt
 80046c8:	4618      	movlt	r0, r3
 80046ca:	e734      	b.n	8004536 <_printf_float+0xba>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4652      	mov	r2, sl
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f af2b 	beq.w	8004532 <_printf_float+0xb6>
 80046dc:	f109 0901 	add.w	r9, r9, #1
 80046e0:	e7e8      	b.n	80046b4 <_printf_float+0x238>
 80046e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dc39      	bgt.n	800475c <_printf_float+0x2e0>
 80046e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <_printf_float+0x2dc>)
 80046ea:	2301      	movs	r3, #1
 80046ec:	4631      	mov	r1, r6
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b8      	blx	r7
 80046f2:	3001      	adds	r0, #1
 80046f4:	f43f af1d 	beq.w	8004532 <_printf_float+0xb6>
 80046f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80046fc:	ea59 0303 	orrs.w	r3, r9, r3
 8004700:	d102      	bne.n	8004708 <_printf_float+0x28c>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	07d9      	lsls	r1, r3, #31
 8004706:	d5d7      	bpl.n	80046b8 <_printf_float+0x23c>
 8004708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800470c:	4631      	mov	r1, r6
 800470e:	4628      	mov	r0, r5
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f af0d 	beq.w	8004532 <_printf_float+0xb6>
 8004718:	f04f 0a00 	mov.w	sl, #0
 800471c:	f104 0b1a 	add.w	fp, r4, #26
 8004720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004722:	425b      	negs	r3, r3
 8004724:	4553      	cmp	r3, sl
 8004726:	dc01      	bgt.n	800472c <_printf_float+0x2b0>
 8004728:	464b      	mov	r3, r9
 800472a:	e793      	b.n	8004654 <_printf_float+0x1d8>
 800472c:	2301      	movs	r3, #1
 800472e:	465a      	mov	r2, fp
 8004730:	4631      	mov	r1, r6
 8004732:	4628      	mov	r0, r5
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	f43f aefb 	beq.w	8004532 <_printf_float+0xb6>
 800473c:	f10a 0a01 	add.w	sl, sl, #1
 8004740:	e7ee      	b.n	8004720 <_printf_float+0x2a4>
 8004742:	bf00      	nop
 8004744:	7fefffff 	.word	0x7fefffff
 8004748:	08008a7c 	.word	0x08008a7c
 800474c:	08008a78 	.word	0x08008a78
 8004750:	08008a84 	.word	0x08008a84
 8004754:	08008a80 	.word	0x08008a80
 8004758:	08008a88 	.word	0x08008a88
 800475c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800475e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004762:	4553      	cmp	r3, sl
 8004764:	bfa8      	it	ge
 8004766:	4653      	movge	r3, sl
 8004768:	2b00      	cmp	r3, #0
 800476a:	4699      	mov	r9, r3
 800476c:	dc36      	bgt.n	80047dc <_printf_float+0x360>
 800476e:	f04f 0b00 	mov.w	fp, #0
 8004772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004776:	f104 021a 	add.w	r2, r4, #26
 800477a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800477c:	9306      	str	r3, [sp, #24]
 800477e:	eba3 0309 	sub.w	r3, r3, r9
 8004782:	455b      	cmp	r3, fp
 8004784:	dc31      	bgt.n	80047ea <_printf_float+0x36e>
 8004786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004788:	459a      	cmp	sl, r3
 800478a:	dc3a      	bgt.n	8004802 <_printf_float+0x386>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	07da      	lsls	r2, r3, #31
 8004790:	d437      	bmi.n	8004802 <_printf_float+0x386>
 8004792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004794:	ebaa 0903 	sub.w	r9, sl, r3
 8004798:	9b06      	ldr	r3, [sp, #24]
 800479a:	ebaa 0303 	sub.w	r3, sl, r3
 800479e:	4599      	cmp	r9, r3
 80047a0:	bfa8      	it	ge
 80047a2:	4699      	movge	r9, r3
 80047a4:	f1b9 0f00 	cmp.w	r9, #0
 80047a8:	dc33      	bgt.n	8004812 <_printf_float+0x396>
 80047aa:	f04f 0800 	mov.w	r8, #0
 80047ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047b2:	f104 0b1a 	add.w	fp, r4, #26
 80047b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b8:	ebaa 0303 	sub.w	r3, sl, r3
 80047bc:	eba3 0309 	sub.w	r3, r3, r9
 80047c0:	4543      	cmp	r3, r8
 80047c2:	f77f af79 	ble.w	80046b8 <_printf_float+0x23c>
 80047c6:	2301      	movs	r3, #1
 80047c8:	465a      	mov	r2, fp
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f aeae 	beq.w	8004532 <_printf_float+0xb6>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	e7ec      	b.n	80047b6 <_printf_float+0x33a>
 80047dc:	4642      	mov	r2, r8
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	d1c2      	bne.n	800476e <_printf_float+0x2f2>
 80047e8:	e6a3      	b.n	8004532 <_printf_float+0xb6>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	9206      	str	r2, [sp, #24]
 80047f2:	47b8      	blx	r7
 80047f4:	3001      	adds	r0, #1
 80047f6:	f43f ae9c 	beq.w	8004532 <_printf_float+0xb6>
 80047fa:	9a06      	ldr	r2, [sp, #24]
 80047fc:	f10b 0b01 	add.w	fp, fp, #1
 8004800:	e7bb      	b.n	800477a <_printf_float+0x2fe>
 8004802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d1c0      	bne.n	8004792 <_printf_float+0x316>
 8004810:	e68f      	b.n	8004532 <_printf_float+0xb6>
 8004812:	9a06      	ldr	r2, [sp, #24]
 8004814:	464b      	mov	r3, r9
 8004816:	4442      	add	r2, r8
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d1c3      	bne.n	80047aa <_printf_float+0x32e>
 8004822:	e686      	b.n	8004532 <_printf_float+0xb6>
 8004824:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004828:	f1ba 0f01 	cmp.w	sl, #1
 800482c:	dc01      	bgt.n	8004832 <_printf_float+0x3b6>
 800482e:	07db      	lsls	r3, r3, #31
 8004830:	d536      	bpl.n	80048a0 <_printf_float+0x424>
 8004832:	2301      	movs	r3, #1
 8004834:	4642      	mov	r2, r8
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f ae78 	beq.w	8004532 <_printf_float+0xb6>
 8004842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f ae70 	beq.w	8004532 <_printf_float+0xb6>
 8004852:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
 800485a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800485e:	f7fc f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004862:	b9c0      	cbnz	r0, 8004896 <_printf_float+0x41a>
 8004864:	4653      	mov	r3, sl
 8004866:	f108 0201 	add.w	r2, r8, #1
 800486a:	4631      	mov	r1, r6
 800486c:	4628      	mov	r0, r5
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	d10c      	bne.n	800488e <_printf_float+0x412>
 8004874:	e65d      	b.n	8004532 <_printf_float+0xb6>
 8004876:	2301      	movs	r3, #1
 8004878:	465a      	mov	r2, fp
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	f43f ae56 	beq.w	8004532 <_printf_float+0xb6>
 8004886:	f108 0801 	add.w	r8, r8, #1
 800488a:	45d0      	cmp	r8, sl
 800488c:	dbf3      	blt.n	8004876 <_printf_float+0x3fa>
 800488e:	464b      	mov	r3, r9
 8004890:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004894:	e6df      	b.n	8004656 <_printf_float+0x1da>
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	f104 0b1a 	add.w	fp, r4, #26
 800489e:	e7f4      	b.n	800488a <_printf_float+0x40e>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4642      	mov	r2, r8
 80048a4:	e7e1      	b.n	800486a <_printf_float+0x3ee>
 80048a6:	2301      	movs	r3, #1
 80048a8:	464a      	mov	r2, r9
 80048aa:	4631      	mov	r1, r6
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	f43f ae3e 	beq.w	8004532 <_printf_float+0xb6>
 80048b6:	f108 0801 	add.w	r8, r8, #1
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048be:	1a5b      	subs	r3, r3, r1
 80048c0:	4543      	cmp	r3, r8
 80048c2:	dcf0      	bgt.n	80048a6 <_printf_float+0x42a>
 80048c4:	e6fc      	b.n	80046c0 <_printf_float+0x244>
 80048c6:	f04f 0800 	mov.w	r8, #0
 80048ca:	f104 0919 	add.w	r9, r4, #25
 80048ce:	e7f4      	b.n	80048ba <_printf_float+0x43e>

080048d0 <_printf_common>:
 80048d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	4616      	mov	r6, r2
 80048d6:	4698      	mov	r8, r3
 80048d8:	688a      	ldr	r2, [r1, #8]
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048e0:	4293      	cmp	r3, r2
 80048e2:	bfb8      	it	lt
 80048e4:	4613      	movlt	r3, r2
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048ec:	4607      	mov	r7, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	b10a      	cbz	r2, 80048f6 <_printf_common+0x26>
 80048f2:	3301      	adds	r3, #1
 80048f4:	6033      	str	r3, [r6, #0]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	0699      	lsls	r1, r3, #26
 80048fa:	bf42      	ittt	mi
 80048fc:	6833      	ldrmi	r3, [r6, #0]
 80048fe:	3302      	addmi	r3, #2
 8004900:	6033      	strmi	r3, [r6, #0]
 8004902:	6825      	ldr	r5, [r4, #0]
 8004904:	f015 0506 	ands.w	r5, r5, #6
 8004908:	d106      	bne.n	8004918 <_printf_common+0x48>
 800490a:	f104 0a19 	add.w	sl, r4, #25
 800490e:	68e3      	ldr	r3, [r4, #12]
 8004910:	6832      	ldr	r2, [r6, #0]
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	42ab      	cmp	r3, r5
 8004916:	dc26      	bgt.n	8004966 <_printf_common+0x96>
 8004918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	3b00      	subs	r3, #0
 8004920:	bf18      	it	ne
 8004922:	2301      	movne	r3, #1
 8004924:	0692      	lsls	r2, r2, #26
 8004926:	d42b      	bmi.n	8004980 <_printf_common+0xb0>
 8004928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800492c:	4641      	mov	r1, r8
 800492e:	4638      	mov	r0, r7
 8004930:	47c8      	blx	r9
 8004932:	3001      	adds	r0, #1
 8004934:	d01e      	beq.n	8004974 <_printf_common+0xa4>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	6922      	ldr	r2, [r4, #16]
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf02      	ittt	eq
 8004942:	68e5      	ldreq	r5, [r4, #12]
 8004944:	6833      	ldreq	r3, [r6, #0]
 8004946:	1aed      	subeq	r5, r5, r3
 8004948:	68a3      	ldr	r3, [r4, #8]
 800494a:	bf0c      	ite	eq
 800494c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004950:	2500      	movne	r5, #0
 8004952:	4293      	cmp	r3, r2
 8004954:	bfc4      	itt	gt
 8004956:	1a9b      	subgt	r3, r3, r2
 8004958:	18ed      	addgt	r5, r5, r3
 800495a:	2600      	movs	r6, #0
 800495c:	341a      	adds	r4, #26
 800495e:	42b5      	cmp	r5, r6
 8004960:	d11a      	bne.n	8004998 <_printf_common+0xc8>
 8004962:	2000      	movs	r0, #0
 8004964:	e008      	b.n	8004978 <_printf_common+0xa8>
 8004966:	2301      	movs	r3, #1
 8004968:	4652      	mov	r2, sl
 800496a:	4641      	mov	r1, r8
 800496c:	4638      	mov	r0, r7
 800496e:	47c8      	blx	r9
 8004970:	3001      	adds	r0, #1
 8004972:	d103      	bne.n	800497c <_printf_common+0xac>
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497c:	3501      	adds	r5, #1
 800497e:	e7c6      	b.n	800490e <_printf_common+0x3e>
 8004980:	18e1      	adds	r1, r4, r3
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	2030      	movs	r0, #48	@ 0x30
 8004986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800498a:	4422      	add	r2, r4
 800498c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004994:	3302      	adds	r3, #2
 8004996:	e7c7      	b.n	8004928 <_printf_common+0x58>
 8004998:	2301      	movs	r3, #1
 800499a:	4622      	mov	r2, r4
 800499c:	4641      	mov	r1, r8
 800499e:	4638      	mov	r0, r7
 80049a0:	47c8      	blx	r9
 80049a2:	3001      	adds	r0, #1
 80049a4:	d0e6      	beq.n	8004974 <_printf_common+0xa4>
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7d9      	b.n	800495e <_printf_common+0x8e>
	...

080049ac <_printf_i>:
 80049ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	7e0f      	ldrb	r7, [r1, #24]
 80049b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049b4:	2f78      	cmp	r7, #120	@ 0x78
 80049b6:	4691      	mov	r9, r2
 80049b8:	4680      	mov	r8, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	469a      	mov	sl, r3
 80049be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049c2:	d807      	bhi.n	80049d4 <_printf_i+0x28>
 80049c4:	2f62      	cmp	r7, #98	@ 0x62
 80049c6:	d80a      	bhi.n	80049de <_printf_i+0x32>
 80049c8:	2f00      	cmp	r7, #0
 80049ca:	f000 80d1 	beq.w	8004b70 <_printf_i+0x1c4>
 80049ce:	2f58      	cmp	r7, #88	@ 0x58
 80049d0:	f000 80b8 	beq.w	8004b44 <_printf_i+0x198>
 80049d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049dc:	e03a      	b.n	8004a54 <_printf_i+0xa8>
 80049de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049e2:	2b15      	cmp	r3, #21
 80049e4:	d8f6      	bhi.n	80049d4 <_printf_i+0x28>
 80049e6:	a101      	add	r1, pc, #4	@ (adr r1, 80049ec <_printf_i+0x40>)
 80049e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049ec:	08004a45 	.word	0x08004a45
 80049f0:	08004a59 	.word	0x08004a59
 80049f4:	080049d5 	.word	0x080049d5
 80049f8:	080049d5 	.word	0x080049d5
 80049fc:	080049d5 	.word	0x080049d5
 8004a00:	080049d5 	.word	0x080049d5
 8004a04:	08004a59 	.word	0x08004a59
 8004a08:	080049d5 	.word	0x080049d5
 8004a0c:	080049d5 	.word	0x080049d5
 8004a10:	080049d5 	.word	0x080049d5
 8004a14:	080049d5 	.word	0x080049d5
 8004a18:	08004b57 	.word	0x08004b57
 8004a1c:	08004a83 	.word	0x08004a83
 8004a20:	08004b11 	.word	0x08004b11
 8004a24:	080049d5 	.word	0x080049d5
 8004a28:	080049d5 	.word	0x080049d5
 8004a2c:	08004b79 	.word	0x08004b79
 8004a30:	080049d5 	.word	0x080049d5
 8004a34:	08004a83 	.word	0x08004a83
 8004a38:	080049d5 	.word	0x080049d5
 8004a3c:	080049d5 	.word	0x080049d5
 8004a40:	08004b19 	.word	0x08004b19
 8004a44:	6833      	ldr	r3, [r6, #0]
 8004a46:	1d1a      	adds	r2, r3, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6032      	str	r2, [r6, #0]
 8004a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a54:	2301      	movs	r3, #1
 8004a56:	e09c      	b.n	8004b92 <_printf_i+0x1e6>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	1d19      	adds	r1, r3, #4
 8004a5e:	6031      	str	r1, [r6, #0]
 8004a60:	0606      	lsls	r6, r0, #24
 8004a62:	d501      	bpl.n	8004a68 <_printf_i+0xbc>
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	e003      	b.n	8004a70 <_printf_i+0xc4>
 8004a68:	0645      	lsls	r5, r0, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0xb8>
 8004a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	da03      	bge.n	8004a7c <_printf_i+0xd0>
 8004a74:	232d      	movs	r3, #45	@ 0x2d
 8004a76:	426d      	negs	r5, r5
 8004a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a7c:	4858      	ldr	r0, [pc, #352]	@ (8004be0 <_printf_i+0x234>)
 8004a7e:	230a      	movs	r3, #10
 8004a80:	e011      	b.n	8004aa6 <_printf_i+0xfa>
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	6833      	ldr	r3, [r6, #0]
 8004a86:	0608      	lsls	r0, r1, #24
 8004a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a8c:	d402      	bmi.n	8004a94 <_printf_i+0xe8>
 8004a8e:	0649      	lsls	r1, r1, #25
 8004a90:	bf48      	it	mi
 8004a92:	b2ad      	uxthmi	r5, r5
 8004a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a96:	4852      	ldr	r0, [pc, #328]	@ (8004be0 <_printf_i+0x234>)
 8004a98:	6033      	str	r3, [r6, #0]
 8004a9a:	bf14      	ite	ne
 8004a9c:	230a      	movne	r3, #10
 8004a9e:	2308      	moveq	r3, #8
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aa6:	6866      	ldr	r6, [r4, #4]
 8004aa8:	60a6      	str	r6, [r4, #8]
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	db05      	blt.n	8004aba <_printf_i+0x10e>
 8004aae:	6821      	ldr	r1, [r4, #0]
 8004ab0:	432e      	orrs	r6, r5
 8004ab2:	f021 0104 	bic.w	r1, r1, #4
 8004ab6:	6021      	str	r1, [r4, #0]
 8004ab8:	d04b      	beq.n	8004b52 <_printf_i+0x1a6>
 8004aba:	4616      	mov	r6, r2
 8004abc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ac0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ac4:	5dc7      	ldrb	r7, [r0, r7]
 8004ac6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aca:	462f      	mov	r7, r5
 8004acc:	42bb      	cmp	r3, r7
 8004ace:	460d      	mov	r5, r1
 8004ad0:	d9f4      	bls.n	8004abc <_printf_i+0x110>
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d10b      	bne.n	8004aee <_printf_i+0x142>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	07df      	lsls	r7, r3, #31
 8004ada:	d508      	bpl.n	8004aee <_printf_i+0x142>
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	6861      	ldr	r1, [r4, #4]
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	bfde      	ittt	le
 8004ae4:	2330      	movle	r3, #48	@ 0x30
 8004ae6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aee:	1b92      	subs	r2, r2, r6
 8004af0:	6122      	str	r2, [r4, #16]
 8004af2:	f8cd a000 	str.w	sl, [sp]
 8004af6:	464b      	mov	r3, r9
 8004af8:	aa03      	add	r2, sp, #12
 8004afa:	4621      	mov	r1, r4
 8004afc:	4640      	mov	r0, r8
 8004afe:	f7ff fee7 	bl	80048d0 <_printf_common>
 8004b02:	3001      	adds	r0, #1
 8004b04:	d14a      	bne.n	8004b9c <_printf_i+0x1f0>
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0a:	b004      	add	sp, #16
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	f043 0320 	orr.w	r3, r3, #32
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	4832      	ldr	r0, [pc, #200]	@ (8004be4 <_printf_i+0x238>)
 8004b1a:	2778      	movs	r7, #120	@ 0x78
 8004b1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	6831      	ldr	r1, [r6, #0]
 8004b24:	061f      	lsls	r7, r3, #24
 8004b26:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b2a:	d402      	bmi.n	8004b32 <_printf_i+0x186>
 8004b2c:	065f      	lsls	r7, r3, #25
 8004b2e:	bf48      	it	mi
 8004b30:	b2ad      	uxthmi	r5, r5
 8004b32:	6031      	str	r1, [r6, #0]
 8004b34:	07d9      	lsls	r1, r3, #31
 8004b36:	bf44      	itt	mi
 8004b38:	f043 0320 	orrmi.w	r3, r3, #32
 8004b3c:	6023      	strmi	r3, [r4, #0]
 8004b3e:	b11d      	cbz	r5, 8004b48 <_printf_i+0x19c>
 8004b40:	2310      	movs	r3, #16
 8004b42:	e7ad      	b.n	8004aa0 <_printf_i+0xf4>
 8004b44:	4826      	ldr	r0, [pc, #152]	@ (8004be0 <_printf_i+0x234>)
 8004b46:	e7e9      	b.n	8004b1c <_printf_i+0x170>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	f023 0320 	bic.w	r3, r3, #32
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	e7f6      	b.n	8004b40 <_printf_i+0x194>
 8004b52:	4616      	mov	r6, r2
 8004b54:	e7bd      	b.n	8004ad2 <_printf_i+0x126>
 8004b56:	6833      	ldr	r3, [r6, #0]
 8004b58:	6825      	ldr	r5, [r4, #0]
 8004b5a:	6961      	ldr	r1, [r4, #20]
 8004b5c:	1d18      	adds	r0, r3, #4
 8004b5e:	6030      	str	r0, [r6, #0]
 8004b60:	062e      	lsls	r6, r5, #24
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	d501      	bpl.n	8004b6a <_printf_i+0x1be>
 8004b66:	6019      	str	r1, [r3, #0]
 8004b68:	e002      	b.n	8004b70 <_printf_i+0x1c4>
 8004b6a:	0668      	lsls	r0, r5, #25
 8004b6c:	d5fb      	bpl.n	8004b66 <_printf_i+0x1ba>
 8004b6e:	8019      	strh	r1, [r3, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	4616      	mov	r6, r2
 8004b76:	e7bc      	b.n	8004af2 <_printf_i+0x146>
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	6032      	str	r2, [r6, #0]
 8004b7e:	681e      	ldr	r6, [r3, #0]
 8004b80:	6862      	ldr	r2, [r4, #4]
 8004b82:	2100      	movs	r1, #0
 8004b84:	4630      	mov	r0, r6
 8004b86:	f7fb fb2b 	bl	80001e0 <memchr>
 8004b8a:	b108      	cbz	r0, 8004b90 <_printf_i+0x1e4>
 8004b8c:	1b80      	subs	r0, r0, r6
 8004b8e:	6060      	str	r0, [r4, #4]
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	2300      	movs	r3, #0
 8004b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b9a:	e7aa      	b.n	8004af2 <_printf_i+0x146>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	47d0      	blx	sl
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d0ad      	beq.n	8004b06 <_printf_i+0x15a>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	079b      	lsls	r3, r3, #30
 8004bae:	d413      	bmi.n	8004bd8 <_printf_i+0x22c>
 8004bb0:	68e0      	ldr	r0, [r4, #12]
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4618      	movlt	r0, r3
 8004bba:	e7a6      	b.n	8004b0a <_printf_i+0x15e>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	47d0      	blx	sl
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d09d      	beq.n	8004b06 <_printf_i+0x15a>
 8004bca:	3501      	adds	r5, #1
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	9903      	ldr	r1, [sp, #12]
 8004bd0:	1a5b      	subs	r3, r3, r1
 8004bd2:	42ab      	cmp	r3, r5
 8004bd4:	dcf2      	bgt.n	8004bbc <_printf_i+0x210>
 8004bd6:	e7eb      	b.n	8004bb0 <_printf_i+0x204>
 8004bd8:	2500      	movs	r5, #0
 8004bda:	f104 0619 	add.w	r6, r4, #25
 8004bde:	e7f5      	b.n	8004bcc <_printf_i+0x220>
 8004be0:	08008a8a 	.word	0x08008a8a
 8004be4:	08008a9b 	.word	0x08008a9b

08004be8 <_scanf_float>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	b087      	sub	sp, #28
 8004bee:	4691      	mov	r9, r2
 8004bf0:	9303      	str	r3, [sp, #12]
 8004bf2:	688b      	ldr	r3, [r1, #8]
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004bfa:	bf81      	itttt	hi
 8004bfc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004c00:	eb03 0b05 	addhi.w	fp, r3, r5
 8004c04:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004c08:	608b      	strhi	r3, [r1, #8]
 8004c0a:	680b      	ldr	r3, [r1, #0]
 8004c0c:	460a      	mov	r2, r1
 8004c0e:	f04f 0500 	mov.w	r5, #0
 8004c12:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004c16:	f842 3b1c 	str.w	r3, [r2], #28
 8004c1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c1e:	4680      	mov	r8, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	bf98      	it	ls
 8004c24:	f04f 0b00 	movls.w	fp, #0
 8004c28:	9201      	str	r2, [sp, #4]
 8004c2a:	4616      	mov	r6, r2
 8004c2c:	46aa      	mov	sl, r5
 8004c2e:	462f      	mov	r7, r5
 8004c30:	9502      	str	r5, [sp, #8]
 8004c32:	68a2      	ldr	r2, [r4, #8]
 8004c34:	b15a      	cbz	r2, 8004c4e <_scanf_float+0x66>
 8004c36:	f8d9 3000 	ldr.w	r3, [r9]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004c3e:	d863      	bhi.n	8004d08 <_scanf_float+0x120>
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d83b      	bhi.n	8004cbc <_scanf_float+0xd4>
 8004c44:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004c48:	b2c8      	uxtb	r0, r1
 8004c4a:	280e      	cmp	r0, #14
 8004c4c:	d939      	bls.n	8004cc2 <_scanf_float+0xda>
 8004c4e:	b11f      	cbz	r7, 8004c58 <_scanf_float+0x70>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c56:	6023      	str	r3, [r4, #0]
 8004c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c5c:	f1ba 0f01 	cmp.w	sl, #1
 8004c60:	f200 8114 	bhi.w	8004e8c <_scanf_float+0x2a4>
 8004c64:	9b01      	ldr	r3, [sp, #4]
 8004c66:	429e      	cmp	r6, r3
 8004c68:	f200 8105 	bhi.w	8004e76 <_scanf_float+0x28e>
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	b007      	add	sp, #28
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c74:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004c78:	2a0d      	cmp	r2, #13
 8004c7a:	d8e8      	bhi.n	8004c4e <_scanf_float+0x66>
 8004c7c:	a101      	add	r1, pc, #4	@ (adr r1, 8004c84 <_scanf_float+0x9c>)
 8004c7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004dcd 	.word	0x08004dcd
 8004c88:	08004c4f 	.word	0x08004c4f
 8004c8c:	08004c4f 	.word	0x08004c4f
 8004c90:	08004c4f 	.word	0x08004c4f
 8004c94:	08004e29 	.word	0x08004e29
 8004c98:	08004e03 	.word	0x08004e03
 8004c9c:	08004c4f 	.word	0x08004c4f
 8004ca0:	08004c4f 	.word	0x08004c4f
 8004ca4:	08004ddb 	.word	0x08004ddb
 8004ca8:	08004c4f 	.word	0x08004c4f
 8004cac:	08004c4f 	.word	0x08004c4f
 8004cb0:	08004c4f 	.word	0x08004c4f
 8004cb4:	08004c4f 	.word	0x08004c4f
 8004cb8:	08004d97 	.word	0x08004d97
 8004cbc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004cc0:	e7da      	b.n	8004c78 <_scanf_float+0x90>
 8004cc2:	290e      	cmp	r1, #14
 8004cc4:	d8c3      	bhi.n	8004c4e <_scanf_float+0x66>
 8004cc6:	a001      	add	r0, pc, #4	@ (adr r0, 8004ccc <_scanf_float+0xe4>)
 8004cc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ccc:	08004d87 	.word	0x08004d87
 8004cd0:	08004c4f 	.word	0x08004c4f
 8004cd4:	08004d87 	.word	0x08004d87
 8004cd8:	08004e17 	.word	0x08004e17
 8004cdc:	08004c4f 	.word	0x08004c4f
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004d6d 	.word	0x08004d6d
 8004cf0:	08004d6d 	.word	0x08004d6d
 8004cf4:	08004d6d 	.word	0x08004d6d
 8004cf8:	08004d6d 	.word	0x08004d6d
 8004cfc:	08004d6d 	.word	0x08004d6d
 8004d00:	08004d6d 	.word	0x08004d6d
 8004d04:	08004d6d 	.word	0x08004d6d
 8004d08:	2b6e      	cmp	r3, #110	@ 0x6e
 8004d0a:	d809      	bhi.n	8004d20 <_scanf_float+0x138>
 8004d0c:	2b60      	cmp	r3, #96	@ 0x60
 8004d0e:	d8b1      	bhi.n	8004c74 <_scanf_float+0x8c>
 8004d10:	2b54      	cmp	r3, #84	@ 0x54
 8004d12:	d07b      	beq.n	8004e0c <_scanf_float+0x224>
 8004d14:	2b59      	cmp	r3, #89	@ 0x59
 8004d16:	d19a      	bne.n	8004c4e <_scanf_float+0x66>
 8004d18:	2d07      	cmp	r5, #7
 8004d1a:	d198      	bne.n	8004c4e <_scanf_float+0x66>
 8004d1c:	2508      	movs	r5, #8
 8004d1e:	e02f      	b.n	8004d80 <_scanf_float+0x198>
 8004d20:	2b74      	cmp	r3, #116	@ 0x74
 8004d22:	d073      	beq.n	8004e0c <_scanf_float+0x224>
 8004d24:	2b79      	cmp	r3, #121	@ 0x79
 8004d26:	e7f6      	b.n	8004d16 <_scanf_float+0x12e>
 8004d28:	6821      	ldr	r1, [r4, #0]
 8004d2a:	05c8      	lsls	r0, r1, #23
 8004d2c:	d51e      	bpl.n	8004d6c <_scanf_float+0x184>
 8004d2e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004d32:	6021      	str	r1, [r4, #0]
 8004d34:	3701      	adds	r7, #1
 8004d36:	f1bb 0f00 	cmp.w	fp, #0
 8004d3a:	d003      	beq.n	8004d44 <_scanf_float+0x15c>
 8004d3c:	3201      	adds	r2, #1
 8004d3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d42:	60a2      	str	r2, [r4, #8]
 8004d44:	68a3      	ldr	r3, [r4, #8]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f8c9 3004 	str.w	r3, [r9, #4]
 8004d5c:	f340 8082 	ble.w	8004e64 <_scanf_float+0x27c>
 8004d60:	f8d9 3000 	ldr.w	r3, [r9]
 8004d64:	3301      	adds	r3, #1
 8004d66:	f8c9 3000 	str.w	r3, [r9]
 8004d6a:	e762      	b.n	8004c32 <_scanf_float+0x4a>
 8004d6c:	eb1a 0105 	adds.w	r1, sl, r5
 8004d70:	f47f af6d 	bne.w	8004c4e <_scanf_float+0x66>
 8004d74:	6822      	ldr	r2, [r4, #0]
 8004d76:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004d7a:	6022      	str	r2, [r4, #0]
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	468a      	mov	sl, r1
 8004d80:	f806 3b01 	strb.w	r3, [r6], #1
 8004d84:	e7de      	b.n	8004d44 <_scanf_float+0x15c>
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	0610      	lsls	r0, r2, #24
 8004d8a:	f57f af60 	bpl.w	8004c4e <_scanf_float+0x66>
 8004d8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	e7f4      	b.n	8004d80 <_scanf_float+0x198>
 8004d96:	f1ba 0f00 	cmp.w	sl, #0
 8004d9a:	d10c      	bne.n	8004db6 <_scanf_float+0x1ce>
 8004d9c:	b977      	cbnz	r7, 8004dbc <_scanf_float+0x1d4>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004da4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004da8:	d108      	bne.n	8004dbc <_scanf_float+0x1d4>
 8004daa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004dae:	6022      	str	r2, [r4, #0]
 8004db0:	f04f 0a01 	mov.w	sl, #1
 8004db4:	e7e4      	b.n	8004d80 <_scanf_float+0x198>
 8004db6:	f1ba 0f02 	cmp.w	sl, #2
 8004dba:	d050      	beq.n	8004e5e <_scanf_float+0x276>
 8004dbc:	2d01      	cmp	r5, #1
 8004dbe:	d002      	beq.n	8004dc6 <_scanf_float+0x1de>
 8004dc0:	2d04      	cmp	r5, #4
 8004dc2:	f47f af44 	bne.w	8004c4e <_scanf_float+0x66>
 8004dc6:	3501      	adds	r5, #1
 8004dc8:	b2ed      	uxtb	r5, r5
 8004dca:	e7d9      	b.n	8004d80 <_scanf_float+0x198>
 8004dcc:	f1ba 0f01 	cmp.w	sl, #1
 8004dd0:	f47f af3d 	bne.w	8004c4e <_scanf_float+0x66>
 8004dd4:	f04f 0a02 	mov.w	sl, #2
 8004dd8:	e7d2      	b.n	8004d80 <_scanf_float+0x198>
 8004dda:	b975      	cbnz	r5, 8004dfa <_scanf_float+0x212>
 8004ddc:	2f00      	cmp	r7, #0
 8004dde:	f47f af37 	bne.w	8004c50 <_scanf_float+0x68>
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004de8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004dec:	f040 8103 	bne.w	8004ff6 <_scanf_float+0x40e>
 8004df0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	2501      	movs	r5, #1
 8004df8:	e7c2      	b.n	8004d80 <_scanf_float+0x198>
 8004dfa:	2d03      	cmp	r5, #3
 8004dfc:	d0e3      	beq.n	8004dc6 <_scanf_float+0x1de>
 8004dfe:	2d05      	cmp	r5, #5
 8004e00:	e7df      	b.n	8004dc2 <_scanf_float+0x1da>
 8004e02:	2d02      	cmp	r5, #2
 8004e04:	f47f af23 	bne.w	8004c4e <_scanf_float+0x66>
 8004e08:	2503      	movs	r5, #3
 8004e0a:	e7b9      	b.n	8004d80 <_scanf_float+0x198>
 8004e0c:	2d06      	cmp	r5, #6
 8004e0e:	f47f af1e 	bne.w	8004c4e <_scanf_float+0x66>
 8004e12:	2507      	movs	r5, #7
 8004e14:	e7b4      	b.n	8004d80 <_scanf_float+0x198>
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	0591      	lsls	r1, r2, #22
 8004e1a:	f57f af18 	bpl.w	8004c4e <_scanf_float+0x66>
 8004e1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	9702      	str	r7, [sp, #8]
 8004e26:	e7ab      	b.n	8004d80 <_scanf_float+0x198>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004e2e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004e32:	d005      	beq.n	8004e40 <_scanf_float+0x258>
 8004e34:	0550      	lsls	r0, r2, #21
 8004e36:	f57f af0a 	bpl.w	8004c4e <_scanf_float+0x66>
 8004e3a:	2f00      	cmp	r7, #0
 8004e3c:	f000 80db 	beq.w	8004ff6 <_scanf_float+0x40e>
 8004e40:	0591      	lsls	r1, r2, #22
 8004e42:	bf58      	it	pl
 8004e44:	9902      	ldrpl	r1, [sp, #8]
 8004e46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e4a:	bf58      	it	pl
 8004e4c:	1a79      	subpl	r1, r7, r1
 8004e4e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004e52:	bf58      	it	pl
 8004e54:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	2700      	movs	r7, #0
 8004e5c:	e790      	b.n	8004d80 <_scanf_float+0x198>
 8004e5e:	f04f 0a03 	mov.w	sl, #3
 8004e62:	e78d      	b.n	8004d80 <_scanf_float+0x198>
 8004e64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	4798      	blx	r3
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	f43f aedf 	beq.w	8004c32 <_scanf_float+0x4a>
 8004e74:	e6eb      	b.n	8004c4e <_scanf_float+0x66>
 8004e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e7e:	464a      	mov	r2, r9
 8004e80:	4640      	mov	r0, r8
 8004e82:	4798      	blx	r3
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	e6eb      	b.n	8004c64 <_scanf_float+0x7c>
 8004e8c:	1e6b      	subs	r3, r5, #1
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d824      	bhi.n	8004edc <_scanf_float+0x2f4>
 8004e92:	2d02      	cmp	r5, #2
 8004e94:	d836      	bhi.n	8004f04 <_scanf_float+0x31c>
 8004e96:	9b01      	ldr	r3, [sp, #4]
 8004e98:	429e      	cmp	r6, r3
 8004e9a:	f67f aee7 	bls.w	8004c6c <_scanf_float+0x84>
 8004e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ea6:	464a      	mov	r2, r9
 8004ea8:	4640      	mov	r0, r8
 8004eaa:	4798      	blx	r3
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6123      	str	r3, [r4, #16]
 8004eb2:	e7f0      	b.n	8004e96 <_scanf_float+0x2ae>
 8004eb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004eb8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004ebc:	464a      	mov	r2, r9
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4798      	blx	r3
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ecc:	fa5f fa8a 	uxtb.w	sl, sl
 8004ed0:	f1ba 0f02 	cmp.w	sl, #2
 8004ed4:	d1ee      	bne.n	8004eb4 <_scanf_float+0x2cc>
 8004ed6:	3d03      	subs	r5, #3
 8004ed8:	b2ed      	uxtb	r5, r5
 8004eda:	1b76      	subs	r6, r6, r5
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	05da      	lsls	r2, r3, #23
 8004ee0:	d530      	bpl.n	8004f44 <_scanf_float+0x35c>
 8004ee2:	055b      	lsls	r3, r3, #21
 8004ee4:	d511      	bpl.n	8004f0a <_scanf_float+0x322>
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	429e      	cmp	r6, r3
 8004eea:	f67f aebf 	bls.w	8004c6c <_scanf_float+0x84>
 8004eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ef2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ef6:	464a      	mov	r2, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4798      	blx	r3
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	e7f0      	b.n	8004ee6 <_scanf_float+0x2fe>
 8004f04:	46aa      	mov	sl, r5
 8004f06:	46b3      	mov	fp, r6
 8004f08:	e7de      	b.n	8004ec8 <_scanf_float+0x2e0>
 8004f0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	2965      	cmp	r1, #101	@ 0x65
 8004f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f16:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	d00c      	beq.n	8004f38 <_scanf_float+0x350>
 8004f1e:	2945      	cmp	r1, #69	@ 0x45
 8004f20:	d00a      	beq.n	8004f38 <_scanf_float+0x350>
 8004f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f26:	464a      	mov	r2, r9
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4798      	blx	r3
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	1eb5      	subs	r5, r6, #2
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f3c:	464a      	mov	r2, r9
 8004f3e:	4640      	mov	r0, r8
 8004f40:	4798      	blx	r3
 8004f42:	462e      	mov	r6, r5
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	f012 0210 	ands.w	r2, r2, #16
 8004f4a:	d001      	beq.n	8004f50 <_scanf_float+0x368>
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e68e      	b.n	8004c6e <_scanf_float+0x86>
 8004f50:	7032      	strb	r2, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5c:	d125      	bne.n	8004faa <_scanf_float+0x3c2>
 8004f5e:	9b02      	ldr	r3, [sp, #8]
 8004f60:	429f      	cmp	r7, r3
 8004f62:	d00a      	beq.n	8004f7a <_scanf_float+0x392>
 8004f64:	1bda      	subs	r2, r3, r7
 8004f66:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	bf28      	it	cs
 8004f6e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004f72:	4922      	ldr	r1, [pc, #136]	@ (8004ffc <_scanf_float+0x414>)
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 f907 	bl	8005188 <siprintf>
 8004f7a:	9901      	ldr	r1, [sp, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4640      	mov	r0, r8
 8004f80:	f002 fc1e 	bl	80077c0 <_strtod_r>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f011 0f02 	tst.w	r1, #2
 8004f8e:	ec57 6b10 	vmov	r6, r7, d0
 8004f92:	f103 0204 	add.w	r2, r3, #4
 8004f96:	d015      	beq.n	8004fc4 <_scanf_float+0x3dc>
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	600a      	str	r2, [r1, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	e9c3 6700 	strd	r6, r7, [r3]
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60e3      	str	r3, [r4, #12]
 8004fa8:	e7d0      	b.n	8004f4c <_scanf_float+0x364>
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0e4      	beq.n	8004f7a <_scanf_float+0x392>
 8004fb0:	9905      	ldr	r1, [sp, #20]
 8004fb2:	230a      	movs	r3, #10
 8004fb4:	3101      	adds	r1, #1
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	f002 fc82 	bl	80078c0 <_strtol_r>
 8004fbc:	9b04      	ldr	r3, [sp, #16]
 8004fbe:	9e05      	ldr	r6, [sp, #20]
 8004fc0:	1ac2      	subs	r2, r0, r3
 8004fc2:	e7d0      	b.n	8004f66 <_scanf_float+0x37e>
 8004fc4:	f011 0f04 	tst.w	r1, #4
 8004fc8:	9903      	ldr	r1, [sp, #12]
 8004fca:	600a      	str	r2, [r1, #0]
 8004fcc:	d1e6      	bne.n	8004f9c <_scanf_float+0x3b4>
 8004fce:	681d      	ldr	r5, [r3, #0]
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	f7fb fdb0 	bl	8000b3c <__aeabi_dcmpun>
 8004fdc:	b128      	cbz	r0, 8004fea <_scanf_float+0x402>
 8004fde:	4808      	ldr	r0, [pc, #32]	@ (8005000 <_scanf_float+0x418>)
 8004fe0:	f000 f9e4 	bl	80053ac <nanf>
 8004fe4:	ed85 0a00 	vstr	s0, [r5]
 8004fe8:	e7db      	b.n	8004fa2 <_scanf_float+0x3ba>
 8004fea:	4630      	mov	r0, r6
 8004fec:	4639      	mov	r1, r7
 8004fee:	f7fb fe03 	bl	8000bf8 <__aeabi_d2f>
 8004ff2:	6028      	str	r0, [r5, #0]
 8004ff4:	e7d5      	b.n	8004fa2 <_scanf_float+0x3ba>
 8004ff6:	2700      	movs	r7, #0
 8004ff8:	e62e      	b.n	8004c58 <_scanf_float+0x70>
 8004ffa:	bf00      	nop
 8004ffc:	08008aac 	.word	0x08008aac
 8005000:	08008bed 	.word	0x08008bed

08005004 <std>:
 8005004:	2300      	movs	r3, #0
 8005006:	b510      	push	{r4, lr}
 8005008:	4604      	mov	r4, r0
 800500a:	e9c0 3300 	strd	r3, r3, [r0]
 800500e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005012:	6083      	str	r3, [r0, #8]
 8005014:	8181      	strh	r1, [r0, #12]
 8005016:	6643      	str	r3, [r0, #100]	@ 0x64
 8005018:	81c2      	strh	r2, [r0, #14]
 800501a:	6183      	str	r3, [r0, #24]
 800501c:	4619      	mov	r1, r3
 800501e:	2208      	movs	r2, #8
 8005020:	305c      	adds	r0, #92	@ 0x5c
 8005022:	f000 f930 	bl	8005286 <memset>
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x58>)
 8005028:	6263      	str	r3, [r4, #36]	@ 0x24
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x5c>)
 800502c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <std+0x60>)
 8005030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <std+0x64>)
 8005034:	6323      	str	r3, [r4, #48]	@ 0x30
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <std+0x68>)
 8005038:	6224      	str	r4, [r4, #32]
 800503a:	429c      	cmp	r4, r3
 800503c:	d006      	beq.n	800504c <std+0x48>
 800503e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005042:	4294      	cmp	r4, r2
 8005044:	d002      	beq.n	800504c <std+0x48>
 8005046:	33d0      	adds	r3, #208	@ 0xd0
 8005048:	429c      	cmp	r4, r3
 800504a:	d105      	bne.n	8005058 <std+0x54>
 800504c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005054:	f000 b9a6 	b.w	80053a4 <__retarget_lock_init_recursive>
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop
 800505c:	080051cd 	.word	0x080051cd
 8005060:	080051ef 	.word	0x080051ef
 8005064:	08005227 	.word	0x08005227
 8005068:	0800524b 	.word	0x0800524b
 800506c:	20000380 	.word	0x20000380

08005070 <stdio_exit_handler>:
 8005070:	4a02      	ldr	r2, [pc, #8]	@ (800507c <stdio_exit_handler+0xc>)
 8005072:	4903      	ldr	r1, [pc, #12]	@ (8005080 <stdio_exit_handler+0x10>)
 8005074:	4803      	ldr	r0, [pc, #12]	@ (8005084 <stdio_exit_handler+0x14>)
 8005076:	f000 b869 	b.w	800514c <_fwalk_sglue>
 800507a:	bf00      	nop
 800507c:	20000024 	.word	0x20000024
 8005080:	08007c7d 	.word	0x08007c7d
 8005084:	20000034 	.word	0x20000034

08005088 <cleanup_stdio>:
 8005088:	6841      	ldr	r1, [r0, #4]
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <cleanup_stdio+0x34>)
 800508c:	4299      	cmp	r1, r3
 800508e:	b510      	push	{r4, lr}
 8005090:	4604      	mov	r4, r0
 8005092:	d001      	beq.n	8005098 <cleanup_stdio+0x10>
 8005094:	f002 fdf2 	bl	8007c7c <_fflush_r>
 8005098:	68a1      	ldr	r1, [r4, #8]
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <cleanup_stdio+0x38>)
 800509c:	4299      	cmp	r1, r3
 800509e:	d002      	beq.n	80050a6 <cleanup_stdio+0x1e>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f002 fdeb 	bl	8007c7c <_fflush_r>
 80050a6:	68e1      	ldr	r1, [r4, #12]
 80050a8:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <cleanup_stdio+0x3c>)
 80050aa:	4299      	cmp	r1, r3
 80050ac:	d004      	beq.n	80050b8 <cleanup_stdio+0x30>
 80050ae:	4620      	mov	r0, r4
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	f002 bde2 	b.w	8007c7c <_fflush_r>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	bf00      	nop
 80050bc:	20000380 	.word	0x20000380
 80050c0:	200003e8 	.word	0x200003e8
 80050c4:	20000450 	.word	0x20000450

080050c8 <global_stdio_init.part.0>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <global_stdio_init.part.0+0x30>)
 80050cc:	4c0b      	ldr	r4, [pc, #44]	@ (80050fc <global_stdio_init.part.0+0x34>)
 80050ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005100 <global_stdio_init.part.0+0x38>)
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	4620      	mov	r0, r4
 80050d4:	2200      	movs	r2, #0
 80050d6:	2104      	movs	r1, #4
 80050d8:	f7ff ff94 	bl	8005004 <std>
 80050dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050e0:	2201      	movs	r2, #1
 80050e2:	2109      	movs	r1, #9
 80050e4:	f7ff ff8e 	bl	8005004 <std>
 80050e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050ec:	2202      	movs	r2, #2
 80050ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f2:	2112      	movs	r1, #18
 80050f4:	f7ff bf86 	b.w	8005004 <std>
 80050f8:	200004b8 	.word	0x200004b8
 80050fc:	20000380 	.word	0x20000380
 8005100:	08005071 	.word	0x08005071

08005104 <__sfp_lock_acquire>:
 8005104:	4801      	ldr	r0, [pc, #4]	@ (800510c <__sfp_lock_acquire+0x8>)
 8005106:	f000 b94e 	b.w	80053a6 <__retarget_lock_acquire_recursive>
 800510a:	bf00      	nop
 800510c:	200004c1 	.word	0x200004c1

08005110 <__sfp_lock_release>:
 8005110:	4801      	ldr	r0, [pc, #4]	@ (8005118 <__sfp_lock_release+0x8>)
 8005112:	f000 b949 	b.w	80053a8 <__retarget_lock_release_recursive>
 8005116:	bf00      	nop
 8005118:	200004c1 	.word	0x200004c1

0800511c <__sinit>:
 800511c:	b510      	push	{r4, lr}
 800511e:	4604      	mov	r4, r0
 8005120:	f7ff fff0 	bl	8005104 <__sfp_lock_acquire>
 8005124:	6a23      	ldr	r3, [r4, #32]
 8005126:	b11b      	cbz	r3, 8005130 <__sinit+0x14>
 8005128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512c:	f7ff bff0 	b.w	8005110 <__sfp_lock_release>
 8005130:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <__sinit+0x28>)
 8005132:	6223      	str	r3, [r4, #32]
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <__sinit+0x2c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f5      	bne.n	8005128 <__sinit+0xc>
 800513c:	f7ff ffc4 	bl	80050c8 <global_stdio_init.part.0>
 8005140:	e7f2      	b.n	8005128 <__sinit+0xc>
 8005142:	bf00      	nop
 8005144:	08005089 	.word	0x08005089
 8005148:	200004b8 	.word	0x200004b8

0800514c <_fwalk_sglue>:
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	4607      	mov	r7, r0
 8005152:	4688      	mov	r8, r1
 8005154:	4614      	mov	r4, r2
 8005156:	2600      	movs	r6, #0
 8005158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800515c:	f1b9 0901 	subs.w	r9, r9, #1
 8005160:	d505      	bpl.n	800516e <_fwalk_sglue+0x22>
 8005162:	6824      	ldr	r4, [r4, #0]
 8005164:	2c00      	cmp	r4, #0
 8005166:	d1f7      	bne.n	8005158 <_fwalk_sglue+0xc>
 8005168:	4630      	mov	r0, r6
 800516a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d907      	bls.n	8005184 <_fwalk_sglue+0x38>
 8005174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005178:	3301      	adds	r3, #1
 800517a:	d003      	beq.n	8005184 <_fwalk_sglue+0x38>
 800517c:	4629      	mov	r1, r5
 800517e:	4638      	mov	r0, r7
 8005180:	47c0      	blx	r8
 8005182:	4306      	orrs	r6, r0
 8005184:	3568      	adds	r5, #104	@ 0x68
 8005186:	e7e9      	b.n	800515c <_fwalk_sglue+0x10>

08005188 <siprintf>:
 8005188:	b40e      	push	{r1, r2, r3}
 800518a:	b510      	push	{r4, lr}
 800518c:	b09d      	sub	sp, #116	@ 0x74
 800518e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005190:	9002      	str	r0, [sp, #8]
 8005192:	9006      	str	r0, [sp, #24]
 8005194:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005198:	480a      	ldr	r0, [pc, #40]	@ (80051c4 <siprintf+0x3c>)
 800519a:	9107      	str	r1, [sp, #28]
 800519c:	9104      	str	r1, [sp, #16]
 800519e:	490a      	ldr	r1, [pc, #40]	@ (80051c8 <siprintf+0x40>)
 80051a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a4:	9105      	str	r1, [sp, #20]
 80051a6:	2400      	movs	r4, #0
 80051a8:	a902      	add	r1, sp, #8
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80051b0:	f002 fbe4 	bl	800797c <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	701c      	strb	r4, [r3, #0]
 80051b8:	b01d      	add	sp, #116	@ 0x74
 80051ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051be:	b003      	add	sp, #12
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000030 	.word	0x20000030
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <__sread>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	460c      	mov	r4, r1
 80051d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d4:	f000 f898 	bl	8005308 <_read_r>
 80051d8:	2800      	cmp	r0, #0
 80051da:	bfab      	itete	ge
 80051dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051de:	89a3      	ldrhlt	r3, [r4, #12]
 80051e0:	181b      	addge	r3, r3, r0
 80051e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051e6:	bfac      	ite	ge
 80051e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051ea:	81a3      	strhlt	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__swrite>:
 80051ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	461f      	mov	r7, r3
 80051f4:	898b      	ldrh	r3, [r1, #12]
 80051f6:	05db      	lsls	r3, r3, #23
 80051f8:	4605      	mov	r5, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	4616      	mov	r6, r2
 80051fe:	d505      	bpl.n	800520c <__swrite+0x1e>
 8005200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005204:	2302      	movs	r3, #2
 8005206:	2200      	movs	r2, #0
 8005208:	f000 f86c 	bl	80052e4 <_lseek_r>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	4632      	mov	r2, r6
 800521a:	463b      	mov	r3, r7
 800521c:	4628      	mov	r0, r5
 800521e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005222:	f000 b883 	b.w	800532c <_write_r>

08005226 <__sseek>:
 8005226:	b510      	push	{r4, lr}
 8005228:	460c      	mov	r4, r1
 800522a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522e:	f000 f859 	bl	80052e4 <_lseek_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	bf15      	itete	ne
 8005238:	6560      	strne	r0, [r4, #84]	@ 0x54
 800523a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800523e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005242:	81a3      	strheq	r3, [r4, #12]
 8005244:	bf18      	it	ne
 8005246:	81a3      	strhne	r3, [r4, #12]
 8005248:	bd10      	pop	{r4, pc}

0800524a <__sclose>:
 800524a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524e:	f000 b839 	b.w	80052c4 <_close_r>

08005252 <memmove>:
 8005252:	4288      	cmp	r0, r1
 8005254:	b510      	push	{r4, lr}
 8005256:	eb01 0402 	add.w	r4, r1, r2
 800525a:	d902      	bls.n	8005262 <memmove+0x10>
 800525c:	4284      	cmp	r4, r0
 800525e:	4623      	mov	r3, r4
 8005260:	d807      	bhi.n	8005272 <memmove+0x20>
 8005262:	1e43      	subs	r3, r0, #1
 8005264:	42a1      	cmp	r1, r4
 8005266:	d008      	beq.n	800527a <memmove+0x28>
 8005268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800526c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005270:	e7f8      	b.n	8005264 <memmove+0x12>
 8005272:	4402      	add	r2, r0
 8005274:	4601      	mov	r1, r0
 8005276:	428a      	cmp	r2, r1
 8005278:	d100      	bne.n	800527c <memmove+0x2a>
 800527a:	bd10      	pop	{r4, pc}
 800527c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005280:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005284:	e7f7      	b.n	8005276 <memmove+0x24>

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>

08005296 <strncpy>:
 8005296:	b510      	push	{r4, lr}
 8005298:	3901      	subs	r1, #1
 800529a:	4603      	mov	r3, r0
 800529c:	b132      	cbz	r2, 80052ac <strncpy+0x16>
 800529e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80052a2:	f803 4b01 	strb.w	r4, [r3], #1
 80052a6:	3a01      	subs	r2, #1
 80052a8:	2c00      	cmp	r4, #0
 80052aa:	d1f7      	bne.n	800529c <strncpy+0x6>
 80052ac:	441a      	add	r2, r3
 80052ae:	2100      	movs	r1, #0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <strncpy+0x20>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <strncpy+0x1a>

080052bc <_localeconv_r>:
 80052bc:	4800      	ldr	r0, [pc, #0]	@ (80052c0 <_localeconv_r+0x4>)
 80052be:	4770      	bx	lr
 80052c0:	20000170 	.word	0x20000170

080052c4 <_close_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	@ (80052e0 <_close_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fc fe41 	bl	8001f56 <_close>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_close_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_close_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	200004bc 	.word	0x200004bc

080052e4 <_lseek_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	@ (8005304 <_lseek_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fc fe56 	bl	8001fa4 <_lseek>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_lseek_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_lseek_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	200004bc 	.word	0x200004bc

08005308 <_read_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	@ (8005328 <_read_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fc fde4 	bl	8001ee4 <_read>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_read_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_read_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	200004bc 	.word	0x200004bc

0800532c <_write_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d07      	ldr	r5, [pc, #28]	@ (800534c <_write_r+0x20>)
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fc fdef 	bl	8001f1e <_write>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_write_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_write_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	200004bc 	.word	0x200004bc

08005350 <__errno>:
 8005350:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <__errno+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000030 	.word	0x20000030

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	@ (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	@ (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	@ (80053a0 <__libc_init_array+0x44>)
 8005370:	f003 fb5c 	bl	8008a2c <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08008eac 	.word	0x08008eac
 8005398:	08008eac 	.word	0x08008eac
 800539c:	08008eac 	.word	0x08008eac
 80053a0:	08008eb0 	.word	0x08008eb0

080053a4 <__retarget_lock_init_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_acquire_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <__retarget_lock_release_recursive>:
 80053a8:	4770      	bx	lr
	...

080053ac <nanf>:
 80053ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80053b4 <nanf+0x8>
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	7fc00000 	.word	0x7fc00000

080053b8 <quorem>:
 80053b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	6903      	ldr	r3, [r0, #16]
 80053be:	690c      	ldr	r4, [r1, #16]
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	4607      	mov	r7, r0
 80053c4:	db7e      	blt.n	80054c4 <quorem+0x10c>
 80053c6:	3c01      	subs	r4, #1
 80053c8:	f101 0814 	add.w	r8, r1, #20
 80053cc:	00a3      	lsls	r3, r4, #2
 80053ce:	f100 0514 	add.w	r5, r0, #20
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053e2:	3301      	adds	r3, #1
 80053e4:	429a      	cmp	r2, r3
 80053e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80053ee:	d32e      	bcc.n	800544e <quorem+0x96>
 80053f0:	f04f 0a00 	mov.w	sl, #0
 80053f4:	46c4      	mov	ip, r8
 80053f6:	46ae      	mov	lr, r5
 80053f8:	46d3      	mov	fp, sl
 80053fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80053fe:	b298      	uxth	r0, r3
 8005400:	fb06 a000 	mla	r0, r6, r0, sl
 8005404:	0c02      	lsrs	r2, r0, #16
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	fb06 2303 	mla	r3, r6, r3, r2
 800540c:	f8de 2000 	ldr.w	r2, [lr]
 8005410:	b280      	uxth	r0, r0
 8005412:	b292      	uxth	r2, r2
 8005414:	1a12      	subs	r2, r2, r0
 8005416:	445a      	add	r2, fp
 8005418:	f8de 0000 	ldr.w	r0, [lr]
 800541c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005420:	b29b      	uxth	r3, r3
 8005422:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005426:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800542a:	b292      	uxth	r2, r2
 800542c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005430:	45e1      	cmp	r9, ip
 8005432:	f84e 2b04 	str.w	r2, [lr], #4
 8005436:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800543a:	d2de      	bcs.n	80053fa <quorem+0x42>
 800543c:	9b00      	ldr	r3, [sp, #0]
 800543e:	58eb      	ldr	r3, [r5, r3]
 8005440:	b92b      	cbnz	r3, 800544e <quorem+0x96>
 8005442:	9b01      	ldr	r3, [sp, #4]
 8005444:	3b04      	subs	r3, #4
 8005446:	429d      	cmp	r5, r3
 8005448:	461a      	mov	r2, r3
 800544a:	d32f      	bcc.n	80054ac <quorem+0xf4>
 800544c:	613c      	str	r4, [r7, #16]
 800544e:	4638      	mov	r0, r7
 8005450:	f001 f9c6 	bl	80067e0 <__mcmp>
 8005454:	2800      	cmp	r0, #0
 8005456:	db25      	blt.n	80054a4 <quorem+0xec>
 8005458:	4629      	mov	r1, r5
 800545a:	2000      	movs	r0, #0
 800545c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005460:	f8d1 c000 	ldr.w	ip, [r1]
 8005464:	fa1f fe82 	uxth.w	lr, r2
 8005468:	fa1f f38c 	uxth.w	r3, ip
 800546c:	eba3 030e 	sub.w	r3, r3, lr
 8005470:	4403      	add	r3, r0
 8005472:	0c12      	lsrs	r2, r2, #16
 8005474:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005478:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800547c:	b29b      	uxth	r3, r3
 800547e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005482:	45c1      	cmp	r9, r8
 8005484:	f841 3b04 	str.w	r3, [r1], #4
 8005488:	ea4f 4022 	mov.w	r0, r2, asr #16
 800548c:	d2e6      	bcs.n	800545c <quorem+0xa4>
 800548e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005496:	b922      	cbnz	r2, 80054a2 <quorem+0xea>
 8005498:	3b04      	subs	r3, #4
 800549a:	429d      	cmp	r5, r3
 800549c:	461a      	mov	r2, r3
 800549e:	d30b      	bcc.n	80054b8 <quorem+0x100>
 80054a0:	613c      	str	r4, [r7, #16]
 80054a2:	3601      	adds	r6, #1
 80054a4:	4630      	mov	r0, r6
 80054a6:	b003      	add	sp, #12
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	3b04      	subs	r3, #4
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	d1cb      	bne.n	800544c <quorem+0x94>
 80054b4:	3c01      	subs	r4, #1
 80054b6:	e7c6      	b.n	8005446 <quorem+0x8e>
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	3b04      	subs	r3, #4
 80054bc:	2a00      	cmp	r2, #0
 80054be:	d1ef      	bne.n	80054a0 <quorem+0xe8>
 80054c0:	3c01      	subs	r4, #1
 80054c2:	e7ea      	b.n	800549a <quorem+0xe2>
 80054c4:	2000      	movs	r0, #0
 80054c6:	e7ee      	b.n	80054a6 <quorem+0xee>

080054c8 <_dtoa_r>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	69c7      	ldr	r7, [r0, #28]
 80054ce:	b097      	sub	sp, #92	@ 0x5c
 80054d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80054d4:	ec55 4b10 	vmov	r4, r5, d0
 80054d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	4681      	mov	r9, r0
 80054de:	920c      	str	r2, [sp, #48]	@ 0x30
 80054e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80054e2:	b97f      	cbnz	r7, 8005504 <_dtoa_r+0x3c>
 80054e4:	2010      	movs	r0, #16
 80054e6:	f000 fe09 	bl	80060fc <malloc>
 80054ea:	4602      	mov	r2, r0
 80054ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80054f0:	b920      	cbnz	r0, 80054fc <_dtoa_r+0x34>
 80054f2:	4ba9      	ldr	r3, [pc, #676]	@ (8005798 <_dtoa_r+0x2d0>)
 80054f4:	21ef      	movs	r1, #239	@ 0xef
 80054f6:	48a9      	ldr	r0, [pc, #676]	@ (800579c <_dtoa_r+0x2d4>)
 80054f8:	f002 fc22 	bl	8007d40 <__assert_func>
 80054fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005500:	6007      	str	r7, [r0, #0]
 8005502:	60c7      	str	r7, [r0, #12]
 8005504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	b159      	cbz	r1, 8005524 <_dtoa_r+0x5c>
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	604a      	str	r2, [r1, #4]
 8005510:	2301      	movs	r3, #1
 8005512:	4093      	lsls	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
 8005516:	4648      	mov	r0, r9
 8005518:	f000 fee6 	bl	80062e8 <_Bfree>
 800551c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	1e2b      	subs	r3, r5, #0
 8005526:	bfb9      	ittee	lt
 8005528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800552c:	9305      	strlt	r3, [sp, #20]
 800552e:	2300      	movge	r3, #0
 8005530:	6033      	strge	r3, [r6, #0]
 8005532:	9f05      	ldr	r7, [sp, #20]
 8005534:	4b9a      	ldr	r3, [pc, #616]	@ (80057a0 <_dtoa_r+0x2d8>)
 8005536:	bfbc      	itt	lt
 8005538:	2201      	movlt	r2, #1
 800553a:	6032      	strlt	r2, [r6, #0]
 800553c:	43bb      	bics	r3, r7
 800553e:	d112      	bne.n	8005566 <_dtoa_r+0x9e>
 8005540:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005542:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800554c:	4323      	orrs	r3, r4
 800554e:	f000 855a 	beq.w	8006006 <_dtoa_r+0xb3e>
 8005552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005554:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80057b4 <_dtoa_r+0x2ec>
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 855c 	beq.w	8006016 <_dtoa_r+0xb4e>
 800555e:	f10a 0303 	add.w	r3, sl, #3
 8005562:	f000 bd56 	b.w	8006012 <_dtoa_r+0xb4a>
 8005566:	ed9d 7b04 	vldr	d7, [sp, #16]
 800556a:	2200      	movs	r2, #0
 800556c:	ec51 0b17 	vmov	r0, r1, d7
 8005570:	2300      	movs	r3, #0
 8005572:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005576:	f7fb faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800557a:	4680      	mov	r8, r0
 800557c:	b158      	cbz	r0, 8005596 <_dtoa_r+0xce>
 800557e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005580:	2301      	movs	r3, #1
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005586:	b113      	cbz	r3, 800558e <_dtoa_r+0xc6>
 8005588:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800558a:	4b86      	ldr	r3, [pc, #536]	@ (80057a4 <_dtoa_r+0x2dc>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80057b8 <_dtoa_r+0x2f0>
 8005592:	f000 bd40 	b.w	8006016 <_dtoa_r+0xb4e>
 8005596:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800559a:	aa14      	add	r2, sp, #80	@ 0x50
 800559c:	a915      	add	r1, sp, #84	@ 0x54
 800559e:	4648      	mov	r0, r9
 80055a0:	f001 fa3e 	bl	8006a20 <__d2b>
 80055a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80055a8:	9002      	str	r0, [sp, #8]
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	d078      	beq.n	80056a0 <_dtoa_r+0x1d8>
 80055ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80055b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80055c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80055c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80055c8:	4619      	mov	r1, r3
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b76      	ldr	r3, [pc, #472]	@ (80057a8 <_dtoa_r+0x2e0>)
 80055ce:	f7fa fe63 	bl	8000298 <__aeabi_dsub>
 80055d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005780 <_dtoa_r+0x2b8>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fb f816 	bl	8000608 <__aeabi_dmul>
 80055dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8005788 <_dtoa_r+0x2c0>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fe5b 	bl	800029c <__adddf3>
 80055e6:	4604      	mov	r4, r0
 80055e8:	4630      	mov	r0, r6
 80055ea:	460d      	mov	r5, r1
 80055ec:	f7fa ffa2 	bl	8000534 <__aeabi_i2d>
 80055f0:	a367      	add	r3, pc, #412	@ (adr r3, 8005790 <_dtoa_r+0x2c8>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fb f807 	bl	8000608 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fa fe4b 	bl	800029c <__adddf3>
 8005606:	4604      	mov	r4, r0
 8005608:	460d      	mov	r5, r1
 800560a:	f7fb faad 	bl	8000b68 <__aeabi_d2iz>
 800560e:	2200      	movs	r2, #0
 8005610:	4607      	mov	r7, r0
 8005612:	2300      	movs	r3, #0
 8005614:	4620      	mov	r0, r4
 8005616:	4629      	mov	r1, r5
 8005618:	f7fb fa68 	bl	8000aec <__aeabi_dcmplt>
 800561c:	b140      	cbz	r0, 8005630 <_dtoa_r+0x168>
 800561e:	4638      	mov	r0, r7
 8005620:	f7fa ff88 	bl	8000534 <__aeabi_i2d>
 8005624:	4622      	mov	r2, r4
 8005626:	462b      	mov	r3, r5
 8005628:	f7fb fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800562c:	b900      	cbnz	r0, 8005630 <_dtoa_r+0x168>
 800562e:	3f01      	subs	r7, #1
 8005630:	2f16      	cmp	r7, #22
 8005632:	d852      	bhi.n	80056da <_dtoa_r+0x212>
 8005634:	4b5d      	ldr	r3, [pc, #372]	@ (80057ac <_dtoa_r+0x2e4>)
 8005636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005642:	f7fb fa53 	bl	8000aec <__aeabi_dcmplt>
 8005646:	2800      	cmp	r0, #0
 8005648:	d049      	beq.n	80056de <_dtoa_r+0x216>
 800564a:	3f01      	subs	r7, #1
 800564c:	2300      	movs	r3, #0
 800564e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005650:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005652:	1b9b      	subs	r3, r3, r6
 8005654:	1e5a      	subs	r2, r3, #1
 8005656:	bf45      	ittet	mi
 8005658:	f1c3 0301 	rsbmi	r3, r3, #1
 800565c:	9300      	strmi	r3, [sp, #0]
 800565e:	2300      	movpl	r3, #0
 8005660:	2300      	movmi	r3, #0
 8005662:	9206      	str	r2, [sp, #24]
 8005664:	bf54      	ite	pl
 8005666:	9300      	strpl	r3, [sp, #0]
 8005668:	9306      	strmi	r3, [sp, #24]
 800566a:	2f00      	cmp	r7, #0
 800566c:	db39      	blt.n	80056e2 <_dtoa_r+0x21a>
 800566e:	9b06      	ldr	r3, [sp, #24]
 8005670:	970d      	str	r7, [sp, #52]	@ 0x34
 8005672:	443b      	add	r3, r7
 8005674:	9306      	str	r3, [sp, #24]
 8005676:	2300      	movs	r3, #0
 8005678:	9308      	str	r3, [sp, #32]
 800567a:	9b07      	ldr	r3, [sp, #28]
 800567c:	2b09      	cmp	r3, #9
 800567e:	d863      	bhi.n	8005748 <_dtoa_r+0x280>
 8005680:	2b05      	cmp	r3, #5
 8005682:	bfc4      	itt	gt
 8005684:	3b04      	subgt	r3, #4
 8005686:	9307      	strgt	r3, [sp, #28]
 8005688:	9b07      	ldr	r3, [sp, #28]
 800568a:	f1a3 0302 	sub.w	r3, r3, #2
 800568e:	bfcc      	ite	gt
 8005690:	2400      	movgt	r4, #0
 8005692:	2401      	movle	r4, #1
 8005694:	2b03      	cmp	r3, #3
 8005696:	d863      	bhi.n	8005760 <_dtoa_r+0x298>
 8005698:	e8df f003 	tbb	[pc, r3]
 800569c:	2b375452 	.word	0x2b375452
 80056a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80056a4:	441e      	add	r6, r3
 80056a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	bfc1      	itttt	gt
 80056ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80056b2:	409f      	lslgt	r7, r3
 80056b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80056b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80056bc:	bfd6      	itet	le
 80056be:	f1c3 0320 	rsble	r3, r3, #32
 80056c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80056c6:	fa04 f003 	lslle.w	r0, r4, r3
 80056ca:	f7fa ff23 	bl	8000514 <__aeabi_ui2d>
 80056ce:	2201      	movs	r2, #1
 80056d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80056d4:	3e01      	subs	r6, #1
 80056d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80056d8:	e776      	b.n	80055c8 <_dtoa_r+0x100>
 80056da:	2301      	movs	r3, #1
 80056dc:	e7b7      	b.n	800564e <_dtoa_r+0x186>
 80056de:	9010      	str	r0, [sp, #64]	@ 0x40
 80056e0:	e7b6      	b.n	8005650 <_dtoa_r+0x188>
 80056e2:	9b00      	ldr	r3, [sp, #0]
 80056e4:	1bdb      	subs	r3, r3, r7
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	427b      	negs	r3, r7
 80056ea:	9308      	str	r3, [sp, #32]
 80056ec:	2300      	movs	r3, #0
 80056ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80056f0:	e7c3      	b.n	800567a <_dtoa_r+0x1b2>
 80056f2:	2301      	movs	r3, #1
 80056f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056f8:	eb07 0b03 	add.w	fp, r7, r3
 80056fc:	f10b 0301 	add.w	r3, fp, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	bfb8      	it	lt
 8005706:	2301      	movlt	r3, #1
 8005708:	e006      	b.n	8005718 <_dtoa_r+0x250>
 800570a:	2301      	movs	r3, #1
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
 800570e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005710:	2b00      	cmp	r3, #0
 8005712:	dd28      	ble.n	8005766 <_dtoa_r+0x29e>
 8005714:	469b      	mov	fp, r3
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800571c:	2100      	movs	r1, #0
 800571e:	2204      	movs	r2, #4
 8005720:	f102 0514 	add.w	r5, r2, #20
 8005724:	429d      	cmp	r5, r3
 8005726:	d926      	bls.n	8005776 <_dtoa_r+0x2ae>
 8005728:	6041      	str	r1, [r0, #4]
 800572a:	4648      	mov	r0, r9
 800572c:	f000 fd9c 	bl	8006268 <_Balloc>
 8005730:	4682      	mov	sl, r0
 8005732:	2800      	cmp	r0, #0
 8005734:	d142      	bne.n	80057bc <_dtoa_r+0x2f4>
 8005736:	4b1e      	ldr	r3, [pc, #120]	@ (80057b0 <_dtoa_r+0x2e8>)
 8005738:	4602      	mov	r2, r0
 800573a:	f240 11af 	movw	r1, #431	@ 0x1af
 800573e:	e6da      	b.n	80054f6 <_dtoa_r+0x2e>
 8005740:	2300      	movs	r3, #0
 8005742:	e7e3      	b.n	800570c <_dtoa_r+0x244>
 8005744:	2300      	movs	r3, #0
 8005746:	e7d5      	b.n	80056f4 <_dtoa_r+0x22c>
 8005748:	2401      	movs	r4, #1
 800574a:	2300      	movs	r3, #0
 800574c:	9307      	str	r3, [sp, #28]
 800574e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005750:	f04f 3bff 	mov.w	fp, #4294967295
 8005754:	2200      	movs	r2, #0
 8005756:	f8cd b00c 	str.w	fp, [sp, #12]
 800575a:	2312      	movs	r3, #18
 800575c:	920c      	str	r2, [sp, #48]	@ 0x30
 800575e:	e7db      	b.n	8005718 <_dtoa_r+0x250>
 8005760:	2301      	movs	r3, #1
 8005762:	9309      	str	r3, [sp, #36]	@ 0x24
 8005764:	e7f4      	b.n	8005750 <_dtoa_r+0x288>
 8005766:	f04f 0b01 	mov.w	fp, #1
 800576a:	f8cd b00c 	str.w	fp, [sp, #12]
 800576e:	465b      	mov	r3, fp
 8005770:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005774:	e7d0      	b.n	8005718 <_dtoa_r+0x250>
 8005776:	3101      	adds	r1, #1
 8005778:	0052      	lsls	r2, r2, #1
 800577a:	e7d1      	b.n	8005720 <_dtoa_r+0x258>
 800577c:	f3af 8000 	nop.w
 8005780:	636f4361 	.word	0x636f4361
 8005784:	3fd287a7 	.word	0x3fd287a7
 8005788:	8b60c8b3 	.word	0x8b60c8b3
 800578c:	3fc68a28 	.word	0x3fc68a28
 8005790:	509f79fb 	.word	0x509f79fb
 8005794:	3fd34413 	.word	0x3fd34413
 8005798:	08008abe 	.word	0x08008abe
 800579c:	08008ad5 	.word	0x08008ad5
 80057a0:	7ff00000 	.word	0x7ff00000
 80057a4:	08008a89 	.word	0x08008a89
 80057a8:	3ff80000 	.word	0x3ff80000
 80057ac:	08008c88 	.word	0x08008c88
 80057b0:	08008b2d 	.word	0x08008b2d
 80057b4:	08008aba 	.word	0x08008aba
 80057b8:	08008a88 	.word	0x08008a88
 80057bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057c0:	6018      	str	r0, [r3, #0]
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	2b0e      	cmp	r3, #14
 80057c6:	f200 80a1 	bhi.w	800590c <_dtoa_r+0x444>
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	f000 809e 	beq.w	800590c <_dtoa_r+0x444>
 80057d0:	2f00      	cmp	r7, #0
 80057d2:	dd33      	ble.n	800583c <_dtoa_r+0x374>
 80057d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005a48 <_dtoa_r+0x580>)
 80057d6:	f007 020f 	and.w	r2, r7, #15
 80057da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057de:	ed93 7b00 	vldr	d7, [r3]
 80057e2:	05f8      	lsls	r0, r7, #23
 80057e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80057e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80057ec:	d516      	bpl.n	800581c <_dtoa_r+0x354>
 80057ee:	4b97      	ldr	r3, [pc, #604]	@ (8005a4c <_dtoa_r+0x584>)
 80057f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057f8:	f7fb f830 	bl	800085c <__aeabi_ddiv>
 80057fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005800:	f004 040f 	and.w	r4, r4, #15
 8005804:	2603      	movs	r6, #3
 8005806:	4d91      	ldr	r5, [pc, #580]	@ (8005a4c <_dtoa_r+0x584>)
 8005808:	b954      	cbnz	r4, 8005820 <_dtoa_r+0x358>
 800580a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800580e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005812:	f7fb f823 	bl	800085c <__aeabi_ddiv>
 8005816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800581a:	e028      	b.n	800586e <_dtoa_r+0x3a6>
 800581c:	2602      	movs	r6, #2
 800581e:	e7f2      	b.n	8005806 <_dtoa_r+0x33e>
 8005820:	07e1      	lsls	r1, r4, #31
 8005822:	d508      	bpl.n	8005836 <_dtoa_r+0x36e>
 8005824:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005828:	e9d5 2300 	ldrd	r2, r3, [r5]
 800582c:	f7fa feec 	bl	8000608 <__aeabi_dmul>
 8005830:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005834:	3601      	adds	r6, #1
 8005836:	1064      	asrs	r4, r4, #1
 8005838:	3508      	adds	r5, #8
 800583a:	e7e5      	b.n	8005808 <_dtoa_r+0x340>
 800583c:	f000 80af 	beq.w	800599e <_dtoa_r+0x4d6>
 8005840:	427c      	negs	r4, r7
 8005842:	4b81      	ldr	r3, [pc, #516]	@ (8005a48 <_dtoa_r+0x580>)
 8005844:	4d81      	ldr	r5, [pc, #516]	@ (8005a4c <_dtoa_r+0x584>)
 8005846:	f004 020f 	and.w	r2, r4, #15
 800584a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005856:	f7fa fed7 	bl	8000608 <__aeabi_dmul>
 800585a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800585e:	1124      	asrs	r4, r4, #4
 8005860:	2300      	movs	r3, #0
 8005862:	2602      	movs	r6, #2
 8005864:	2c00      	cmp	r4, #0
 8005866:	f040 808f 	bne.w	8005988 <_dtoa_r+0x4c0>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1d3      	bne.n	8005816 <_dtoa_r+0x34e>
 800586e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005870:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8094 	beq.w	80059a2 <_dtoa_r+0x4da>
 800587a:	4b75      	ldr	r3, [pc, #468]	@ (8005a50 <_dtoa_r+0x588>)
 800587c:	2200      	movs	r2, #0
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fb f933 	bl	8000aec <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	f000 808b 	beq.w	80059a2 <_dtoa_r+0x4da>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8087 	beq.w	80059a2 <_dtoa_r+0x4da>
 8005894:	f1bb 0f00 	cmp.w	fp, #0
 8005898:	dd34      	ble.n	8005904 <_dtoa_r+0x43c>
 800589a:	4620      	mov	r0, r4
 800589c:	4b6d      	ldr	r3, [pc, #436]	@ (8005a54 <_dtoa_r+0x58c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fa feb1 	bl	8000608 <__aeabi_dmul>
 80058a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80058ae:	3601      	adds	r6, #1
 80058b0:	465c      	mov	r4, fp
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7fa fe3e 	bl	8000534 <__aeabi_i2d>
 80058b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058bc:	f7fa fea4 	bl	8000608 <__aeabi_dmul>
 80058c0:	4b65      	ldr	r3, [pc, #404]	@ (8005a58 <_dtoa_r+0x590>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f7fa fcea 	bl	800029c <__adddf3>
 80058c8:	4605      	mov	r5, r0
 80058ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80058ce:	2c00      	cmp	r4, #0
 80058d0:	d16a      	bne.n	80059a8 <_dtoa_r+0x4e0>
 80058d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d6:	4b61      	ldr	r3, [pc, #388]	@ (8005a5c <_dtoa_r+0x594>)
 80058d8:	2200      	movs	r2, #0
 80058da:	f7fa fcdd 	bl	8000298 <__aeabi_dsub>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058e6:	462a      	mov	r2, r5
 80058e8:	4633      	mov	r3, r6
 80058ea:	f7fb f91d 	bl	8000b28 <__aeabi_dcmpgt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f040 8298 	bne.w	8005e24 <_dtoa_r+0x95c>
 80058f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058f8:	462a      	mov	r2, r5
 80058fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80058fe:	f7fb f8f5 	bl	8000aec <__aeabi_dcmplt>
 8005902:	bb38      	cbnz	r0, 8005954 <_dtoa_r+0x48c>
 8005904:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005908:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800590c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800590e:	2b00      	cmp	r3, #0
 8005910:	f2c0 8157 	blt.w	8005bc2 <_dtoa_r+0x6fa>
 8005914:	2f0e      	cmp	r7, #14
 8005916:	f300 8154 	bgt.w	8005bc2 <_dtoa_r+0x6fa>
 800591a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a48 <_dtoa_r+0x580>)
 800591c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005920:	ed93 7b00 	vldr	d7, [r3]
 8005924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005926:	2b00      	cmp	r3, #0
 8005928:	ed8d 7b00 	vstr	d7, [sp]
 800592c:	f280 80e5 	bge.w	8005afa <_dtoa_r+0x632>
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f300 80e1 	bgt.w	8005afa <_dtoa_r+0x632>
 8005938:	d10c      	bne.n	8005954 <_dtoa_r+0x48c>
 800593a:	4b48      	ldr	r3, [pc, #288]	@ (8005a5c <_dtoa_r+0x594>)
 800593c:	2200      	movs	r2, #0
 800593e:	ec51 0b17 	vmov	r0, r1, d7
 8005942:	f7fa fe61 	bl	8000608 <__aeabi_dmul>
 8005946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594a:	f7fb f8e3 	bl	8000b14 <__aeabi_dcmpge>
 800594e:	2800      	cmp	r0, #0
 8005950:	f000 8266 	beq.w	8005e20 <_dtoa_r+0x958>
 8005954:	2400      	movs	r4, #0
 8005956:	4625      	mov	r5, r4
 8005958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800595a:	4656      	mov	r6, sl
 800595c:	ea6f 0803 	mvn.w	r8, r3
 8005960:	2700      	movs	r7, #0
 8005962:	4621      	mov	r1, r4
 8005964:	4648      	mov	r0, r9
 8005966:	f000 fcbf 	bl	80062e8 <_Bfree>
 800596a:	2d00      	cmp	r5, #0
 800596c:	f000 80bd 	beq.w	8005aea <_dtoa_r+0x622>
 8005970:	b12f      	cbz	r7, 800597e <_dtoa_r+0x4b6>
 8005972:	42af      	cmp	r7, r5
 8005974:	d003      	beq.n	800597e <_dtoa_r+0x4b6>
 8005976:	4639      	mov	r1, r7
 8005978:	4648      	mov	r0, r9
 800597a:	f000 fcb5 	bl	80062e8 <_Bfree>
 800597e:	4629      	mov	r1, r5
 8005980:	4648      	mov	r0, r9
 8005982:	f000 fcb1 	bl	80062e8 <_Bfree>
 8005986:	e0b0      	b.n	8005aea <_dtoa_r+0x622>
 8005988:	07e2      	lsls	r2, r4, #31
 800598a:	d505      	bpl.n	8005998 <_dtoa_r+0x4d0>
 800598c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005990:	f7fa fe3a 	bl	8000608 <__aeabi_dmul>
 8005994:	3601      	adds	r6, #1
 8005996:	2301      	movs	r3, #1
 8005998:	1064      	asrs	r4, r4, #1
 800599a:	3508      	adds	r5, #8
 800599c:	e762      	b.n	8005864 <_dtoa_r+0x39c>
 800599e:	2602      	movs	r6, #2
 80059a0:	e765      	b.n	800586e <_dtoa_r+0x3a6>
 80059a2:	9c03      	ldr	r4, [sp, #12]
 80059a4:	46b8      	mov	r8, r7
 80059a6:	e784      	b.n	80058b2 <_dtoa_r+0x3ea>
 80059a8:	4b27      	ldr	r3, [pc, #156]	@ (8005a48 <_dtoa_r+0x580>)
 80059aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059b4:	4454      	add	r4, sl
 80059b6:	2900      	cmp	r1, #0
 80059b8:	d054      	beq.n	8005a64 <_dtoa_r+0x59c>
 80059ba:	4929      	ldr	r1, [pc, #164]	@ (8005a60 <_dtoa_r+0x598>)
 80059bc:	2000      	movs	r0, #0
 80059be:	f7fa ff4d 	bl	800085c <__aeabi_ddiv>
 80059c2:	4633      	mov	r3, r6
 80059c4:	462a      	mov	r2, r5
 80059c6:	f7fa fc67 	bl	8000298 <__aeabi_dsub>
 80059ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059ce:	4656      	mov	r6, sl
 80059d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d4:	f7fb f8c8 	bl	8000b68 <__aeabi_d2iz>
 80059d8:	4605      	mov	r5, r0
 80059da:	f7fa fdab 	bl	8000534 <__aeabi_i2d>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e6:	f7fa fc57 	bl	8000298 <__aeabi_dsub>
 80059ea:	3530      	adds	r5, #48	@ 0x30
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059f4:	f806 5b01 	strb.w	r5, [r6], #1
 80059f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059fc:	f7fb f876 	bl	8000aec <__aeabi_dcmplt>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d172      	bne.n	8005aea <_dtoa_r+0x622>
 8005a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a08:	4911      	ldr	r1, [pc, #68]	@ (8005a50 <_dtoa_r+0x588>)
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fa fc44 	bl	8000298 <__aeabi_dsub>
 8005a10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a14:	f7fb f86a 	bl	8000aec <__aeabi_dcmplt>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f040 80b4 	bne.w	8005b86 <_dtoa_r+0x6be>
 8005a1e:	42a6      	cmp	r6, r4
 8005a20:	f43f af70 	beq.w	8005904 <_dtoa_r+0x43c>
 8005a24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a28:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <_dtoa_r+0x58c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <_dtoa_r+0x58c>)
 8005a32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a36:	2200      	movs	r2, #0
 8005a38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a3c:	f7fa fde4 	bl	8000608 <__aeabi_dmul>
 8005a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a44:	e7c4      	b.n	80059d0 <_dtoa_r+0x508>
 8005a46:	bf00      	nop
 8005a48:	08008c88 	.word	0x08008c88
 8005a4c:	08008c60 	.word	0x08008c60
 8005a50:	3ff00000 	.word	0x3ff00000
 8005a54:	40240000 	.word	0x40240000
 8005a58:	401c0000 	.word	0x401c0000
 8005a5c:	40140000 	.word	0x40140000
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7fa fdce 	bl	8000608 <__aeabi_dmul>
 8005a6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a72:	4656      	mov	r6, sl
 8005a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a78:	f7fb f876 	bl	8000b68 <__aeabi_d2iz>
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	f7fa fd59 	bl	8000534 <__aeabi_i2d>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a8a:	f7fa fc05 	bl	8000298 <__aeabi_dsub>
 8005a8e:	3530      	adds	r5, #48	@ 0x30
 8005a90:	f806 5b01 	strb.w	r5, [r6], #1
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	d124      	bne.n	8005aee <_dtoa_r+0x626>
 8005aa4:	4baf      	ldr	r3, [pc, #700]	@ (8005d64 <_dtoa_r+0x89c>)
 8005aa6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005aaa:	f7fa fbf7 	bl	800029c <__adddf3>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab6:	f7fb f837 	bl	8000b28 <__aeabi_dcmpgt>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d163      	bne.n	8005b86 <_dtoa_r+0x6be>
 8005abe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005ac2:	49a8      	ldr	r1, [pc, #672]	@ (8005d64 <_dtoa_r+0x89c>)
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fa fbe7 	bl	8000298 <__aeabi_dsub>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ad2:	f7fb f80b 	bl	8000aec <__aeabi_dcmplt>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f43f af14 	beq.w	8005904 <_dtoa_r+0x43c>
 8005adc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005ade:	1e73      	subs	r3, r6, #1
 8005ae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ae2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ae6:	2b30      	cmp	r3, #48	@ 0x30
 8005ae8:	d0f8      	beq.n	8005adc <_dtoa_r+0x614>
 8005aea:	4647      	mov	r7, r8
 8005aec:	e03b      	b.n	8005b66 <_dtoa_r+0x69e>
 8005aee:	4b9e      	ldr	r3, [pc, #632]	@ (8005d68 <_dtoa_r+0x8a0>)
 8005af0:	f7fa fd8a 	bl	8000608 <__aeabi_dmul>
 8005af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af8:	e7bc      	b.n	8005a74 <_dtoa_r+0x5ac>
 8005afa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005afe:	4656      	mov	r6, sl
 8005b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fea8 	bl	800085c <__aeabi_ddiv>
 8005b0c:	f7fb f82c 	bl	8000b68 <__aeabi_d2iz>
 8005b10:	4680      	mov	r8, r0
 8005b12:	f7fa fd0f 	bl	8000534 <__aeabi_i2d>
 8005b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1a:	f7fa fd75 	bl	8000608 <__aeabi_dmul>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b2a:	f7fa fbb5 	bl	8000298 <__aeabi_dsub>
 8005b2e:	f806 4b01 	strb.w	r4, [r6], #1
 8005b32:	9d03      	ldr	r5, [sp, #12]
 8005b34:	eba6 040a 	sub.w	r4, r6, sl
 8005b38:	42a5      	cmp	r5, r4
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	d133      	bne.n	8005ba8 <_dtoa_r+0x6e0>
 8005b40:	f7fa fbac 	bl	800029c <__adddf3>
 8005b44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	f7fa ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8005b50:	b9c0      	cbnz	r0, 8005b84 <_dtoa_r+0x6bc>
 8005b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5e:	b110      	cbz	r0, 8005b66 <_dtoa_r+0x69e>
 8005b60:	f018 0f01 	tst.w	r8, #1
 8005b64:	d10e      	bne.n	8005b84 <_dtoa_r+0x6bc>
 8005b66:	9902      	ldr	r1, [sp, #8]
 8005b68:	4648      	mov	r0, r9
 8005b6a:	f000 fbbd 	bl	80062e8 <_Bfree>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	7033      	strb	r3, [r6, #0]
 8005b72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b74:	3701      	adds	r7, #1
 8005b76:	601f      	str	r7, [r3, #0]
 8005b78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 824b 	beq.w	8006016 <_dtoa_r+0xb4e>
 8005b80:	601e      	str	r6, [r3, #0]
 8005b82:	e248      	b.n	8006016 <_dtoa_r+0xb4e>
 8005b84:	46b8      	mov	r8, r7
 8005b86:	4633      	mov	r3, r6
 8005b88:	461e      	mov	r6, r3
 8005b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b8e:	2a39      	cmp	r2, #57	@ 0x39
 8005b90:	d106      	bne.n	8005ba0 <_dtoa_r+0x6d8>
 8005b92:	459a      	cmp	sl, r3
 8005b94:	d1f8      	bne.n	8005b88 <_dtoa_r+0x6c0>
 8005b96:	2230      	movs	r2, #48	@ 0x30
 8005b98:	f108 0801 	add.w	r8, r8, #1
 8005b9c:	f88a 2000 	strb.w	r2, [sl]
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	3201      	adds	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e7a0      	b.n	8005aea <_dtoa_r+0x622>
 8005ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8005d68 <_dtoa_r+0x8a0>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	f7fa fd2c 	bl	8000608 <__aeabi_dmul>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	f7fa ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d09f      	beq.n	8005b00 <_dtoa_r+0x638>
 8005bc0:	e7d1      	b.n	8005b66 <_dtoa_r+0x69e>
 8005bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	f000 80ea 	beq.w	8005d9e <_dtoa_r+0x8d6>
 8005bca:	9a07      	ldr	r2, [sp, #28]
 8005bcc:	2a01      	cmp	r2, #1
 8005bce:	f300 80cd 	bgt.w	8005d6c <_dtoa_r+0x8a4>
 8005bd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	f000 80c1 	beq.w	8005d5c <_dtoa_r+0x894>
 8005bda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005bde:	9c08      	ldr	r4, [sp, #32]
 8005be0:	9e00      	ldr	r6, [sp, #0]
 8005be2:	9a00      	ldr	r2, [sp, #0]
 8005be4:	441a      	add	r2, r3
 8005be6:	9200      	str	r2, [sp, #0]
 8005be8:	9a06      	ldr	r2, [sp, #24]
 8005bea:	2101      	movs	r1, #1
 8005bec:	441a      	add	r2, r3
 8005bee:	4648      	mov	r0, r9
 8005bf0:	9206      	str	r2, [sp, #24]
 8005bf2:	f000 fc77 	bl	80064e4 <__i2b>
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	b166      	cbz	r6, 8005c14 <_dtoa_r+0x74c>
 8005bfa:	9b06      	ldr	r3, [sp, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dd09      	ble.n	8005c14 <_dtoa_r+0x74c>
 8005c00:	42b3      	cmp	r3, r6
 8005c02:	9a00      	ldr	r2, [sp, #0]
 8005c04:	bfa8      	it	ge
 8005c06:	4633      	movge	r3, r6
 8005c08:	1ad2      	subs	r2, r2, r3
 8005c0a:	9200      	str	r2, [sp, #0]
 8005c0c:	9a06      	ldr	r2, [sp, #24]
 8005c0e:	1af6      	subs	r6, r6, r3
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	9306      	str	r3, [sp, #24]
 8005c14:	9b08      	ldr	r3, [sp, #32]
 8005c16:	b30b      	cbz	r3, 8005c5c <_dtoa_r+0x794>
 8005c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80c6 	beq.w	8005dac <_dtoa_r+0x8e4>
 8005c20:	2c00      	cmp	r4, #0
 8005c22:	f000 80c0 	beq.w	8005da6 <_dtoa_r+0x8de>
 8005c26:	4629      	mov	r1, r5
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4648      	mov	r0, r9
 8005c2c:	f000 fd12 	bl	8006654 <__pow5mult>
 8005c30:	9a02      	ldr	r2, [sp, #8]
 8005c32:	4601      	mov	r1, r0
 8005c34:	4605      	mov	r5, r0
 8005c36:	4648      	mov	r0, r9
 8005c38:	f000 fc6a 	bl	8006510 <__multiply>
 8005c3c:	9902      	ldr	r1, [sp, #8]
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4648      	mov	r0, r9
 8005c42:	f000 fb51 	bl	80062e8 <_Bfree>
 8005c46:	9b08      	ldr	r3, [sp, #32]
 8005c48:	1b1b      	subs	r3, r3, r4
 8005c4a:	9308      	str	r3, [sp, #32]
 8005c4c:	f000 80b1 	beq.w	8005db2 <_dtoa_r+0x8ea>
 8005c50:	9a08      	ldr	r2, [sp, #32]
 8005c52:	4641      	mov	r1, r8
 8005c54:	4648      	mov	r0, r9
 8005c56:	f000 fcfd 	bl	8006654 <__pow5mult>
 8005c5a:	9002      	str	r0, [sp, #8]
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4648      	mov	r0, r9
 8005c60:	f000 fc40 	bl	80064e4 <__i2b>
 8005c64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c66:	4604      	mov	r4, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 81d8 	beq.w	800601e <_dtoa_r+0xb56>
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4601      	mov	r1, r0
 8005c72:	4648      	mov	r0, r9
 8005c74:	f000 fcee 	bl	8006654 <__pow5mult>
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	f300 809f 	bgt.w	8005dc0 <_dtoa_r+0x8f8>
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8097 	bne.w	8005db8 <_dtoa_r+0x8f0>
 8005c8a:	9b05      	ldr	r3, [sp, #20]
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 8093 	bne.w	8005dbc <_dtoa_r+0x8f4>
 8005c96:	9b05      	ldr	r3, [sp, #20]
 8005c98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c9c:	0d1b      	lsrs	r3, r3, #20
 8005c9e:	051b      	lsls	r3, r3, #20
 8005ca0:	b133      	cbz	r3, 8005cb0 <_dtoa_r+0x7e8>
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	9b06      	ldr	r3, [sp, #24]
 8005caa:	3301      	adds	r3, #1
 8005cac:	9306      	str	r3, [sp, #24]
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9308      	str	r3, [sp, #32]
 8005cb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 81b8 	beq.w	800602a <_dtoa_r+0xb62>
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cc0:	6918      	ldr	r0, [r3, #16]
 8005cc2:	f000 fbc3 	bl	800644c <__hi0bits>
 8005cc6:	f1c0 0020 	rsb	r0, r0, #32
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	4418      	add	r0, r3
 8005cce:	f010 001f 	ands.w	r0, r0, #31
 8005cd2:	f000 8082 	beq.w	8005dda <_dtoa_r+0x912>
 8005cd6:	f1c0 0320 	rsb	r3, r0, #32
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	dd73      	ble.n	8005dc6 <_dtoa_r+0x8fe>
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	f1c0 001c 	rsb	r0, r0, #28
 8005ce4:	4403      	add	r3, r0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	9b06      	ldr	r3, [sp, #24]
 8005cea:	4403      	add	r3, r0
 8005cec:	4406      	add	r6, r0
 8005cee:	9306      	str	r3, [sp, #24]
 8005cf0:	9b00      	ldr	r3, [sp, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	dd05      	ble.n	8005d02 <_dtoa_r+0x83a>
 8005cf6:	9902      	ldr	r1, [sp, #8]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4648      	mov	r0, r9
 8005cfc:	f000 fd04 	bl	8006708 <__lshift>
 8005d00:	9002      	str	r0, [sp, #8]
 8005d02:	9b06      	ldr	r3, [sp, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	dd05      	ble.n	8005d14 <_dtoa_r+0x84c>
 8005d08:	4621      	mov	r1, r4
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	f000 fcfb 	bl	8006708 <__lshift>
 8005d12:	4604      	mov	r4, r0
 8005d14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d061      	beq.n	8005dde <_dtoa_r+0x916>
 8005d1a:	9802      	ldr	r0, [sp, #8]
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	f000 fd5f 	bl	80067e0 <__mcmp>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	da5b      	bge.n	8005dde <_dtoa_r+0x916>
 8005d26:	2300      	movs	r3, #0
 8005d28:	9902      	ldr	r1, [sp, #8]
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	4648      	mov	r0, r9
 8005d2e:	f000 fafd 	bl	800632c <__multadd>
 8005d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d34:	9002      	str	r0, [sp, #8]
 8005d36:	f107 38ff 	add.w	r8, r7, #4294967295
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8177 	beq.w	800602e <_dtoa_r+0xb66>
 8005d40:	4629      	mov	r1, r5
 8005d42:	2300      	movs	r3, #0
 8005d44:	220a      	movs	r2, #10
 8005d46:	4648      	mov	r0, r9
 8005d48:	f000 faf0 	bl	800632c <__multadd>
 8005d4c:	f1bb 0f00 	cmp.w	fp, #0
 8005d50:	4605      	mov	r5, r0
 8005d52:	dc6f      	bgt.n	8005e34 <_dtoa_r+0x96c>
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	dc49      	bgt.n	8005dee <_dtoa_r+0x926>
 8005d5a:	e06b      	b.n	8005e34 <_dtoa_r+0x96c>
 8005d5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d62:	e73c      	b.n	8005bde <_dtoa_r+0x716>
 8005d64:	3fe00000 	.word	0x3fe00000
 8005d68:	40240000 	.word	0x40240000
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	1e5c      	subs	r4, r3, #1
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	db09      	blt.n	8005d8a <_dtoa_r+0x8c2>
 8005d76:	1b1c      	subs	r4, r3, r4
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f6bf af30 	bge.w	8005be0 <_dtoa_r+0x718>
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	9a03      	ldr	r2, [sp, #12]
 8005d84:	1a9e      	subs	r6, r3, r2
 8005d86:	2300      	movs	r3, #0
 8005d88:	e72b      	b.n	8005be2 <_dtoa_r+0x71a>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d8e:	9408      	str	r4, [sp, #32]
 8005d90:	1ae3      	subs	r3, r4, r3
 8005d92:	441a      	add	r2, r3
 8005d94:	9e00      	ldr	r6, [sp, #0]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	920d      	str	r2, [sp, #52]	@ 0x34
 8005d9a:	2400      	movs	r4, #0
 8005d9c:	e721      	b.n	8005be2 <_dtoa_r+0x71a>
 8005d9e:	9c08      	ldr	r4, [sp, #32]
 8005da0:	9e00      	ldr	r6, [sp, #0]
 8005da2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005da4:	e728      	b.n	8005bf8 <_dtoa_r+0x730>
 8005da6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005daa:	e751      	b.n	8005c50 <_dtoa_r+0x788>
 8005dac:	9a08      	ldr	r2, [sp, #32]
 8005dae:	9902      	ldr	r1, [sp, #8]
 8005db0:	e750      	b.n	8005c54 <_dtoa_r+0x78c>
 8005db2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005db6:	e751      	b.n	8005c5c <_dtoa_r+0x794>
 8005db8:	2300      	movs	r3, #0
 8005dba:	e779      	b.n	8005cb0 <_dtoa_r+0x7e8>
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	e777      	b.n	8005cb0 <_dtoa_r+0x7e8>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9308      	str	r3, [sp, #32]
 8005dc4:	e779      	b.n	8005cba <_dtoa_r+0x7f2>
 8005dc6:	d093      	beq.n	8005cf0 <_dtoa_r+0x828>
 8005dc8:	9a00      	ldr	r2, [sp, #0]
 8005dca:	331c      	adds	r3, #28
 8005dcc:	441a      	add	r2, r3
 8005dce:	9200      	str	r2, [sp, #0]
 8005dd0:	9a06      	ldr	r2, [sp, #24]
 8005dd2:	441a      	add	r2, r3
 8005dd4:	441e      	add	r6, r3
 8005dd6:	9206      	str	r2, [sp, #24]
 8005dd8:	e78a      	b.n	8005cf0 <_dtoa_r+0x828>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	e7f4      	b.n	8005dc8 <_dtoa_r+0x900>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	46b8      	mov	r8, r7
 8005de4:	dc20      	bgt.n	8005e28 <_dtoa_r+0x960>
 8005de6:	469b      	mov	fp, r3
 8005de8:	9b07      	ldr	r3, [sp, #28]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	dd1e      	ble.n	8005e2c <_dtoa_r+0x964>
 8005dee:	f1bb 0f00 	cmp.w	fp, #0
 8005df2:	f47f adb1 	bne.w	8005958 <_dtoa_r+0x490>
 8005df6:	4621      	mov	r1, r4
 8005df8:	465b      	mov	r3, fp
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	4648      	mov	r0, r9
 8005dfe:	f000 fa95 	bl	800632c <__multadd>
 8005e02:	4601      	mov	r1, r0
 8005e04:	4604      	mov	r4, r0
 8005e06:	9802      	ldr	r0, [sp, #8]
 8005e08:	f000 fcea 	bl	80067e0 <__mcmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f77f ada3 	ble.w	8005958 <_dtoa_r+0x490>
 8005e12:	4656      	mov	r6, sl
 8005e14:	2331      	movs	r3, #49	@ 0x31
 8005e16:	f806 3b01 	strb.w	r3, [r6], #1
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	e59f      	b.n	8005960 <_dtoa_r+0x498>
 8005e20:	9c03      	ldr	r4, [sp, #12]
 8005e22:	46b8      	mov	r8, r7
 8005e24:	4625      	mov	r5, r4
 8005e26:	e7f4      	b.n	8005e12 <_dtoa_r+0x94a>
 8005e28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8101 	beq.w	8006036 <_dtoa_r+0xb6e>
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	dd05      	ble.n	8005e44 <_dtoa_r+0x97c>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	f000 fc63 	bl	8006708 <__lshift>
 8005e42:	4605      	mov	r5, r0
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d05c      	beq.n	8005f04 <_dtoa_r+0xa3c>
 8005e4a:	6869      	ldr	r1, [r5, #4]
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 fa0b 	bl	8006268 <_Balloc>
 8005e52:	4606      	mov	r6, r0
 8005e54:	b928      	cbnz	r0, 8005e62 <_dtoa_r+0x99a>
 8005e56:	4b82      	ldr	r3, [pc, #520]	@ (8006060 <_dtoa_r+0xb98>)
 8005e58:	4602      	mov	r2, r0
 8005e5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e5e:	f7ff bb4a 	b.w	80054f6 <_dtoa_r+0x2e>
 8005e62:	692a      	ldr	r2, [r5, #16]
 8005e64:	3202      	adds	r2, #2
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	f105 010c 	add.w	r1, r5, #12
 8005e6c:	300c      	adds	r0, #12
 8005e6e:	f001 ff4f 	bl	8007d10 <memcpy>
 8005e72:	2201      	movs	r2, #1
 8005e74:	4631      	mov	r1, r6
 8005e76:	4648      	mov	r0, r9
 8005e78:	f000 fc46 	bl	8006708 <__lshift>
 8005e7c:	f10a 0301 	add.w	r3, sl, #1
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	eb0a 030b 	add.w	r3, sl, fp
 8005e86:	9308      	str	r3, [sp, #32]
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	462f      	mov	r7, r5
 8005e90:	9306      	str	r3, [sp, #24]
 8005e92:	4605      	mov	r5, r0
 8005e94:	9b00      	ldr	r3, [sp, #0]
 8005e96:	9802      	ldr	r0, [sp, #8]
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e9e:	f7ff fa8b 	bl	80053b8 <quorem>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	3330      	adds	r3, #48	@ 0x30
 8005ea6:	9003      	str	r0, [sp, #12]
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	9802      	ldr	r0, [sp, #8]
 8005eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eae:	f000 fc97 	bl	80067e0 <__mcmp>
 8005eb2:	462a      	mov	r2, r5
 8005eb4:	9004      	str	r0, [sp, #16]
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4648      	mov	r0, r9
 8005eba:	f000 fcad 	bl	8006818 <__mdiff>
 8005ebe:	68c2      	ldr	r2, [r0, #12]
 8005ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	bb02      	cbnz	r2, 8005f08 <_dtoa_r+0xa40>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	9802      	ldr	r0, [sp, #8]
 8005eca:	f000 fc89 	bl	80067e0 <__mcmp>
 8005ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eda:	f000 fa05 	bl	80062e8 <_Bfree>
 8005ede:	9b07      	ldr	r3, [sp, #28]
 8005ee0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ee2:	9e00      	ldr	r6, [sp, #0]
 8005ee4:	ea42 0103 	orr.w	r1, r2, r3
 8005ee8:	9b06      	ldr	r3, [sp, #24]
 8005eea:	4319      	orrs	r1, r3
 8005eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eee:	d10d      	bne.n	8005f0c <_dtoa_r+0xa44>
 8005ef0:	2b39      	cmp	r3, #57	@ 0x39
 8005ef2:	d027      	beq.n	8005f44 <_dtoa_r+0xa7c>
 8005ef4:	9a04      	ldr	r2, [sp, #16]
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	dd01      	ble.n	8005efe <_dtoa_r+0xa36>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	3331      	adds	r3, #49	@ 0x31
 8005efe:	f88b 3000 	strb.w	r3, [fp]
 8005f02:	e52e      	b.n	8005962 <_dtoa_r+0x49a>
 8005f04:	4628      	mov	r0, r5
 8005f06:	e7b9      	b.n	8005e7c <_dtoa_r+0x9b4>
 8005f08:	2201      	movs	r2, #1
 8005f0a:	e7e2      	b.n	8005ed2 <_dtoa_r+0xa0a>
 8005f0c:	9904      	ldr	r1, [sp, #16]
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	db04      	blt.n	8005f1c <_dtoa_r+0xa54>
 8005f12:	9807      	ldr	r0, [sp, #28]
 8005f14:	4301      	orrs	r1, r0
 8005f16:	9806      	ldr	r0, [sp, #24]
 8005f18:	4301      	orrs	r1, r0
 8005f1a:	d120      	bne.n	8005f5e <_dtoa_r+0xa96>
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	ddee      	ble.n	8005efe <_dtoa_r+0xa36>
 8005f20:	9902      	ldr	r1, [sp, #8]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2201      	movs	r2, #1
 8005f26:	4648      	mov	r0, r9
 8005f28:	f000 fbee 	bl	8006708 <__lshift>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	9002      	str	r0, [sp, #8]
 8005f30:	f000 fc56 	bl	80067e0 <__mcmp>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	dc02      	bgt.n	8005f40 <_dtoa_r+0xa78>
 8005f3a:	d1e0      	bne.n	8005efe <_dtoa_r+0xa36>
 8005f3c:	07da      	lsls	r2, r3, #31
 8005f3e:	d5de      	bpl.n	8005efe <_dtoa_r+0xa36>
 8005f40:	2b39      	cmp	r3, #57	@ 0x39
 8005f42:	d1da      	bne.n	8005efa <_dtoa_r+0xa32>
 8005f44:	2339      	movs	r3, #57	@ 0x39
 8005f46:	f88b 3000 	strb.w	r3, [fp]
 8005f4a:	4633      	mov	r3, r6
 8005f4c:	461e      	mov	r6, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f54:	2a39      	cmp	r2, #57	@ 0x39
 8005f56:	d04e      	beq.n	8005ff6 <_dtoa_r+0xb2e>
 8005f58:	3201      	adds	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e501      	b.n	8005962 <_dtoa_r+0x49a>
 8005f5e:	2a00      	cmp	r2, #0
 8005f60:	dd03      	ble.n	8005f6a <_dtoa_r+0xaa2>
 8005f62:	2b39      	cmp	r3, #57	@ 0x39
 8005f64:	d0ee      	beq.n	8005f44 <_dtoa_r+0xa7c>
 8005f66:	3301      	adds	r3, #1
 8005f68:	e7c9      	b.n	8005efe <_dtoa_r+0xa36>
 8005f6a:	9a00      	ldr	r2, [sp, #0]
 8005f6c:	9908      	ldr	r1, [sp, #32]
 8005f6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f72:	428a      	cmp	r2, r1
 8005f74:	d028      	beq.n	8005fc8 <_dtoa_r+0xb00>
 8005f76:	9902      	ldr	r1, [sp, #8]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	220a      	movs	r2, #10
 8005f7c:	4648      	mov	r0, r9
 8005f7e:	f000 f9d5 	bl	800632c <__multadd>
 8005f82:	42af      	cmp	r7, r5
 8005f84:	9002      	str	r0, [sp, #8]
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	f04f 020a 	mov.w	r2, #10
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4648      	mov	r0, r9
 8005f92:	d107      	bne.n	8005fa4 <_dtoa_r+0xadc>
 8005f94:	f000 f9ca 	bl	800632c <__multadd>
 8005f98:	4607      	mov	r7, r0
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	e777      	b.n	8005e94 <_dtoa_r+0x9cc>
 8005fa4:	f000 f9c2 	bl	800632c <__multadd>
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4607      	mov	r7, r0
 8005fac:	2300      	movs	r3, #0
 8005fae:	220a      	movs	r2, #10
 8005fb0:	4648      	mov	r0, r9
 8005fb2:	f000 f9bb 	bl	800632c <__multadd>
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	e7f0      	b.n	8005f9c <_dtoa_r+0xad4>
 8005fba:	f1bb 0f00 	cmp.w	fp, #0
 8005fbe:	bfcc      	ite	gt
 8005fc0:	465e      	movgt	r6, fp
 8005fc2:	2601      	movle	r6, #1
 8005fc4:	4456      	add	r6, sl
 8005fc6:	2700      	movs	r7, #0
 8005fc8:	9902      	ldr	r1, [sp, #8]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4648      	mov	r0, r9
 8005fd0:	f000 fb9a 	bl	8006708 <__lshift>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	9002      	str	r0, [sp, #8]
 8005fd8:	f000 fc02 	bl	80067e0 <__mcmp>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	dcb4      	bgt.n	8005f4a <_dtoa_r+0xa82>
 8005fe0:	d102      	bne.n	8005fe8 <_dtoa_r+0xb20>
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	07db      	lsls	r3, r3, #31
 8005fe6:	d4b0      	bmi.n	8005f4a <_dtoa_r+0xa82>
 8005fe8:	4633      	mov	r3, r6
 8005fea:	461e      	mov	r6, r3
 8005fec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff0:	2a30      	cmp	r2, #48	@ 0x30
 8005ff2:	d0fa      	beq.n	8005fea <_dtoa_r+0xb22>
 8005ff4:	e4b5      	b.n	8005962 <_dtoa_r+0x49a>
 8005ff6:	459a      	cmp	sl, r3
 8005ff8:	d1a8      	bne.n	8005f4c <_dtoa_r+0xa84>
 8005ffa:	2331      	movs	r3, #49	@ 0x31
 8005ffc:	f108 0801 	add.w	r8, r8, #1
 8006000:	f88a 3000 	strb.w	r3, [sl]
 8006004:	e4ad      	b.n	8005962 <_dtoa_r+0x49a>
 8006006:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006008:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006064 <_dtoa_r+0xb9c>
 800600c:	b11b      	cbz	r3, 8006016 <_dtoa_r+0xb4e>
 800600e:	f10a 0308 	add.w	r3, sl, #8
 8006012:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4650      	mov	r0, sl
 8006018:	b017      	add	sp, #92	@ 0x5c
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	2b01      	cmp	r3, #1
 8006022:	f77f ae2e 	ble.w	8005c82 <_dtoa_r+0x7ba>
 8006026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006028:	9308      	str	r3, [sp, #32]
 800602a:	2001      	movs	r0, #1
 800602c:	e64d      	b.n	8005cca <_dtoa_r+0x802>
 800602e:	f1bb 0f00 	cmp.w	fp, #0
 8006032:	f77f aed9 	ble.w	8005de8 <_dtoa_r+0x920>
 8006036:	4656      	mov	r6, sl
 8006038:	9802      	ldr	r0, [sp, #8]
 800603a:	4621      	mov	r1, r4
 800603c:	f7ff f9bc 	bl	80053b8 <quorem>
 8006040:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006044:	f806 3b01 	strb.w	r3, [r6], #1
 8006048:	eba6 020a 	sub.w	r2, r6, sl
 800604c:	4593      	cmp	fp, r2
 800604e:	ddb4      	ble.n	8005fba <_dtoa_r+0xaf2>
 8006050:	9902      	ldr	r1, [sp, #8]
 8006052:	2300      	movs	r3, #0
 8006054:	220a      	movs	r2, #10
 8006056:	4648      	mov	r0, r9
 8006058:	f000 f968 	bl	800632c <__multadd>
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	e7eb      	b.n	8006038 <_dtoa_r+0xb70>
 8006060:	08008b2d 	.word	0x08008b2d
 8006064:	08008ab1 	.word	0x08008ab1

08006068 <_free_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4605      	mov	r5, r0
 800606c:	2900      	cmp	r1, #0
 800606e:	d041      	beq.n	80060f4 <_free_r+0x8c>
 8006070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006074:	1f0c      	subs	r4, r1, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfb8      	it	lt
 800607a:	18e4      	addlt	r4, r4, r3
 800607c:	f000 f8e8 	bl	8006250 <__malloc_lock>
 8006080:	4a1d      	ldr	r2, [pc, #116]	@ (80060f8 <_free_r+0x90>)
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	b933      	cbnz	r3, 8006094 <_free_r+0x2c>
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	6014      	str	r4, [r2, #0]
 800608a:	4628      	mov	r0, r5
 800608c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006090:	f000 b8e4 	b.w	800625c <__malloc_unlock>
 8006094:	42a3      	cmp	r3, r4
 8006096:	d908      	bls.n	80060aa <_free_r+0x42>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	1821      	adds	r1, r4, r0
 800609c:	428b      	cmp	r3, r1
 800609e:	bf01      	itttt	eq
 80060a0:	6819      	ldreq	r1, [r3, #0]
 80060a2:	685b      	ldreq	r3, [r3, #4]
 80060a4:	1809      	addeq	r1, r1, r0
 80060a6:	6021      	streq	r1, [r4, #0]
 80060a8:	e7ed      	b.n	8006086 <_free_r+0x1e>
 80060aa:	461a      	mov	r2, r3
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	b10b      	cbz	r3, 80060b4 <_free_r+0x4c>
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d9fa      	bls.n	80060aa <_free_r+0x42>
 80060b4:	6811      	ldr	r1, [r2, #0]
 80060b6:	1850      	adds	r0, r2, r1
 80060b8:	42a0      	cmp	r0, r4
 80060ba:	d10b      	bne.n	80060d4 <_free_r+0x6c>
 80060bc:	6820      	ldr	r0, [r4, #0]
 80060be:	4401      	add	r1, r0
 80060c0:	1850      	adds	r0, r2, r1
 80060c2:	4283      	cmp	r3, r0
 80060c4:	6011      	str	r1, [r2, #0]
 80060c6:	d1e0      	bne.n	800608a <_free_r+0x22>
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	6053      	str	r3, [r2, #4]
 80060ce:	4408      	add	r0, r1
 80060d0:	6010      	str	r0, [r2, #0]
 80060d2:	e7da      	b.n	800608a <_free_r+0x22>
 80060d4:	d902      	bls.n	80060dc <_free_r+0x74>
 80060d6:	230c      	movs	r3, #12
 80060d8:	602b      	str	r3, [r5, #0]
 80060da:	e7d6      	b.n	800608a <_free_r+0x22>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	1821      	adds	r1, r4, r0
 80060e0:	428b      	cmp	r3, r1
 80060e2:	bf04      	itt	eq
 80060e4:	6819      	ldreq	r1, [r3, #0]
 80060e6:	685b      	ldreq	r3, [r3, #4]
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	bf04      	itt	eq
 80060ec:	1809      	addeq	r1, r1, r0
 80060ee:	6021      	streq	r1, [r4, #0]
 80060f0:	6054      	str	r4, [r2, #4]
 80060f2:	e7ca      	b.n	800608a <_free_r+0x22>
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
 80060f6:	bf00      	nop
 80060f8:	200004c8 	.word	0x200004c8

080060fc <malloc>:
 80060fc:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <malloc+0xc>)
 80060fe:	4601      	mov	r1, r0
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f000 b825 	b.w	8006150 <_malloc_r>
 8006106:	bf00      	nop
 8006108:	20000030 	.word	0x20000030

0800610c <sbrk_aligned>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0f      	ldr	r6, [pc, #60]	@ (800614c <sbrk_aligned+0x40>)
 8006110:	460c      	mov	r4, r1
 8006112:	6831      	ldr	r1, [r6, #0]
 8006114:	4605      	mov	r5, r0
 8006116:	b911      	cbnz	r1, 800611e <sbrk_aligned+0x12>
 8006118:	f001 fdea 	bl	8007cf0 <_sbrk_r>
 800611c:	6030      	str	r0, [r6, #0]
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f001 fde5 	bl	8007cf0 <_sbrk_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d103      	bne.n	8006132 <sbrk_aligned+0x26>
 800612a:	f04f 34ff 	mov.w	r4, #4294967295
 800612e:	4620      	mov	r0, r4
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	1cc4      	adds	r4, r0, #3
 8006134:	f024 0403 	bic.w	r4, r4, #3
 8006138:	42a0      	cmp	r0, r4
 800613a:	d0f8      	beq.n	800612e <sbrk_aligned+0x22>
 800613c:	1a21      	subs	r1, r4, r0
 800613e:	4628      	mov	r0, r5
 8006140:	f001 fdd6 	bl	8007cf0 <_sbrk_r>
 8006144:	3001      	adds	r0, #1
 8006146:	d1f2      	bne.n	800612e <sbrk_aligned+0x22>
 8006148:	e7ef      	b.n	800612a <sbrk_aligned+0x1e>
 800614a:	bf00      	nop
 800614c:	200004c4 	.word	0x200004c4

08006150 <_malloc_r>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	1ccd      	adds	r5, r1, #3
 8006156:	f025 0503 	bic.w	r5, r5, #3
 800615a:	3508      	adds	r5, #8
 800615c:	2d0c      	cmp	r5, #12
 800615e:	bf38      	it	cc
 8006160:	250c      	movcc	r5, #12
 8006162:	2d00      	cmp	r5, #0
 8006164:	4606      	mov	r6, r0
 8006166:	db01      	blt.n	800616c <_malloc_r+0x1c>
 8006168:	42a9      	cmp	r1, r5
 800616a:	d904      	bls.n	8006176 <_malloc_r+0x26>
 800616c:	230c      	movs	r3, #12
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	2000      	movs	r0, #0
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800624c <_malloc_r+0xfc>
 800617a:	f000 f869 	bl	8006250 <__malloc_lock>
 800617e:	f8d8 3000 	ldr.w	r3, [r8]
 8006182:	461c      	mov	r4, r3
 8006184:	bb44      	cbnz	r4, 80061d8 <_malloc_r+0x88>
 8006186:	4629      	mov	r1, r5
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff ffbf 	bl	800610c <sbrk_aligned>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	4604      	mov	r4, r0
 8006192:	d158      	bne.n	8006246 <_malloc_r+0xf6>
 8006194:	f8d8 4000 	ldr.w	r4, [r8]
 8006198:	4627      	mov	r7, r4
 800619a:	2f00      	cmp	r7, #0
 800619c:	d143      	bne.n	8006226 <_malloc_r+0xd6>
 800619e:	2c00      	cmp	r4, #0
 80061a0:	d04b      	beq.n	800623a <_malloc_r+0xea>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	eb04 0903 	add.w	r9, r4, r3
 80061ac:	f001 fda0 	bl	8007cf0 <_sbrk_r>
 80061b0:	4581      	cmp	r9, r0
 80061b2:	d142      	bne.n	800623a <_malloc_r+0xea>
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	1a6d      	subs	r5, r5, r1
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffa6 	bl	800610c <sbrk_aligned>
 80061c0:	3001      	adds	r0, #1
 80061c2:	d03a      	beq.n	800623a <_malloc_r+0xea>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	442b      	add	r3, r5
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	f8d8 3000 	ldr.w	r3, [r8]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	bb62      	cbnz	r2, 800622c <_malloc_r+0xdc>
 80061d2:	f8c8 7000 	str.w	r7, [r8]
 80061d6:	e00f      	b.n	80061f8 <_malloc_r+0xa8>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	1b52      	subs	r2, r2, r5
 80061dc:	d420      	bmi.n	8006220 <_malloc_r+0xd0>
 80061de:	2a0b      	cmp	r2, #11
 80061e0:	d917      	bls.n	8006212 <_malloc_r+0xc2>
 80061e2:	1961      	adds	r1, r4, r5
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	6025      	str	r5, [r4, #0]
 80061e8:	bf18      	it	ne
 80061ea:	6059      	strne	r1, [r3, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	bf08      	it	eq
 80061f0:	f8c8 1000 	streq.w	r1, [r8]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 f82f 	bl	800625c <__malloc_unlock>
 80061fe:	f104 000b 	add.w	r0, r4, #11
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	f020 0007 	bic.w	r0, r0, #7
 8006208:	1ac2      	subs	r2, r0, r3
 800620a:	bf1c      	itt	ne
 800620c:	1a1b      	subne	r3, r3, r0
 800620e:	50a3      	strne	r3, [r4, r2]
 8006210:	e7af      	b.n	8006172 <_malloc_r+0x22>
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf0c      	ite	eq
 8006218:	f8c8 2000 	streq.w	r2, [r8]
 800621c:	605a      	strne	r2, [r3, #4]
 800621e:	e7eb      	b.n	80061f8 <_malloc_r+0xa8>
 8006220:	4623      	mov	r3, r4
 8006222:	6864      	ldr	r4, [r4, #4]
 8006224:	e7ae      	b.n	8006184 <_malloc_r+0x34>
 8006226:	463c      	mov	r4, r7
 8006228:	687f      	ldr	r7, [r7, #4]
 800622a:	e7b6      	b.n	800619a <_malloc_r+0x4a>
 800622c:	461a      	mov	r2, r3
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	42a3      	cmp	r3, r4
 8006232:	d1fb      	bne.n	800622c <_malloc_r+0xdc>
 8006234:	2300      	movs	r3, #0
 8006236:	6053      	str	r3, [r2, #4]
 8006238:	e7de      	b.n	80061f8 <_malloc_r+0xa8>
 800623a:	230c      	movs	r3, #12
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f80c 	bl	800625c <__malloc_unlock>
 8006244:	e794      	b.n	8006170 <_malloc_r+0x20>
 8006246:	6005      	str	r5, [r0, #0]
 8006248:	e7d6      	b.n	80061f8 <_malloc_r+0xa8>
 800624a:	bf00      	nop
 800624c:	200004c8 	.word	0x200004c8

08006250 <__malloc_lock>:
 8006250:	4801      	ldr	r0, [pc, #4]	@ (8006258 <__malloc_lock+0x8>)
 8006252:	f7ff b8a8 	b.w	80053a6 <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	200004c0 	.word	0x200004c0

0800625c <__malloc_unlock>:
 800625c:	4801      	ldr	r0, [pc, #4]	@ (8006264 <__malloc_unlock+0x8>)
 800625e:	f7ff b8a3 	b.w	80053a8 <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	200004c0 	.word	0x200004c0

08006268 <_Balloc>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	69c6      	ldr	r6, [r0, #28]
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	b976      	cbnz	r6, 8006290 <_Balloc+0x28>
 8006272:	2010      	movs	r0, #16
 8006274:	f7ff ff42 	bl	80060fc <malloc>
 8006278:	4602      	mov	r2, r0
 800627a:	61e0      	str	r0, [r4, #28]
 800627c:	b920      	cbnz	r0, 8006288 <_Balloc+0x20>
 800627e:	4b18      	ldr	r3, [pc, #96]	@ (80062e0 <_Balloc+0x78>)
 8006280:	4818      	ldr	r0, [pc, #96]	@ (80062e4 <_Balloc+0x7c>)
 8006282:	216b      	movs	r1, #107	@ 0x6b
 8006284:	f001 fd5c 	bl	8007d40 <__assert_func>
 8006288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800628c:	6006      	str	r6, [r0, #0]
 800628e:	60c6      	str	r6, [r0, #12]
 8006290:	69e6      	ldr	r6, [r4, #28]
 8006292:	68f3      	ldr	r3, [r6, #12]
 8006294:	b183      	cbz	r3, 80062b8 <_Balloc+0x50>
 8006296:	69e3      	ldr	r3, [r4, #28]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800629e:	b9b8      	cbnz	r0, 80062d0 <_Balloc+0x68>
 80062a0:	2101      	movs	r1, #1
 80062a2:	fa01 f605 	lsl.w	r6, r1, r5
 80062a6:	1d72      	adds	r2, r6, #5
 80062a8:	0092      	lsls	r2, r2, #2
 80062aa:	4620      	mov	r0, r4
 80062ac:	f001 fd66 	bl	8007d7c <_calloc_r>
 80062b0:	b160      	cbz	r0, 80062cc <_Balloc+0x64>
 80062b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062b6:	e00e      	b.n	80062d6 <_Balloc+0x6e>
 80062b8:	2221      	movs	r2, #33	@ 0x21
 80062ba:	2104      	movs	r1, #4
 80062bc:	4620      	mov	r0, r4
 80062be:	f001 fd5d 	bl	8007d7c <_calloc_r>
 80062c2:	69e3      	ldr	r3, [r4, #28]
 80062c4:	60f0      	str	r0, [r6, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e4      	bne.n	8006296 <_Balloc+0x2e>
 80062cc:	2000      	movs	r0, #0
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	6802      	ldr	r2, [r0, #0]
 80062d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062d6:	2300      	movs	r3, #0
 80062d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062dc:	e7f7      	b.n	80062ce <_Balloc+0x66>
 80062de:	bf00      	nop
 80062e0:	08008abe 	.word	0x08008abe
 80062e4:	08008b3e 	.word	0x08008b3e

080062e8 <_Bfree>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	69c6      	ldr	r6, [r0, #28]
 80062ec:	4605      	mov	r5, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b976      	cbnz	r6, 8006310 <_Bfree+0x28>
 80062f2:	2010      	movs	r0, #16
 80062f4:	f7ff ff02 	bl	80060fc <malloc>
 80062f8:	4602      	mov	r2, r0
 80062fa:	61e8      	str	r0, [r5, #28]
 80062fc:	b920      	cbnz	r0, 8006308 <_Bfree+0x20>
 80062fe:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <_Bfree+0x3c>)
 8006300:	4809      	ldr	r0, [pc, #36]	@ (8006328 <_Bfree+0x40>)
 8006302:	218f      	movs	r1, #143	@ 0x8f
 8006304:	f001 fd1c 	bl	8007d40 <__assert_func>
 8006308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800630c:	6006      	str	r6, [r0, #0]
 800630e:	60c6      	str	r6, [r0, #12]
 8006310:	b13c      	cbz	r4, 8006322 <_Bfree+0x3a>
 8006312:	69eb      	ldr	r3, [r5, #28]
 8006314:	6862      	ldr	r2, [r4, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800631c:	6021      	str	r1, [r4, #0]
 800631e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	08008abe 	.word	0x08008abe
 8006328:	08008b3e 	.word	0x08008b3e

0800632c <__multadd>:
 800632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	690d      	ldr	r5, [r1, #16]
 8006332:	4607      	mov	r7, r0
 8006334:	460c      	mov	r4, r1
 8006336:	461e      	mov	r6, r3
 8006338:	f101 0c14 	add.w	ip, r1, #20
 800633c:	2000      	movs	r0, #0
 800633e:	f8dc 3000 	ldr.w	r3, [ip]
 8006342:	b299      	uxth	r1, r3
 8006344:	fb02 6101 	mla	r1, r2, r1, r6
 8006348:	0c1e      	lsrs	r6, r3, #16
 800634a:	0c0b      	lsrs	r3, r1, #16
 800634c:	fb02 3306 	mla	r3, r2, r6, r3
 8006350:	b289      	uxth	r1, r1
 8006352:	3001      	adds	r0, #1
 8006354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006358:	4285      	cmp	r5, r0
 800635a:	f84c 1b04 	str.w	r1, [ip], #4
 800635e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006362:	dcec      	bgt.n	800633e <__multadd+0x12>
 8006364:	b30e      	cbz	r6, 80063aa <__multadd+0x7e>
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	42ab      	cmp	r3, r5
 800636a:	dc19      	bgt.n	80063a0 <__multadd+0x74>
 800636c:	6861      	ldr	r1, [r4, #4]
 800636e:	4638      	mov	r0, r7
 8006370:	3101      	adds	r1, #1
 8006372:	f7ff ff79 	bl	8006268 <_Balloc>
 8006376:	4680      	mov	r8, r0
 8006378:	b928      	cbnz	r0, 8006386 <__multadd+0x5a>
 800637a:	4602      	mov	r2, r0
 800637c:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <__multadd+0x84>)
 800637e:	480d      	ldr	r0, [pc, #52]	@ (80063b4 <__multadd+0x88>)
 8006380:	21ba      	movs	r1, #186	@ 0xba
 8006382:	f001 fcdd 	bl	8007d40 <__assert_func>
 8006386:	6922      	ldr	r2, [r4, #16]
 8006388:	3202      	adds	r2, #2
 800638a:	f104 010c 	add.w	r1, r4, #12
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	300c      	adds	r0, #12
 8006392:	f001 fcbd 	bl	8007d10 <memcpy>
 8006396:	4621      	mov	r1, r4
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff ffa5 	bl	80062e8 <_Bfree>
 800639e:	4644      	mov	r4, r8
 80063a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063a4:	3501      	adds	r5, #1
 80063a6:	615e      	str	r6, [r3, #20]
 80063a8:	6125      	str	r5, [r4, #16]
 80063aa:	4620      	mov	r0, r4
 80063ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b0:	08008b2d 	.word	0x08008b2d
 80063b4:	08008b3e 	.word	0x08008b3e

080063b8 <__s2b>:
 80063b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063bc:	460c      	mov	r4, r1
 80063be:	4615      	mov	r5, r2
 80063c0:	461f      	mov	r7, r3
 80063c2:	2209      	movs	r2, #9
 80063c4:	3308      	adds	r3, #8
 80063c6:	4606      	mov	r6, r0
 80063c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063cc:	2100      	movs	r1, #0
 80063ce:	2201      	movs	r2, #1
 80063d0:	429a      	cmp	r2, r3
 80063d2:	db09      	blt.n	80063e8 <__s2b+0x30>
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff ff47 	bl	8006268 <_Balloc>
 80063da:	b940      	cbnz	r0, 80063ee <__s2b+0x36>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b19      	ldr	r3, [pc, #100]	@ (8006444 <__s2b+0x8c>)
 80063e0:	4819      	ldr	r0, [pc, #100]	@ (8006448 <__s2b+0x90>)
 80063e2:	21d3      	movs	r1, #211	@ 0xd3
 80063e4:	f001 fcac 	bl	8007d40 <__assert_func>
 80063e8:	0052      	lsls	r2, r2, #1
 80063ea:	3101      	adds	r1, #1
 80063ec:	e7f0      	b.n	80063d0 <__s2b+0x18>
 80063ee:	9b08      	ldr	r3, [sp, #32]
 80063f0:	6143      	str	r3, [r0, #20]
 80063f2:	2d09      	cmp	r5, #9
 80063f4:	f04f 0301 	mov.w	r3, #1
 80063f8:	6103      	str	r3, [r0, #16]
 80063fa:	dd16      	ble.n	800642a <__s2b+0x72>
 80063fc:	f104 0909 	add.w	r9, r4, #9
 8006400:	46c8      	mov	r8, r9
 8006402:	442c      	add	r4, r5
 8006404:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006408:	4601      	mov	r1, r0
 800640a:	3b30      	subs	r3, #48	@ 0x30
 800640c:	220a      	movs	r2, #10
 800640e:	4630      	mov	r0, r6
 8006410:	f7ff ff8c 	bl	800632c <__multadd>
 8006414:	45a0      	cmp	r8, r4
 8006416:	d1f5      	bne.n	8006404 <__s2b+0x4c>
 8006418:	f1a5 0408 	sub.w	r4, r5, #8
 800641c:	444c      	add	r4, r9
 800641e:	1b2d      	subs	r5, r5, r4
 8006420:	1963      	adds	r3, r4, r5
 8006422:	42bb      	cmp	r3, r7
 8006424:	db04      	blt.n	8006430 <__s2b+0x78>
 8006426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800642a:	340a      	adds	r4, #10
 800642c:	2509      	movs	r5, #9
 800642e:	e7f6      	b.n	800641e <__s2b+0x66>
 8006430:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006434:	4601      	mov	r1, r0
 8006436:	3b30      	subs	r3, #48	@ 0x30
 8006438:	220a      	movs	r2, #10
 800643a:	4630      	mov	r0, r6
 800643c:	f7ff ff76 	bl	800632c <__multadd>
 8006440:	e7ee      	b.n	8006420 <__s2b+0x68>
 8006442:	bf00      	nop
 8006444:	08008b2d 	.word	0x08008b2d
 8006448:	08008b3e 	.word	0x08008b3e

0800644c <__hi0bits>:
 800644c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006450:	4603      	mov	r3, r0
 8006452:	bf36      	itet	cc
 8006454:	0403      	lslcc	r3, r0, #16
 8006456:	2000      	movcs	r0, #0
 8006458:	2010      	movcc	r0, #16
 800645a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645e:	bf3c      	itt	cc
 8006460:	021b      	lslcc	r3, r3, #8
 8006462:	3008      	addcc	r0, #8
 8006464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006468:	bf3c      	itt	cc
 800646a:	011b      	lslcc	r3, r3, #4
 800646c:	3004      	addcc	r0, #4
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006472:	bf3c      	itt	cc
 8006474:	009b      	lslcc	r3, r3, #2
 8006476:	3002      	addcc	r0, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	db05      	blt.n	8006488 <__hi0bits+0x3c>
 800647c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006480:	f100 0001 	add.w	r0, r0, #1
 8006484:	bf08      	it	eq
 8006486:	2020      	moveq	r0, #32
 8006488:	4770      	bx	lr

0800648a <__lo0bits>:
 800648a:	6803      	ldr	r3, [r0, #0]
 800648c:	4602      	mov	r2, r0
 800648e:	f013 0007 	ands.w	r0, r3, #7
 8006492:	d00b      	beq.n	80064ac <__lo0bits+0x22>
 8006494:	07d9      	lsls	r1, r3, #31
 8006496:	d421      	bmi.n	80064dc <__lo0bits+0x52>
 8006498:	0798      	lsls	r0, r3, #30
 800649a:	bf49      	itett	mi
 800649c:	085b      	lsrmi	r3, r3, #1
 800649e:	089b      	lsrpl	r3, r3, #2
 80064a0:	2001      	movmi	r0, #1
 80064a2:	6013      	strmi	r3, [r2, #0]
 80064a4:	bf5c      	itt	pl
 80064a6:	6013      	strpl	r3, [r2, #0]
 80064a8:	2002      	movpl	r0, #2
 80064aa:	4770      	bx	lr
 80064ac:	b299      	uxth	r1, r3
 80064ae:	b909      	cbnz	r1, 80064b4 <__lo0bits+0x2a>
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	2010      	movs	r0, #16
 80064b4:	b2d9      	uxtb	r1, r3
 80064b6:	b909      	cbnz	r1, 80064bc <__lo0bits+0x32>
 80064b8:	3008      	adds	r0, #8
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	0719      	lsls	r1, r3, #28
 80064be:	bf04      	itt	eq
 80064c0:	091b      	lsreq	r3, r3, #4
 80064c2:	3004      	addeq	r0, #4
 80064c4:	0799      	lsls	r1, r3, #30
 80064c6:	bf04      	itt	eq
 80064c8:	089b      	lsreq	r3, r3, #2
 80064ca:	3002      	addeq	r0, #2
 80064cc:	07d9      	lsls	r1, r3, #31
 80064ce:	d403      	bmi.n	80064d8 <__lo0bits+0x4e>
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	f100 0001 	add.w	r0, r0, #1
 80064d6:	d003      	beq.n	80064e0 <__lo0bits+0x56>
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4770      	bx	lr
 80064dc:	2000      	movs	r0, #0
 80064de:	4770      	bx	lr
 80064e0:	2020      	movs	r0, #32
 80064e2:	4770      	bx	lr

080064e4 <__i2b>:
 80064e4:	b510      	push	{r4, lr}
 80064e6:	460c      	mov	r4, r1
 80064e8:	2101      	movs	r1, #1
 80064ea:	f7ff febd 	bl	8006268 <_Balloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	b928      	cbnz	r0, 80064fe <__i2b+0x1a>
 80064f2:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <__i2b+0x24>)
 80064f4:	4805      	ldr	r0, [pc, #20]	@ (800650c <__i2b+0x28>)
 80064f6:	f240 1145 	movw	r1, #325	@ 0x145
 80064fa:	f001 fc21 	bl	8007d40 <__assert_func>
 80064fe:	2301      	movs	r3, #1
 8006500:	6144      	str	r4, [r0, #20]
 8006502:	6103      	str	r3, [r0, #16]
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	08008b2d 	.word	0x08008b2d
 800650c:	08008b3e 	.word	0x08008b3e

08006510 <__multiply>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	4617      	mov	r7, r2
 8006516:	690a      	ldr	r2, [r1, #16]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	bfa8      	it	ge
 800651e:	463b      	movge	r3, r7
 8006520:	4689      	mov	r9, r1
 8006522:	bfa4      	itt	ge
 8006524:	460f      	movge	r7, r1
 8006526:	4699      	movge	r9, r3
 8006528:	693d      	ldr	r5, [r7, #16]
 800652a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	eb05 060a 	add.w	r6, r5, sl
 8006536:	42b3      	cmp	r3, r6
 8006538:	b085      	sub	sp, #20
 800653a:	bfb8      	it	lt
 800653c:	3101      	addlt	r1, #1
 800653e:	f7ff fe93 	bl	8006268 <_Balloc>
 8006542:	b930      	cbnz	r0, 8006552 <__multiply+0x42>
 8006544:	4602      	mov	r2, r0
 8006546:	4b41      	ldr	r3, [pc, #260]	@ (800664c <__multiply+0x13c>)
 8006548:	4841      	ldr	r0, [pc, #260]	@ (8006650 <__multiply+0x140>)
 800654a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800654e:	f001 fbf7 	bl	8007d40 <__assert_func>
 8006552:	f100 0414 	add.w	r4, r0, #20
 8006556:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800655a:	4623      	mov	r3, r4
 800655c:	2200      	movs	r2, #0
 800655e:	4573      	cmp	r3, lr
 8006560:	d320      	bcc.n	80065a4 <__multiply+0x94>
 8006562:	f107 0814 	add.w	r8, r7, #20
 8006566:	f109 0114 	add.w	r1, r9, #20
 800656a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800656e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006572:	9302      	str	r3, [sp, #8]
 8006574:	1beb      	subs	r3, r5, r7
 8006576:	3b15      	subs	r3, #21
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	3304      	adds	r3, #4
 800657e:	3715      	adds	r7, #21
 8006580:	42bd      	cmp	r5, r7
 8006582:	bf38      	it	cc
 8006584:	2304      	movcc	r3, #4
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	9103      	str	r1, [sp, #12]
 800658c:	428b      	cmp	r3, r1
 800658e:	d80c      	bhi.n	80065aa <__multiply+0x9a>
 8006590:	2e00      	cmp	r6, #0
 8006592:	dd03      	ble.n	800659c <__multiply+0x8c>
 8006594:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006598:	2b00      	cmp	r3, #0
 800659a:	d055      	beq.n	8006648 <__multiply+0x138>
 800659c:	6106      	str	r6, [r0, #16]
 800659e:	b005      	add	sp, #20
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	f843 2b04 	str.w	r2, [r3], #4
 80065a8:	e7d9      	b.n	800655e <__multiply+0x4e>
 80065aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80065ae:	f1ba 0f00 	cmp.w	sl, #0
 80065b2:	d01f      	beq.n	80065f4 <__multiply+0xe4>
 80065b4:	46c4      	mov	ip, r8
 80065b6:	46a1      	mov	r9, r4
 80065b8:	2700      	movs	r7, #0
 80065ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065be:	f8d9 3000 	ldr.w	r3, [r9]
 80065c2:	fa1f fb82 	uxth.w	fp, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80065cc:	443b      	add	r3, r7
 80065ce:	f8d9 7000 	ldr.w	r7, [r9]
 80065d2:	0c12      	lsrs	r2, r2, #16
 80065d4:	0c3f      	lsrs	r7, r7, #16
 80065d6:	fb0a 7202 	mla	r2, sl, r2, r7
 80065da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80065de:	b29b      	uxth	r3, r3
 80065e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e4:	4565      	cmp	r5, ip
 80065e6:	f849 3b04 	str.w	r3, [r9], #4
 80065ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80065ee:	d8e4      	bhi.n	80065ba <__multiply+0xaa>
 80065f0:	9b01      	ldr	r3, [sp, #4]
 80065f2:	50e7      	str	r7, [r4, r3]
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80065fa:	3104      	adds	r1, #4
 80065fc:	f1b9 0f00 	cmp.w	r9, #0
 8006600:	d020      	beq.n	8006644 <__multiply+0x134>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	4647      	mov	r7, r8
 8006606:	46a4      	mov	ip, r4
 8006608:	f04f 0a00 	mov.w	sl, #0
 800660c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006610:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006614:	fb09 220b 	mla	r2, r9, fp, r2
 8006618:	4452      	add	r2, sl
 800661a:	b29b      	uxth	r3, r3
 800661c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006620:	f84c 3b04 	str.w	r3, [ip], #4
 8006624:	f857 3b04 	ldr.w	r3, [r7], #4
 8006628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800662c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006630:	fb09 330a 	mla	r3, r9, sl, r3
 8006634:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006638:	42bd      	cmp	r5, r7
 800663a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800663e:	d8e5      	bhi.n	800660c <__multiply+0xfc>
 8006640:	9a01      	ldr	r2, [sp, #4]
 8006642:	50a3      	str	r3, [r4, r2]
 8006644:	3404      	adds	r4, #4
 8006646:	e79f      	b.n	8006588 <__multiply+0x78>
 8006648:	3e01      	subs	r6, #1
 800664a:	e7a1      	b.n	8006590 <__multiply+0x80>
 800664c:	08008b2d 	.word	0x08008b2d
 8006650:	08008b3e 	.word	0x08008b3e

08006654 <__pow5mult>:
 8006654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006658:	4615      	mov	r5, r2
 800665a:	f012 0203 	ands.w	r2, r2, #3
 800665e:	4607      	mov	r7, r0
 8006660:	460e      	mov	r6, r1
 8006662:	d007      	beq.n	8006674 <__pow5mult+0x20>
 8006664:	4c25      	ldr	r4, [pc, #148]	@ (80066fc <__pow5mult+0xa8>)
 8006666:	3a01      	subs	r2, #1
 8006668:	2300      	movs	r3, #0
 800666a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800666e:	f7ff fe5d 	bl	800632c <__multadd>
 8006672:	4606      	mov	r6, r0
 8006674:	10ad      	asrs	r5, r5, #2
 8006676:	d03d      	beq.n	80066f4 <__pow5mult+0xa0>
 8006678:	69fc      	ldr	r4, [r7, #28]
 800667a:	b97c      	cbnz	r4, 800669c <__pow5mult+0x48>
 800667c:	2010      	movs	r0, #16
 800667e:	f7ff fd3d 	bl	80060fc <malloc>
 8006682:	4602      	mov	r2, r0
 8006684:	61f8      	str	r0, [r7, #28]
 8006686:	b928      	cbnz	r0, 8006694 <__pow5mult+0x40>
 8006688:	4b1d      	ldr	r3, [pc, #116]	@ (8006700 <__pow5mult+0xac>)
 800668a:	481e      	ldr	r0, [pc, #120]	@ (8006704 <__pow5mult+0xb0>)
 800668c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006690:	f001 fb56 	bl	8007d40 <__assert_func>
 8006694:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006698:	6004      	str	r4, [r0, #0]
 800669a:	60c4      	str	r4, [r0, #12]
 800669c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80066a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066a4:	b94c      	cbnz	r4, 80066ba <__pow5mult+0x66>
 80066a6:	f240 2171 	movw	r1, #625	@ 0x271
 80066aa:	4638      	mov	r0, r7
 80066ac:	f7ff ff1a 	bl	80064e4 <__i2b>
 80066b0:	2300      	movs	r3, #0
 80066b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80066b6:	4604      	mov	r4, r0
 80066b8:	6003      	str	r3, [r0, #0]
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	07eb      	lsls	r3, r5, #31
 80066c0:	d50a      	bpl.n	80066d8 <__pow5mult+0x84>
 80066c2:	4631      	mov	r1, r6
 80066c4:	4622      	mov	r2, r4
 80066c6:	4638      	mov	r0, r7
 80066c8:	f7ff ff22 	bl	8006510 <__multiply>
 80066cc:	4631      	mov	r1, r6
 80066ce:	4680      	mov	r8, r0
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff fe09 	bl	80062e8 <_Bfree>
 80066d6:	4646      	mov	r6, r8
 80066d8:	106d      	asrs	r5, r5, #1
 80066da:	d00b      	beq.n	80066f4 <__pow5mult+0xa0>
 80066dc:	6820      	ldr	r0, [r4, #0]
 80066de:	b938      	cbnz	r0, 80066f0 <__pow5mult+0x9c>
 80066e0:	4622      	mov	r2, r4
 80066e2:	4621      	mov	r1, r4
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff ff13 	bl	8006510 <__multiply>
 80066ea:	6020      	str	r0, [r4, #0]
 80066ec:	f8c0 9000 	str.w	r9, [r0]
 80066f0:	4604      	mov	r4, r0
 80066f2:	e7e4      	b.n	80066be <__pow5mult+0x6a>
 80066f4:	4630      	mov	r0, r6
 80066f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fa:	bf00      	nop
 80066fc:	08008c50 	.word	0x08008c50
 8006700:	08008abe 	.word	0x08008abe
 8006704:	08008b3e 	.word	0x08008b3e

08006708 <__lshift>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	6849      	ldr	r1, [r1, #4]
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006716:	68a3      	ldr	r3, [r4, #8]
 8006718:	4607      	mov	r7, r0
 800671a:	4691      	mov	r9, r2
 800671c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006720:	f108 0601 	add.w	r6, r8, #1
 8006724:	42b3      	cmp	r3, r6
 8006726:	db0b      	blt.n	8006740 <__lshift+0x38>
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff fd9d 	bl	8006268 <_Balloc>
 800672e:	4605      	mov	r5, r0
 8006730:	b948      	cbnz	r0, 8006746 <__lshift+0x3e>
 8006732:	4602      	mov	r2, r0
 8006734:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <__lshift+0xd0>)
 8006736:	4829      	ldr	r0, [pc, #164]	@ (80067dc <__lshift+0xd4>)
 8006738:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800673c:	f001 fb00 	bl	8007d40 <__assert_func>
 8006740:	3101      	adds	r1, #1
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	e7ee      	b.n	8006724 <__lshift+0x1c>
 8006746:	2300      	movs	r3, #0
 8006748:	f100 0114 	add.w	r1, r0, #20
 800674c:	f100 0210 	add.w	r2, r0, #16
 8006750:	4618      	mov	r0, r3
 8006752:	4553      	cmp	r3, sl
 8006754:	db33      	blt.n	80067be <__lshift+0xb6>
 8006756:	6920      	ldr	r0, [r4, #16]
 8006758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800675c:	f104 0314 	add.w	r3, r4, #20
 8006760:	f019 091f 	ands.w	r9, r9, #31
 8006764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800676c:	d02b      	beq.n	80067c6 <__lshift+0xbe>
 800676e:	f1c9 0e20 	rsb	lr, r9, #32
 8006772:	468a      	mov	sl, r1
 8006774:	2200      	movs	r2, #0
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	fa00 f009 	lsl.w	r0, r0, r9
 800677c:	4310      	orrs	r0, r2
 800677e:	f84a 0b04 	str.w	r0, [sl], #4
 8006782:	f853 2b04 	ldr.w	r2, [r3], #4
 8006786:	459c      	cmp	ip, r3
 8006788:	fa22 f20e 	lsr.w	r2, r2, lr
 800678c:	d8f3      	bhi.n	8006776 <__lshift+0x6e>
 800678e:	ebac 0304 	sub.w	r3, ip, r4
 8006792:	3b15      	subs	r3, #21
 8006794:	f023 0303 	bic.w	r3, r3, #3
 8006798:	3304      	adds	r3, #4
 800679a:	f104 0015 	add.w	r0, r4, #21
 800679e:	4560      	cmp	r0, ip
 80067a0:	bf88      	it	hi
 80067a2:	2304      	movhi	r3, #4
 80067a4:	50ca      	str	r2, [r1, r3]
 80067a6:	b10a      	cbz	r2, 80067ac <__lshift+0xa4>
 80067a8:	f108 0602 	add.w	r6, r8, #2
 80067ac:	3e01      	subs	r6, #1
 80067ae:	4638      	mov	r0, r7
 80067b0:	612e      	str	r6, [r5, #16]
 80067b2:	4621      	mov	r1, r4
 80067b4:	f7ff fd98 	bl	80062e8 <_Bfree>
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	f842 0f04 	str.w	r0, [r2, #4]!
 80067c2:	3301      	adds	r3, #1
 80067c4:	e7c5      	b.n	8006752 <__lshift+0x4a>
 80067c6:	3904      	subs	r1, #4
 80067c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80067d0:	459c      	cmp	ip, r3
 80067d2:	d8f9      	bhi.n	80067c8 <__lshift+0xc0>
 80067d4:	e7ea      	b.n	80067ac <__lshift+0xa4>
 80067d6:	bf00      	nop
 80067d8:	08008b2d 	.word	0x08008b2d
 80067dc:	08008b3e 	.word	0x08008b3e

080067e0 <__mcmp>:
 80067e0:	690a      	ldr	r2, [r1, #16]
 80067e2:	4603      	mov	r3, r0
 80067e4:	6900      	ldr	r0, [r0, #16]
 80067e6:	1a80      	subs	r0, r0, r2
 80067e8:	b530      	push	{r4, r5, lr}
 80067ea:	d10e      	bne.n	800680a <__mcmp+0x2a>
 80067ec:	3314      	adds	r3, #20
 80067ee:	3114      	adds	r1, #20
 80067f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80067f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80067f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006800:	4295      	cmp	r5, r2
 8006802:	d003      	beq.n	800680c <__mcmp+0x2c>
 8006804:	d205      	bcs.n	8006812 <__mcmp+0x32>
 8006806:	f04f 30ff 	mov.w	r0, #4294967295
 800680a:	bd30      	pop	{r4, r5, pc}
 800680c:	42a3      	cmp	r3, r4
 800680e:	d3f3      	bcc.n	80067f8 <__mcmp+0x18>
 8006810:	e7fb      	b.n	800680a <__mcmp+0x2a>
 8006812:	2001      	movs	r0, #1
 8006814:	e7f9      	b.n	800680a <__mcmp+0x2a>
	...

08006818 <__mdiff>:
 8006818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	4689      	mov	r9, r1
 800681e:	4606      	mov	r6, r0
 8006820:	4611      	mov	r1, r2
 8006822:	4648      	mov	r0, r9
 8006824:	4614      	mov	r4, r2
 8006826:	f7ff ffdb 	bl	80067e0 <__mcmp>
 800682a:	1e05      	subs	r5, r0, #0
 800682c:	d112      	bne.n	8006854 <__mdiff+0x3c>
 800682e:	4629      	mov	r1, r5
 8006830:	4630      	mov	r0, r6
 8006832:	f7ff fd19 	bl	8006268 <_Balloc>
 8006836:	4602      	mov	r2, r0
 8006838:	b928      	cbnz	r0, 8006846 <__mdiff+0x2e>
 800683a:	4b3f      	ldr	r3, [pc, #252]	@ (8006938 <__mdiff+0x120>)
 800683c:	f240 2137 	movw	r1, #567	@ 0x237
 8006840:	483e      	ldr	r0, [pc, #248]	@ (800693c <__mdiff+0x124>)
 8006842:	f001 fa7d 	bl	8007d40 <__assert_func>
 8006846:	2301      	movs	r3, #1
 8006848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800684c:	4610      	mov	r0, r2
 800684e:	b003      	add	sp, #12
 8006850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006854:	bfbc      	itt	lt
 8006856:	464b      	movlt	r3, r9
 8006858:	46a1      	movlt	r9, r4
 800685a:	4630      	mov	r0, r6
 800685c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006860:	bfba      	itte	lt
 8006862:	461c      	movlt	r4, r3
 8006864:	2501      	movlt	r5, #1
 8006866:	2500      	movge	r5, #0
 8006868:	f7ff fcfe 	bl	8006268 <_Balloc>
 800686c:	4602      	mov	r2, r0
 800686e:	b918      	cbnz	r0, 8006878 <__mdiff+0x60>
 8006870:	4b31      	ldr	r3, [pc, #196]	@ (8006938 <__mdiff+0x120>)
 8006872:	f240 2145 	movw	r1, #581	@ 0x245
 8006876:	e7e3      	b.n	8006840 <__mdiff+0x28>
 8006878:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800687c:	6926      	ldr	r6, [r4, #16]
 800687e:	60c5      	str	r5, [r0, #12]
 8006880:	f109 0310 	add.w	r3, r9, #16
 8006884:	f109 0514 	add.w	r5, r9, #20
 8006888:	f104 0e14 	add.w	lr, r4, #20
 800688c:	f100 0b14 	add.w	fp, r0, #20
 8006890:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006894:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	46d9      	mov	r9, fp
 800689c:	f04f 0c00 	mov.w	ip, #0
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80068a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	fa1f f38a 	uxth.w	r3, sl
 80068b0:	4619      	mov	r1, r3
 80068b2:	b283      	uxth	r3, r0
 80068b4:	1acb      	subs	r3, r1, r3
 80068b6:	0c00      	lsrs	r0, r0, #16
 80068b8:	4463      	add	r3, ip
 80068ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80068be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80068c8:	4576      	cmp	r6, lr
 80068ca:	f849 3b04 	str.w	r3, [r9], #4
 80068ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068d2:	d8e5      	bhi.n	80068a0 <__mdiff+0x88>
 80068d4:	1b33      	subs	r3, r6, r4
 80068d6:	3b15      	subs	r3, #21
 80068d8:	f023 0303 	bic.w	r3, r3, #3
 80068dc:	3415      	adds	r4, #21
 80068de:	3304      	adds	r3, #4
 80068e0:	42a6      	cmp	r6, r4
 80068e2:	bf38      	it	cc
 80068e4:	2304      	movcc	r3, #4
 80068e6:	441d      	add	r5, r3
 80068e8:	445b      	add	r3, fp
 80068ea:	461e      	mov	r6, r3
 80068ec:	462c      	mov	r4, r5
 80068ee:	4544      	cmp	r4, r8
 80068f0:	d30e      	bcc.n	8006910 <__mdiff+0xf8>
 80068f2:	f108 0103 	add.w	r1, r8, #3
 80068f6:	1b49      	subs	r1, r1, r5
 80068f8:	f021 0103 	bic.w	r1, r1, #3
 80068fc:	3d03      	subs	r5, #3
 80068fe:	45a8      	cmp	r8, r5
 8006900:	bf38      	it	cc
 8006902:	2100      	movcc	r1, #0
 8006904:	440b      	add	r3, r1
 8006906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800690a:	b191      	cbz	r1, 8006932 <__mdiff+0x11a>
 800690c:	6117      	str	r7, [r2, #16]
 800690e:	e79d      	b.n	800684c <__mdiff+0x34>
 8006910:	f854 1b04 	ldr.w	r1, [r4], #4
 8006914:	46e6      	mov	lr, ip
 8006916:	0c08      	lsrs	r0, r1, #16
 8006918:	fa1c fc81 	uxtah	ip, ip, r1
 800691c:	4471      	add	r1, lr
 800691e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006922:	b289      	uxth	r1, r1
 8006924:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006928:	f846 1b04 	str.w	r1, [r6], #4
 800692c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006930:	e7dd      	b.n	80068ee <__mdiff+0xd6>
 8006932:	3f01      	subs	r7, #1
 8006934:	e7e7      	b.n	8006906 <__mdiff+0xee>
 8006936:	bf00      	nop
 8006938:	08008b2d 	.word	0x08008b2d
 800693c:	08008b3e 	.word	0x08008b3e

08006940 <__ulp>:
 8006940:	b082      	sub	sp, #8
 8006942:	ed8d 0b00 	vstr	d0, [sp]
 8006946:	9a01      	ldr	r2, [sp, #4]
 8006948:	4b0f      	ldr	r3, [pc, #60]	@ (8006988 <__ulp+0x48>)
 800694a:	4013      	ands	r3, r2
 800694c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006950:	2b00      	cmp	r3, #0
 8006952:	dc08      	bgt.n	8006966 <__ulp+0x26>
 8006954:	425b      	negs	r3, r3
 8006956:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800695a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800695e:	da04      	bge.n	800696a <__ulp+0x2a>
 8006960:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006964:	4113      	asrs	r3, r2
 8006966:	2200      	movs	r2, #0
 8006968:	e008      	b.n	800697c <__ulp+0x3c>
 800696a:	f1a2 0314 	sub.w	r3, r2, #20
 800696e:	2b1e      	cmp	r3, #30
 8006970:	bfda      	itte	le
 8006972:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006976:	40da      	lsrle	r2, r3
 8006978:	2201      	movgt	r2, #1
 800697a:	2300      	movs	r3, #0
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	ec41 0b10 	vmov	d0, r0, r1
 8006984:	b002      	add	sp, #8
 8006986:	4770      	bx	lr
 8006988:	7ff00000 	.word	0x7ff00000

0800698c <__b2d>:
 800698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006990:	6906      	ldr	r6, [r0, #16]
 8006992:	f100 0814 	add.w	r8, r0, #20
 8006996:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800699a:	1f37      	subs	r7, r6, #4
 800699c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7ff fd53 	bl	800644c <__hi0bits>
 80069a6:	f1c0 0320 	rsb	r3, r0, #32
 80069aa:	280a      	cmp	r0, #10
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	491b      	ldr	r1, [pc, #108]	@ (8006a1c <__b2d+0x90>)
 80069b0:	dc15      	bgt.n	80069de <__b2d+0x52>
 80069b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80069b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80069ba:	45b8      	cmp	r8, r7
 80069bc:	ea43 0501 	orr.w	r5, r3, r1
 80069c0:	bf34      	ite	cc
 80069c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80069c6:	2300      	movcs	r3, #0
 80069c8:	3015      	adds	r0, #21
 80069ca:	fa02 f000 	lsl.w	r0, r2, r0
 80069ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80069d2:	4303      	orrs	r3, r0
 80069d4:	461c      	mov	r4, r3
 80069d6:	ec45 4b10 	vmov	d0, r4, r5
 80069da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069de:	45b8      	cmp	r8, r7
 80069e0:	bf3a      	itte	cc
 80069e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80069e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80069ea:	2300      	movcs	r3, #0
 80069ec:	380b      	subs	r0, #11
 80069ee:	d012      	beq.n	8006a16 <__b2d+0x8a>
 80069f0:	f1c0 0120 	rsb	r1, r0, #32
 80069f4:	fa23 f401 	lsr.w	r4, r3, r1
 80069f8:	4082      	lsls	r2, r0
 80069fa:	4322      	orrs	r2, r4
 80069fc:	4547      	cmp	r7, r8
 80069fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006a02:	bf8c      	ite	hi
 8006a04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006a08:	2200      	movls	r2, #0
 8006a0a:	4083      	lsls	r3, r0
 8006a0c:	40ca      	lsrs	r2, r1
 8006a0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006a12:	4313      	orrs	r3, r2
 8006a14:	e7de      	b.n	80069d4 <__b2d+0x48>
 8006a16:	ea42 0501 	orr.w	r5, r2, r1
 8006a1a:	e7db      	b.n	80069d4 <__b2d+0x48>
 8006a1c:	3ff00000 	.word	0x3ff00000

08006a20 <__d2b>:
 8006a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	460f      	mov	r7, r1
 8006a26:	2101      	movs	r1, #1
 8006a28:	ec59 8b10 	vmov	r8, r9, d0
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	f7ff fc1b 	bl	8006268 <_Balloc>
 8006a32:	4604      	mov	r4, r0
 8006a34:	b930      	cbnz	r0, 8006a44 <__d2b+0x24>
 8006a36:	4602      	mov	r2, r0
 8006a38:	4b23      	ldr	r3, [pc, #140]	@ (8006ac8 <__d2b+0xa8>)
 8006a3a:	4824      	ldr	r0, [pc, #144]	@ (8006acc <__d2b+0xac>)
 8006a3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a40:	f001 f97e 	bl	8007d40 <__assert_func>
 8006a44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a4c:	b10d      	cbz	r5, 8006a52 <__d2b+0x32>
 8006a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	f1b8 0300 	subs.w	r3, r8, #0
 8006a58:	d023      	beq.n	8006aa2 <__d2b+0x82>
 8006a5a:	4668      	mov	r0, sp
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	f7ff fd14 	bl	800648a <__lo0bits>
 8006a62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a66:	b1d0      	cbz	r0, 8006a9e <__d2b+0x7e>
 8006a68:	f1c0 0320 	rsb	r3, r0, #32
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	430b      	orrs	r3, r1
 8006a72:	40c2      	lsrs	r2, r0
 8006a74:	6163      	str	r3, [r4, #20]
 8006a76:	9201      	str	r2, [sp, #4]
 8006a78:	9b01      	ldr	r3, [sp, #4]
 8006a7a:	61a3      	str	r3, [r4, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf0c      	ite	eq
 8006a80:	2201      	moveq	r2, #1
 8006a82:	2202      	movne	r2, #2
 8006a84:	6122      	str	r2, [r4, #16]
 8006a86:	b1a5      	cbz	r5, 8006ab2 <__d2b+0x92>
 8006a88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a8c:	4405      	add	r5, r0
 8006a8e:	603d      	str	r5, [r7, #0]
 8006a90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a94:	6030      	str	r0, [r6, #0]
 8006a96:	4620      	mov	r0, r4
 8006a98:	b003      	add	sp, #12
 8006a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	6161      	str	r1, [r4, #20]
 8006aa0:	e7ea      	b.n	8006a78 <__d2b+0x58>
 8006aa2:	a801      	add	r0, sp, #4
 8006aa4:	f7ff fcf1 	bl	800648a <__lo0bits>
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	6163      	str	r3, [r4, #20]
 8006aac:	3020      	adds	r0, #32
 8006aae:	2201      	movs	r2, #1
 8006ab0:	e7e8      	b.n	8006a84 <__d2b+0x64>
 8006ab2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ab6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006aba:	6038      	str	r0, [r7, #0]
 8006abc:	6918      	ldr	r0, [r3, #16]
 8006abe:	f7ff fcc5 	bl	800644c <__hi0bits>
 8006ac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ac6:	e7e5      	b.n	8006a94 <__d2b+0x74>
 8006ac8:	08008b2d 	.word	0x08008b2d
 8006acc:	08008b3e 	.word	0x08008b3e

08006ad0 <__ratio>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	e9cd 1000 	strd	r1, r0, [sp]
 8006ada:	a902      	add	r1, sp, #8
 8006adc:	f7ff ff56 	bl	800698c <__b2d>
 8006ae0:	9800      	ldr	r0, [sp, #0]
 8006ae2:	a903      	add	r1, sp, #12
 8006ae4:	ec55 4b10 	vmov	r4, r5, d0
 8006ae8:	f7ff ff50 	bl	800698c <__b2d>
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	6919      	ldr	r1, [r3, #16]
 8006af0:	9b00      	ldr	r3, [sp, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	1ac9      	subs	r1, r1, r3
 8006af6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	ec5b ab10 	vmov	sl, fp, d0
 8006b00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfce      	itee	gt
 8006b08:	462a      	movgt	r2, r5
 8006b0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b0e:	465a      	movle	r2, fp
 8006b10:	462f      	mov	r7, r5
 8006b12:	46d9      	mov	r9, fp
 8006b14:	bfcc      	ite	gt
 8006b16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006b1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006b1e:	464b      	mov	r3, r9
 8006b20:	4652      	mov	r2, sl
 8006b22:	4620      	mov	r0, r4
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7f9 fe99 	bl	800085c <__aeabi_ddiv>
 8006b2a:	ec41 0b10 	vmov	d0, r0, r1
 8006b2e:	b005      	add	sp, #20
 8006b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b34 <__copybits>:
 8006b34:	3901      	subs	r1, #1
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	1149      	asrs	r1, r1, #5
 8006b3a:	6914      	ldr	r4, [r2, #16]
 8006b3c:	3101      	adds	r1, #1
 8006b3e:	f102 0314 	add.w	r3, r2, #20
 8006b42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006b46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006b4a:	1f05      	subs	r5, r0, #4
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	d30c      	bcc.n	8006b6a <__copybits+0x36>
 8006b50:	1aa3      	subs	r3, r4, r2
 8006b52:	3b11      	subs	r3, #17
 8006b54:	f023 0303 	bic.w	r3, r3, #3
 8006b58:	3211      	adds	r2, #17
 8006b5a:	42a2      	cmp	r2, r4
 8006b5c:	bf88      	it	hi
 8006b5e:	2300      	movhi	r3, #0
 8006b60:	4418      	add	r0, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	4288      	cmp	r0, r1
 8006b66:	d305      	bcc.n	8006b74 <__copybits+0x40>
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
 8006b6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006b6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006b72:	e7eb      	b.n	8006b4c <__copybits+0x18>
 8006b74:	f840 3b04 	str.w	r3, [r0], #4
 8006b78:	e7f4      	b.n	8006b64 <__copybits+0x30>

08006b7a <__any_on>:
 8006b7a:	f100 0214 	add.w	r2, r0, #20
 8006b7e:	6900      	ldr	r0, [r0, #16]
 8006b80:	114b      	asrs	r3, r1, #5
 8006b82:	4298      	cmp	r0, r3
 8006b84:	b510      	push	{r4, lr}
 8006b86:	db11      	blt.n	8006bac <__any_on+0x32>
 8006b88:	dd0a      	ble.n	8006ba0 <__any_on+0x26>
 8006b8a:	f011 011f 	ands.w	r1, r1, #31
 8006b8e:	d007      	beq.n	8006ba0 <__any_on+0x26>
 8006b90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b94:	fa24 f001 	lsr.w	r0, r4, r1
 8006b98:	fa00 f101 	lsl.w	r1, r0, r1
 8006b9c:	428c      	cmp	r4, r1
 8006b9e:	d10b      	bne.n	8006bb8 <__any_on+0x3e>
 8006ba0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d803      	bhi.n	8006bb0 <__any_on+0x36>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	bd10      	pop	{r4, pc}
 8006bac:	4603      	mov	r3, r0
 8006bae:	e7f7      	b.n	8006ba0 <__any_on+0x26>
 8006bb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d0f5      	beq.n	8006ba4 <__any_on+0x2a>
 8006bb8:	2001      	movs	r0, #1
 8006bba:	e7f6      	b.n	8006baa <__any_on+0x30>

08006bbc <sulp>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	ec45 4b10 	vmov	d0, r4, r5
 8006bc6:	4616      	mov	r6, r2
 8006bc8:	f7ff feba 	bl	8006940 <__ulp>
 8006bcc:	ec51 0b10 	vmov	r0, r1, d0
 8006bd0:	b17e      	cbz	r6, 8006bf2 <sulp+0x36>
 8006bd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006bd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd09      	ble.n	8006bf2 <sulp+0x36>
 8006bde:	051b      	lsls	r3, r3, #20
 8006be0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006be4:	2400      	movs	r4, #0
 8006be6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006bea:	4622      	mov	r2, r4
 8006bec:	462b      	mov	r3, r5
 8006bee:	f7f9 fd0b 	bl	8000608 <__aeabi_dmul>
 8006bf2:	ec41 0b10 	vmov	d0, r0, r1
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}

08006bf8 <_strtod_l>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	b09f      	sub	sp, #124	@ 0x7c
 8006bfe:	460c      	mov	r4, r1
 8006c00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006c02:	2200      	movs	r2, #0
 8006c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8006c06:	9005      	str	r0, [sp, #20]
 8006c08:	f04f 0a00 	mov.w	sl, #0
 8006c0c:	f04f 0b00 	mov.w	fp, #0
 8006c10:	460a      	mov	r2, r1
 8006c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c14:	7811      	ldrb	r1, [r2, #0]
 8006c16:	292b      	cmp	r1, #43	@ 0x2b
 8006c18:	d04a      	beq.n	8006cb0 <_strtod_l+0xb8>
 8006c1a:	d838      	bhi.n	8006c8e <_strtod_l+0x96>
 8006c1c:	290d      	cmp	r1, #13
 8006c1e:	d832      	bhi.n	8006c86 <_strtod_l+0x8e>
 8006c20:	2908      	cmp	r1, #8
 8006c22:	d832      	bhi.n	8006c8a <_strtod_l+0x92>
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d03b      	beq.n	8006ca0 <_strtod_l+0xa8>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006c2e:	782a      	ldrb	r2, [r5, #0]
 8006c30:	2a30      	cmp	r2, #48	@ 0x30
 8006c32:	f040 80b2 	bne.w	8006d9a <_strtod_l+0x1a2>
 8006c36:	786a      	ldrb	r2, [r5, #1]
 8006c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006c3c:	2a58      	cmp	r2, #88	@ 0x58
 8006c3e:	d16e      	bne.n	8006d1e <_strtod_l+0x126>
 8006c40:	9302      	str	r3, [sp, #8]
 8006c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	ab1a      	add	r3, sp, #104	@ 0x68
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	4a8f      	ldr	r2, [pc, #572]	@ (8006e88 <_strtod_l+0x290>)
 8006c4c:	9805      	ldr	r0, [sp, #20]
 8006c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006c50:	a919      	add	r1, sp, #100	@ 0x64
 8006c52:	f001 f90f 	bl	8007e74 <__gethex>
 8006c56:	f010 060f 	ands.w	r6, r0, #15
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	d005      	beq.n	8006c6a <_strtod_l+0x72>
 8006c5e:	2e06      	cmp	r6, #6
 8006c60:	d128      	bne.n	8006cb4 <_strtod_l+0xbc>
 8006c62:	3501      	adds	r5, #1
 8006c64:	2300      	movs	r3, #0
 8006c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8006c68:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 858e 	bne.w	800778e <_strtod_l+0xb96>
 8006c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c74:	b1cb      	cbz	r3, 8006caa <_strtod_l+0xb2>
 8006c76:	4652      	mov	r2, sl
 8006c78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006c7c:	ec43 2b10 	vmov	d0, r2, r3
 8006c80:	b01f      	add	sp, #124	@ 0x7c
 8006c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c86:	2920      	cmp	r1, #32
 8006c88:	d1ce      	bne.n	8006c28 <_strtod_l+0x30>
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	e7c1      	b.n	8006c12 <_strtod_l+0x1a>
 8006c8e:	292d      	cmp	r1, #45	@ 0x2d
 8006c90:	d1ca      	bne.n	8006c28 <_strtod_l+0x30>
 8006c92:	2101      	movs	r1, #1
 8006c94:	910e      	str	r1, [sp, #56]	@ 0x38
 8006c96:	1c51      	adds	r1, r2, #1
 8006c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c9a:	7852      	ldrb	r2, [r2, #1]
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	d1c5      	bne.n	8006c2c <_strtod_l+0x34>
 8006ca0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f040 8570 	bne.w	800778a <_strtod_l+0xb92>
 8006caa:	4652      	mov	r2, sl
 8006cac:	465b      	mov	r3, fp
 8006cae:	e7e5      	b.n	8006c7c <_strtod_l+0x84>
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	e7ef      	b.n	8006c94 <_strtod_l+0x9c>
 8006cb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006cb6:	b13a      	cbz	r2, 8006cc8 <_strtod_l+0xd0>
 8006cb8:	2135      	movs	r1, #53	@ 0x35
 8006cba:	a81c      	add	r0, sp, #112	@ 0x70
 8006cbc:	f7ff ff3a 	bl	8006b34 <__copybits>
 8006cc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cc2:	9805      	ldr	r0, [sp, #20]
 8006cc4:	f7ff fb10 	bl	80062e8 <_Bfree>
 8006cc8:	3e01      	subs	r6, #1
 8006cca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006ccc:	2e04      	cmp	r6, #4
 8006cce:	d806      	bhi.n	8006cde <_strtod_l+0xe6>
 8006cd0:	e8df f006 	tbb	[pc, r6]
 8006cd4:	201d0314 	.word	0x201d0314
 8006cd8:	14          	.byte	0x14
 8006cd9:	00          	.byte	0x00
 8006cda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006cde:	05e1      	lsls	r1, r4, #23
 8006ce0:	bf48      	it	mi
 8006ce2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006cea:	0d1b      	lsrs	r3, r3, #20
 8006cec:	051b      	lsls	r3, r3, #20
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1bb      	bne.n	8006c6a <_strtod_l+0x72>
 8006cf2:	f7fe fb2d 	bl	8005350 <__errno>
 8006cf6:	2322      	movs	r3, #34	@ 0x22
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	e7b6      	b.n	8006c6a <_strtod_l+0x72>
 8006cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006d00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006d04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d0c:	e7e7      	b.n	8006cde <_strtod_l+0xe6>
 8006d0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006e90 <_strtod_l+0x298>
 8006d12:	e7e4      	b.n	8006cde <_strtod_l+0xe6>
 8006d14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006d18:	f04f 3aff 	mov.w	sl, #4294967295
 8006d1c:	e7df      	b.n	8006cde <_strtod_l+0xe6>
 8006d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b30      	cmp	r3, #48	@ 0x30
 8006d28:	d0f9      	beq.n	8006d1e <_strtod_l+0x126>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d09d      	beq.n	8006c6a <_strtod_l+0x72>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	2700      	movs	r7, #0
 8006d32:	9308      	str	r3, [sp, #32]
 8006d34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d36:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006d3a:	46b9      	mov	r9, r7
 8006d3c:	220a      	movs	r2, #10
 8006d3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006d40:	7805      	ldrb	r5, [r0, #0]
 8006d42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006d46:	b2d9      	uxtb	r1, r3
 8006d48:	2909      	cmp	r1, #9
 8006d4a:	d928      	bls.n	8006d9e <_strtod_l+0x1a6>
 8006d4c:	494f      	ldr	r1, [pc, #316]	@ (8006e8c <_strtod_l+0x294>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f000 ffbc 	bl	8007ccc <strncmp>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d032      	beq.n	8006dbe <_strtod_l+0x1c6>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	462a      	mov	r2, r5
 8006d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d5e:	464d      	mov	r5, r9
 8006d60:	4603      	mov	r3, r0
 8006d62:	2a65      	cmp	r2, #101	@ 0x65
 8006d64:	d001      	beq.n	8006d6a <_strtod_l+0x172>
 8006d66:	2a45      	cmp	r2, #69	@ 0x45
 8006d68:	d114      	bne.n	8006d94 <_strtod_l+0x19c>
 8006d6a:	b91d      	cbnz	r5, 8006d74 <_strtod_l+0x17c>
 8006d6c:	9a08      	ldr	r2, [sp, #32]
 8006d6e:	4302      	orrs	r2, r0
 8006d70:	d096      	beq.n	8006ca0 <_strtod_l+0xa8>
 8006d72:	2500      	movs	r5, #0
 8006d74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006d76:	1c62      	adds	r2, r4, #1
 8006d78:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d7a:	7862      	ldrb	r2, [r4, #1]
 8006d7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8006d7e:	d07a      	beq.n	8006e76 <_strtod_l+0x27e>
 8006d80:	2a2d      	cmp	r2, #45	@ 0x2d
 8006d82:	d07e      	beq.n	8006e82 <_strtod_l+0x28a>
 8006d84:	f04f 0c00 	mov.w	ip, #0
 8006d88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006d8c:	2909      	cmp	r1, #9
 8006d8e:	f240 8085 	bls.w	8006e9c <_strtod_l+0x2a4>
 8006d92:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d94:	f04f 0800 	mov.w	r8, #0
 8006d98:	e0a5      	b.n	8006ee6 <_strtod_l+0x2ee>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e7c8      	b.n	8006d30 <_strtod_l+0x138>
 8006d9e:	f1b9 0f08 	cmp.w	r9, #8
 8006da2:	bfd8      	it	le
 8006da4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006da6:	f100 0001 	add.w	r0, r0, #1
 8006daa:	bfda      	itte	le
 8006dac:	fb02 3301 	mlale	r3, r2, r1, r3
 8006db0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006db2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006db6:	f109 0901 	add.w	r9, r9, #1
 8006dba:	9019      	str	r0, [sp, #100]	@ 0x64
 8006dbc:	e7bf      	b.n	8006d3e <_strtod_l+0x146>
 8006dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dc4:	785a      	ldrb	r2, [r3, #1]
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	d03b      	beq.n	8006e44 <_strtod_l+0x24c>
 8006dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006dce:	464d      	mov	r5, r9
 8006dd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d912      	bls.n	8006dfe <_strtod_l+0x206>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e7c2      	b.n	8006d62 <_strtod_l+0x16a>
 8006ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006de2:	785a      	ldrb	r2, [r3, #1]
 8006de4:	3001      	adds	r0, #1
 8006de6:	2a30      	cmp	r2, #48	@ 0x30
 8006de8:	d0f8      	beq.n	8006ddc <_strtod_l+0x1e4>
 8006dea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	f200 84d2 	bhi.w	8007798 <_strtod_l+0xba0>
 8006df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006df6:	900a      	str	r0, [sp, #40]	@ 0x28
 8006df8:	2000      	movs	r0, #0
 8006dfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	3a30      	subs	r2, #48	@ 0x30
 8006e00:	f100 0301 	add.w	r3, r0, #1
 8006e04:	d018      	beq.n	8006e38 <_strtod_l+0x240>
 8006e06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e08:	4419      	add	r1, r3
 8006e0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006e0c:	462e      	mov	r6, r5
 8006e0e:	f04f 0e0a 	mov.w	lr, #10
 8006e12:	1c71      	adds	r1, r6, #1
 8006e14:	eba1 0c05 	sub.w	ip, r1, r5
 8006e18:	4563      	cmp	r3, ip
 8006e1a:	dc15      	bgt.n	8006e48 <_strtod_l+0x250>
 8006e1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006e20:	182b      	adds	r3, r5, r0
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	f105 0501 	add.w	r5, r5, #1
 8006e28:	4405      	add	r5, r0
 8006e2a:	dc1a      	bgt.n	8006e62 <_strtod_l+0x26a>
 8006e2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e2e:	230a      	movs	r3, #10
 8006e30:	fb03 2301 	mla	r3, r3, r1, r2
 8006e34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e36:	2300      	movs	r3, #0
 8006e38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e3a:	1c51      	adds	r1, r2, #1
 8006e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e3e:	7852      	ldrb	r2, [r2, #1]
 8006e40:	4618      	mov	r0, r3
 8006e42:	e7c5      	b.n	8006dd0 <_strtod_l+0x1d8>
 8006e44:	4648      	mov	r0, r9
 8006e46:	e7ce      	b.n	8006de6 <_strtod_l+0x1ee>
 8006e48:	2e08      	cmp	r6, #8
 8006e4a:	dc05      	bgt.n	8006e58 <_strtod_l+0x260>
 8006e4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006e4e:	fb0e f606 	mul.w	r6, lr, r6
 8006e52:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006e54:	460e      	mov	r6, r1
 8006e56:	e7dc      	b.n	8006e12 <_strtod_l+0x21a>
 8006e58:	2910      	cmp	r1, #16
 8006e5a:	bfd8      	it	le
 8006e5c:	fb0e f707 	mulle.w	r7, lr, r7
 8006e60:	e7f8      	b.n	8006e54 <_strtod_l+0x25c>
 8006e62:	2b0f      	cmp	r3, #15
 8006e64:	bfdc      	itt	le
 8006e66:	230a      	movle	r3, #10
 8006e68:	fb03 2707 	mlale	r7, r3, r7, r2
 8006e6c:	e7e3      	b.n	8006e36 <_strtod_l+0x23e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e72:	2301      	movs	r3, #1
 8006e74:	e77a      	b.n	8006d6c <_strtod_l+0x174>
 8006e76:	f04f 0c00 	mov.w	ip, #0
 8006e7a:	1ca2      	adds	r2, r4, #2
 8006e7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e7e:	78a2      	ldrb	r2, [r4, #2]
 8006e80:	e782      	b.n	8006d88 <_strtod_l+0x190>
 8006e82:	f04f 0c01 	mov.w	ip, #1
 8006e86:	e7f8      	b.n	8006e7a <_strtod_l+0x282>
 8006e88:	08008d64 	.word	0x08008d64
 8006e8c:	08008b97 	.word	0x08008b97
 8006e90:	7ff00000 	.word	0x7ff00000
 8006e94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e96:	1c51      	adds	r1, r2, #1
 8006e98:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e9a:	7852      	ldrb	r2, [r2, #1]
 8006e9c:	2a30      	cmp	r2, #48	@ 0x30
 8006e9e:	d0f9      	beq.n	8006e94 <_strtod_l+0x29c>
 8006ea0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006ea4:	2908      	cmp	r1, #8
 8006ea6:	f63f af75 	bhi.w	8006d94 <_strtod_l+0x19c>
 8006eaa:	3a30      	subs	r2, #48	@ 0x30
 8006eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006eb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006eb2:	f04f 080a 	mov.w	r8, #10
 8006eb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006eb8:	1c56      	adds	r6, r2, #1
 8006eba:	9619      	str	r6, [sp, #100]	@ 0x64
 8006ebc:	7852      	ldrb	r2, [r2, #1]
 8006ebe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006ec2:	f1be 0f09 	cmp.w	lr, #9
 8006ec6:	d939      	bls.n	8006f3c <_strtod_l+0x344>
 8006ec8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006eca:	1a76      	subs	r6, r6, r1
 8006ecc:	2e08      	cmp	r6, #8
 8006ece:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006ed2:	dc03      	bgt.n	8006edc <_strtod_l+0x2e4>
 8006ed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ed6:	4588      	cmp	r8, r1
 8006ed8:	bfa8      	it	ge
 8006eda:	4688      	movge	r8, r1
 8006edc:	f1bc 0f00 	cmp.w	ip, #0
 8006ee0:	d001      	beq.n	8006ee6 <_strtod_l+0x2ee>
 8006ee2:	f1c8 0800 	rsb	r8, r8, #0
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	d14e      	bne.n	8006f88 <_strtod_l+0x390>
 8006eea:	9908      	ldr	r1, [sp, #32]
 8006eec:	4308      	orrs	r0, r1
 8006eee:	f47f aebc 	bne.w	8006c6a <_strtod_l+0x72>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f47f aed4 	bne.w	8006ca0 <_strtod_l+0xa8>
 8006ef8:	2a69      	cmp	r2, #105	@ 0x69
 8006efa:	d028      	beq.n	8006f4e <_strtod_l+0x356>
 8006efc:	dc25      	bgt.n	8006f4a <_strtod_l+0x352>
 8006efe:	2a49      	cmp	r2, #73	@ 0x49
 8006f00:	d025      	beq.n	8006f4e <_strtod_l+0x356>
 8006f02:	2a4e      	cmp	r2, #78	@ 0x4e
 8006f04:	f47f aecc 	bne.w	8006ca0 <_strtod_l+0xa8>
 8006f08:	499a      	ldr	r1, [pc, #616]	@ (8007174 <_strtod_l+0x57c>)
 8006f0a:	a819      	add	r0, sp, #100	@ 0x64
 8006f0c:	f001 f9d4 	bl	80082b8 <__match>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f43f aec5 	beq.w	8006ca0 <_strtod_l+0xa8>
 8006f16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b28      	cmp	r3, #40	@ 0x28
 8006f1c:	d12e      	bne.n	8006f7c <_strtod_l+0x384>
 8006f1e:	4996      	ldr	r1, [pc, #600]	@ (8007178 <_strtod_l+0x580>)
 8006f20:	aa1c      	add	r2, sp, #112	@ 0x70
 8006f22:	a819      	add	r0, sp, #100	@ 0x64
 8006f24:	f001 f9dc 	bl	80082e0 <__hexnan>
 8006f28:	2805      	cmp	r0, #5
 8006f2a:	d127      	bne.n	8006f7c <_strtod_l+0x384>
 8006f2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006f32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006f36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006f3a:	e696      	b.n	8006c6a <_strtod_l+0x72>
 8006f3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f3e:	fb08 2101 	mla	r1, r8, r1, r2
 8006f42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f48:	e7b5      	b.n	8006eb6 <_strtod_l+0x2be>
 8006f4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006f4c:	e7da      	b.n	8006f04 <_strtod_l+0x30c>
 8006f4e:	498b      	ldr	r1, [pc, #556]	@ (800717c <_strtod_l+0x584>)
 8006f50:	a819      	add	r0, sp, #100	@ 0x64
 8006f52:	f001 f9b1 	bl	80082b8 <__match>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f aea2 	beq.w	8006ca0 <_strtod_l+0xa8>
 8006f5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f5e:	4988      	ldr	r1, [pc, #544]	@ (8007180 <_strtod_l+0x588>)
 8006f60:	3b01      	subs	r3, #1
 8006f62:	a819      	add	r0, sp, #100	@ 0x64
 8006f64:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f66:	f001 f9a7 	bl	80082b8 <__match>
 8006f6a:	b910      	cbnz	r0, 8006f72 <_strtod_l+0x37a>
 8006f6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f6e:	3301      	adds	r3, #1
 8006f70:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007190 <_strtod_l+0x598>
 8006f76:	f04f 0a00 	mov.w	sl, #0
 8006f7a:	e676      	b.n	8006c6a <_strtod_l+0x72>
 8006f7c:	4881      	ldr	r0, [pc, #516]	@ (8007184 <_strtod_l+0x58c>)
 8006f7e:	f000 fed7 	bl	8007d30 <nan>
 8006f82:	ec5b ab10 	vmov	sl, fp, d0
 8006f86:	e670      	b.n	8006c6a <_strtod_l+0x72>
 8006f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006f8c:	eba8 0303 	sub.w	r3, r8, r3
 8006f90:	f1b9 0f00 	cmp.w	r9, #0
 8006f94:	bf08      	it	eq
 8006f96:	46a9      	moveq	r9, r5
 8006f98:	2d10      	cmp	r5, #16
 8006f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f9c:	462c      	mov	r4, r5
 8006f9e:	bfa8      	it	ge
 8006fa0:	2410      	movge	r4, #16
 8006fa2:	f7f9 fab7 	bl	8000514 <__aeabi_ui2d>
 8006fa6:	2d09      	cmp	r5, #9
 8006fa8:	4682      	mov	sl, r0
 8006faa:	468b      	mov	fp, r1
 8006fac:	dc13      	bgt.n	8006fd6 <_strtod_l+0x3de>
 8006fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f43f ae5a 	beq.w	8006c6a <_strtod_l+0x72>
 8006fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb8:	dd78      	ble.n	80070ac <_strtod_l+0x4b4>
 8006fba:	2b16      	cmp	r3, #22
 8006fbc:	dc5f      	bgt.n	800707e <_strtod_l+0x486>
 8006fbe:	4972      	ldr	r1, [pc, #456]	@ (8007188 <_strtod_l+0x590>)
 8006fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc8:	4652      	mov	r2, sl
 8006fca:	465b      	mov	r3, fp
 8006fcc:	f7f9 fb1c 	bl	8000608 <__aeabi_dmul>
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	468b      	mov	fp, r1
 8006fd4:	e649      	b.n	8006c6a <_strtod_l+0x72>
 8006fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8007188 <_strtod_l+0x590>)
 8006fd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006fe0:	f7f9 fb12 	bl	8000608 <__aeabi_dmul>
 8006fe4:	4682      	mov	sl, r0
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	468b      	mov	fp, r1
 8006fea:	f7f9 fa93 	bl	8000514 <__aeabi_ui2d>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	f7f9 f951 	bl	800029c <__adddf3>
 8006ffa:	2d0f      	cmp	r5, #15
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	468b      	mov	fp, r1
 8007000:	ddd5      	ble.n	8006fae <_strtod_l+0x3b6>
 8007002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007004:	1b2c      	subs	r4, r5, r4
 8007006:	441c      	add	r4, r3
 8007008:	2c00      	cmp	r4, #0
 800700a:	f340 8093 	ble.w	8007134 <_strtod_l+0x53c>
 800700e:	f014 030f 	ands.w	r3, r4, #15
 8007012:	d00a      	beq.n	800702a <_strtod_l+0x432>
 8007014:	495c      	ldr	r1, [pc, #368]	@ (8007188 <_strtod_l+0x590>)
 8007016:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800701a:	4652      	mov	r2, sl
 800701c:	465b      	mov	r3, fp
 800701e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007022:	f7f9 faf1 	bl	8000608 <__aeabi_dmul>
 8007026:	4682      	mov	sl, r0
 8007028:	468b      	mov	fp, r1
 800702a:	f034 040f 	bics.w	r4, r4, #15
 800702e:	d073      	beq.n	8007118 <_strtod_l+0x520>
 8007030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007034:	dd49      	ble.n	80070ca <_strtod_l+0x4d2>
 8007036:	2400      	movs	r4, #0
 8007038:	46a0      	mov	r8, r4
 800703a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800703c:	46a1      	mov	r9, r4
 800703e:	9a05      	ldr	r2, [sp, #20]
 8007040:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007190 <_strtod_l+0x598>
 8007044:	2322      	movs	r3, #34	@ 0x22
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	f04f 0a00 	mov.w	sl, #0
 800704c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800704e:	2b00      	cmp	r3, #0
 8007050:	f43f ae0b 	beq.w	8006c6a <_strtod_l+0x72>
 8007054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007056:	9805      	ldr	r0, [sp, #20]
 8007058:	f7ff f946 	bl	80062e8 <_Bfree>
 800705c:	9805      	ldr	r0, [sp, #20]
 800705e:	4649      	mov	r1, r9
 8007060:	f7ff f942 	bl	80062e8 <_Bfree>
 8007064:	9805      	ldr	r0, [sp, #20]
 8007066:	4641      	mov	r1, r8
 8007068:	f7ff f93e 	bl	80062e8 <_Bfree>
 800706c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800706e:	9805      	ldr	r0, [sp, #20]
 8007070:	f7ff f93a 	bl	80062e8 <_Bfree>
 8007074:	9805      	ldr	r0, [sp, #20]
 8007076:	4621      	mov	r1, r4
 8007078:	f7ff f936 	bl	80062e8 <_Bfree>
 800707c:	e5f5      	b.n	8006c6a <_strtod_l+0x72>
 800707e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007080:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007084:	4293      	cmp	r3, r2
 8007086:	dbbc      	blt.n	8007002 <_strtod_l+0x40a>
 8007088:	4c3f      	ldr	r4, [pc, #252]	@ (8007188 <_strtod_l+0x590>)
 800708a:	f1c5 050f 	rsb	r5, r5, #15
 800708e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007092:	4652      	mov	r2, sl
 8007094:	465b      	mov	r3, fp
 8007096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800709a:	f7f9 fab5 	bl	8000608 <__aeabi_dmul>
 800709e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a0:	1b5d      	subs	r5, r3, r5
 80070a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80070a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80070aa:	e78f      	b.n	8006fcc <_strtod_l+0x3d4>
 80070ac:	3316      	adds	r3, #22
 80070ae:	dba8      	blt.n	8007002 <_strtod_l+0x40a>
 80070b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b2:	eba3 0808 	sub.w	r8, r3, r8
 80070b6:	4b34      	ldr	r3, [pc, #208]	@ (8007188 <_strtod_l+0x590>)
 80070b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80070bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80070c0:	4650      	mov	r0, sl
 80070c2:	4659      	mov	r1, fp
 80070c4:	f7f9 fbca 	bl	800085c <__aeabi_ddiv>
 80070c8:	e782      	b.n	8006fd0 <_strtod_l+0x3d8>
 80070ca:	2300      	movs	r3, #0
 80070cc:	4f2f      	ldr	r7, [pc, #188]	@ (800718c <_strtod_l+0x594>)
 80070ce:	1124      	asrs	r4, r4, #4
 80070d0:	4650      	mov	r0, sl
 80070d2:	4659      	mov	r1, fp
 80070d4:	461e      	mov	r6, r3
 80070d6:	2c01      	cmp	r4, #1
 80070d8:	dc21      	bgt.n	800711e <_strtod_l+0x526>
 80070da:	b10b      	cbz	r3, 80070e0 <_strtod_l+0x4e8>
 80070dc:	4682      	mov	sl, r0
 80070de:	468b      	mov	fp, r1
 80070e0:	492a      	ldr	r1, [pc, #168]	@ (800718c <_strtod_l+0x594>)
 80070e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80070e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80070ea:	4652      	mov	r2, sl
 80070ec:	465b      	mov	r3, fp
 80070ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f2:	f7f9 fa89 	bl	8000608 <__aeabi_dmul>
 80070f6:	4b26      	ldr	r3, [pc, #152]	@ (8007190 <_strtod_l+0x598>)
 80070f8:	460a      	mov	r2, r1
 80070fa:	400b      	ands	r3, r1
 80070fc:	4925      	ldr	r1, [pc, #148]	@ (8007194 <_strtod_l+0x59c>)
 80070fe:	428b      	cmp	r3, r1
 8007100:	4682      	mov	sl, r0
 8007102:	d898      	bhi.n	8007036 <_strtod_l+0x43e>
 8007104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007108:	428b      	cmp	r3, r1
 800710a:	bf86      	itte	hi
 800710c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007198 <_strtod_l+0x5a0>
 8007110:	f04f 3aff 	movhi.w	sl, #4294967295
 8007114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007118:	2300      	movs	r3, #0
 800711a:	9308      	str	r3, [sp, #32]
 800711c:	e076      	b.n	800720c <_strtod_l+0x614>
 800711e:	07e2      	lsls	r2, r4, #31
 8007120:	d504      	bpl.n	800712c <_strtod_l+0x534>
 8007122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007126:	f7f9 fa6f 	bl	8000608 <__aeabi_dmul>
 800712a:	2301      	movs	r3, #1
 800712c:	3601      	adds	r6, #1
 800712e:	1064      	asrs	r4, r4, #1
 8007130:	3708      	adds	r7, #8
 8007132:	e7d0      	b.n	80070d6 <_strtod_l+0x4de>
 8007134:	d0f0      	beq.n	8007118 <_strtod_l+0x520>
 8007136:	4264      	negs	r4, r4
 8007138:	f014 020f 	ands.w	r2, r4, #15
 800713c:	d00a      	beq.n	8007154 <_strtod_l+0x55c>
 800713e:	4b12      	ldr	r3, [pc, #72]	@ (8007188 <_strtod_l+0x590>)
 8007140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007144:	4650      	mov	r0, sl
 8007146:	4659      	mov	r1, fp
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 fb86 	bl	800085c <__aeabi_ddiv>
 8007150:	4682      	mov	sl, r0
 8007152:	468b      	mov	fp, r1
 8007154:	1124      	asrs	r4, r4, #4
 8007156:	d0df      	beq.n	8007118 <_strtod_l+0x520>
 8007158:	2c1f      	cmp	r4, #31
 800715a:	dd1f      	ble.n	800719c <_strtod_l+0x5a4>
 800715c:	2400      	movs	r4, #0
 800715e:	46a0      	mov	r8, r4
 8007160:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007162:	46a1      	mov	r9, r4
 8007164:	9a05      	ldr	r2, [sp, #20]
 8007166:	2322      	movs	r3, #34	@ 0x22
 8007168:	f04f 0a00 	mov.w	sl, #0
 800716c:	f04f 0b00 	mov.w	fp, #0
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e76b      	b.n	800704c <_strtod_l+0x454>
 8007174:	08008a85 	.word	0x08008a85
 8007178:	08008d50 	.word	0x08008d50
 800717c:	08008a7d 	.word	0x08008a7d
 8007180:	08008ab4 	.word	0x08008ab4
 8007184:	08008bed 	.word	0x08008bed
 8007188:	08008c88 	.word	0x08008c88
 800718c:	08008c60 	.word	0x08008c60
 8007190:	7ff00000 	.word	0x7ff00000
 8007194:	7ca00000 	.word	0x7ca00000
 8007198:	7fefffff 	.word	0x7fefffff
 800719c:	f014 0310 	ands.w	r3, r4, #16
 80071a0:	bf18      	it	ne
 80071a2:	236a      	movne	r3, #106	@ 0x6a
 80071a4:	4ea9      	ldr	r6, [pc, #676]	@ (800744c <_strtod_l+0x854>)
 80071a6:	9308      	str	r3, [sp, #32]
 80071a8:	4650      	mov	r0, sl
 80071aa:	4659      	mov	r1, fp
 80071ac:	2300      	movs	r3, #0
 80071ae:	07e7      	lsls	r7, r4, #31
 80071b0:	d504      	bpl.n	80071bc <_strtod_l+0x5c4>
 80071b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071b6:	f7f9 fa27 	bl	8000608 <__aeabi_dmul>
 80071ba:	2301      	movs	r3, #1
 80071bc:	1064      	asrs	r4, r4, #1
 80071be:	f106 0608 	add.w	r6, r6, #8
 80071c2:	d1f4      	bne.n	80071ae <_strtod_l+0x5b6>
 80071c4:	b10b      	cbz	r3, 80071ca <_strtod_l+0x5d2>
 80071c6:	4682      	mov	sl, r0
 80071c8:	468b      	mov	fp, r1
 80071ca:	9b08      	ldr	r3, [sp, #32]
 80071cc:	b1b3      	cbz	r3, 80071fc <_strtod_l+0x604>
 80071ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80071d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	4659      	mov	r1, fp
 80071da:	dd0f      	ble.n	80071fc <_strtod_l+0x604>
 80071dc:	2b1f      	cmp	r3, #31
 80071de:	dd56      	ble.n	800728e <_strtod_l+0x696>
 80071e0:	2b34      	cmp	r3, #52	@ 0x34
 80071e2:	bfde      	ittt	le
 80071e4:	f04f 33ff 	movle.w	r3, #4294967295
 80071e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80071ec:	4093      	lslle	r3, r2
 80071ee:	f04f 0a00 	mov.w	sl, #0
 80071f2:	bfcc      	ite	gt
 80071f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80071f8:	ea03 0b01 	andle.w	fp, r3, r1
 80071fc:	2200      	movs	r2, #0
 80071fe:	2300      	movs	r3, #0
 8007200:	4650      	mov	r0, sl
 8007202:	4659      	mov	r1, fp
 8007204:	f7f9 fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007208:	2800      	cmp	r0, #0
 800720a:	d1a7      	bne.n	800715c <_strtod_l+0x564>
 800720c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007212:	9805      	ldr	r0, [sp, #20]
 8007214:	462b      	mov	r3, r5
 8007216:	464a      	mov	r2, r9
 8007218:	f7ff f8ce 	bl	80063b8 <__s2b>
 800721c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f af09 	beq.w	8007036 <_strtod_l+0x43e>
 8007224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007228:	2a00      	cmp	r2, #0
 800722a:	eba3 0308 	sub.w	r3, r3, r8
 800722e:	bfa8      	it	ge
 8007230:	2300      	movge	r3, #0
 8007232:	9312      	str	r3, [sp, #72]	@ 0x48
 8007234:	2400      	movs	r4, #0
 8007236:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800723a:	9316      	str	r3, [sp, #88]	@ 0x58
 800723c:	46a0      	mov	r8, r4
 800723e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007240:	9805      	ldr	r0, [sp, #20]
 8007242:	6859      	ldr	r1, [r3, #4]
 8007244:	f7ff f810 	bl	8006268 <_Balloc>
 8007248:	4681      	mov	r9, r0
 800724a:	2800      	cmp	r0, #0
 800724c:	f43f aef7 	beq.w	800703e <_strtod_l+0x446>
 8007250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	3202      	adds	r2, #2
 8007256:	f103 010c 	add.w	r1, r3, #12
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	300c      	adds	r0, #12
 800725e:	f000 fd57 	bl	8007d10 <memcpy>
 8007262:	ec4b ab10 	vmov	d0, sl, fp
 8007266:	9805      	ldr	r0, [sp, #20]
 8007268:	aa1c      	add	r2, sp, #112	@ 0x70
 800726a:	a91b      	add	r1, sp, #108	@ 0x6c
 800726c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007270:	f7ff fbd6 	bl	8006a20 <__d2b>
 8007274:	901a      	str	r0, [sp, #104]	@ 0x68
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f aee1 	beq.w	800703e <_strtod_l+0x446>
 800727c:	9805      	ldr	r0, [sp, #20]
 800727e:	2101      	movs	r1, #1
 8007280:	f7ff f930 	bl	80064e4 <__i2b>
 8007284:	4680      	mov	r8, r0
 8007286:	b948      	cbnz	r0, 800729c <_strtod_l+0x6a4>
 8007288:	f04f 0800 	mov.w	r8, #0
 800728c:	e6d7      	b.n	800703e <_strtod_l+0x446>
 800728e:	f04f 32ff 	mov.w	r2, #4294967295
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	ea03 0a0a 	and.w	sl, r3, sl
 800729a:	e7af      	b.n	80071fc <_strtod_l+0x604>
 800729c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800729e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	bfab      	itete	ge
 80072a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80072a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80072a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80072aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80072ac:	bfac      	ite	ge
 80072ae:	18ef      	addge	r7, r5, r3
 80072b0:	1b5e      	sublt	r6, r3, r5
 80072b2:	9b08      	ldr	r3, [sp, #32]
 80072b4:	1aed      	subs	r5, r5, r3
 80072b6:	4415      	add	r5, r2
 80072b8:	4b65      	ldr	r3, [pc, #404]	@ (8007450 <_strtod_l+0x858>)
 80072ba:	3d01      	subs	r5, #1
 80072bc:	429d      	cmp	r5, r3
 80072be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80072c2:	da50      	bge.n	8007366 <_strtod_l+0x76e>
 80072c4:	1b5b      	subs	r3, r3, r5
 80072c6:	2b1f      	cmp	r3, #31
 80072c8:	eba2 0203 	sub.w	r2, r2, r3
 80072cc:	f04f 0101 	mov.w	r1, #1
 80072d0:	dc3d      	bgt.n	800734e <_strtod_l+0x756>
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
 80072d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072d8:	2300      	movs	r3, #0
 80072da:	9310      	str	r3, [sp, #64]	@ 0x40
 80072dc:	18bd      	adds	r5, r7, r2
 80072de:	9b08      	ldr	r3, [sp, #32]
 80072e0:	42af      	cmp	r7, r5
 80072e2:	4416      	add	r6, r2
 80072e4:	441e      	add	r6, r3
 80072e6:	463b      	mov	r3, r7
 80072e8:	bfa8      	it	ge
 80072ea:	462b      	movge	r3, r5
 80072ec:	42b3      	cmp	r3, r6
 80072ee:	bfa8      	it	ge
 80072f0:	4633      	movge	r3, r6
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfc2      	ittt	gt
 80072f6:	1aed      	subgt	r5, r5, r3
 80072f8:	1af6      	subgt	r6, r6, r3
 80072fa:	1aff      	subgt	r7, r7, r3
 80072fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dd16      	ble.n	8007330 <_strtod_l+0x738>
 8007302:	4641      	mov	r1, r8
 8007304:	9805      	ldr	r0, [sp, #20]
 8007306:	461a      	mov	r2, r3
 8007308:	f7ff f9a4 	bl	8006654 <__pow5mult>
 800730c:	4680      	mov	r8, r0
 800730e:	2800      	cmp	r0, #0
 8007310:	d0ba      	beq.n	8007288 <_strtod_l+0x690>
 8007312:	4601      	mov	r1, r0
 8007314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007316:	9805      	ldr	r0, [sp, #20]
 8007318:	f7ff f8fa 	bl	8006510 <__multiply>
 800731c:	900a      	str	r0, [sp, #40]	@ 0x28
 800731e:	2800      	cmp	r0, #0
 8007320:	f43f ae8d 	beq.w	800703e <_strtod_l+0x446>
 8007324:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007326:	9805      	ldr	r0, [sp, #20]
 8007328:	f7fe ffde 	bl	80062e8 <_Bfree>
 800732c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800732e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007330:	2d00      	cmp	r5, #0
 8007332:	dc1d      	bgt.n	8007370 <_strtod_l+0x778>
 8007334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd23      	ble.n	8007382 <_strtod_l+0x78a>
 800733a:	4649      	mov	r1, r9
 800733c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800733e:	9805      	ldr	r0, [sp, #20]
 8007340:	f7ff f988 	bl	8006654 <__pow5mult>
 8007344:	4681      	mov	r9, r0
 8007346:	b9e0      	cbnz	r0, 8007382 <_strtod_l+0x78a>
 8007348:	f04f 0900 	mov.w	r9, #0
 800734c:	e677      	b.n	800703e <_strtod_l+0x446>
 800734e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007352:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007356:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800735a:	35e2      	adds	r5, #226	@ 0xe2
 800735c:	fa01 f305 	lsl.w	r3, r1, r5
 8007360:	9310      	str	r3, [sp, #64]	@ 0x40
 8007362:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007364:	e7ba      	b.n	80072dc <_strtod_l+0x6e4>
 8007366:	2300      	movs	r3, #0
 8007368:	9310      	str	r3, [sp, #64]	@ 0x40
 800736a:	2301      	movs	r3, #1
 800736c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800736e:	e7b5      	b.n	80072dc <_strtod_l+0x6e4>
 8007370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007372:	9805      	ldr	r0, [sp, #20]
 8007374:	462a      	mov	r2, r5
 8007376:	f7ff f9c7 	bl	8006708 <__lshift>
 800737a:	901a      	str	r0, [sp, #104]	@ 0x68
 800737c:	2800      	cmp	r0, #0
 800737e:	d1d9      	bne.n	8007334 <_strtod_l+0x73c>
 8007380:	e65d      	b.n	800703e <_strtod_l+0x446>
 8007382:	2e00      	cmp	r6, #0
 8007384:	dd07      	ble.n	8007396 <_strtod_l+0x79e>
 8007386:	4649      	mov	r1, r9
 8007388:	9805      	ldr	r0, [sp, #20]
 800738a:	4632      	mov	r2, r6
 800738c:	f7ff f9bc 	bl	8006708 <__lshift>
 8007390:	4681      	mov	r9, r0
 8007392:	2800      	cmp	r0, #0
 8007394:	d0d8      	beq.n	8007348 <_strtod_l+0x750>
 8007396:	2f00      	cmp	r7, #0
 8007398:	dd08      	ble.n	80073ac <_strtod_l+0x7b4>
 800739a:	4641      	mov	r1, r8
 800739c:	9805      	ldr	r0, [sp, #20]
 800739e:	463a      	mov	r2, r7
 80073a0:	f7ff f9b2 	bl	8006708 <__lshift>
 80073a4:	4680      	mov	r8, r0
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f43f ae49 	beq.w	800703e <_strtod_l+0x446>
 80073ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073ae:	9805      	ldr	r0, [sp, #20]
 80073b0:	464a      	mov	r2, r9
 80073b2:	f7ff fa31 	bl	8006818 <__mdiff>
 80073b6:	4604      	mov	r4, r0
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f43f ae40 	beq.w	800703e <_strtod_l+0x446>
 80073be:	68c3      	ldr	r3, [r0, #12]
 80073c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073c2:	2300      	movs	r3, #0
 80073c4:	60c3      	str	r3, [r0, #12]
 80073c6:	4641      	mov	r1, r8
 80073c8:	f7ff fa0a 	bl	80067e0 <__mcmp>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	da45      	bge.n	800745c <_strtod_l+0x864>
 80073d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073d2:	ea53 030a 	orrs.w	r3, r3, sl
 80073d6:	d16b      	bne.n	80074b0 <_strtod_l+0x8b8>
 80073d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d167      	bne.n	80074b0 <_strtod_l+0x8b8>
 80073e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073e4:	0d1b      	lsrs	r3, r3, #20
 80073e6:	051b      	lsls	r3, r3, #20
 80073e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073ec:	d960      	bls.n	80074b0 <_strtod_l+0x8b8>
 80073ee:	6963      	ldr	r3, [r4, #20]
 80073f0:	b913      	cbnz	r3, 80073f8 <_strtod_l+0x800>
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	dd5b      	ble.n	80074b0 <_strtod_l+0x8b8>
 80073f8:	4621      	mov	r1, r4
 80073fa:	2201      	movs	r2, #1
 80073fc:	9805      	ldr	r0, [sp, #20]
 80073fe:	f7ff f983 	bl	8006708 <__lshift>
 8007402:	4641      	mov	r1, r8
 8007404:	4604      	mov	r4, r0
 8007406:	f7ff f9eb 	bl	80067e0 <__mcmp>
 800740a:	2800      	cmp	r0, #0
 800740c:	dd50      	ble.n	80074b0 <_strtod_l+0x8b8>
 800740e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007412:	9a08      	ldr	r2, [sp, #32]
 8007414:	0d1b      	lsrs	r3, r3, #20
 8007416:	051b      	lsls	r3, r3, #20
 8007418:	2a00      	cmp	r2, #0
 800741a:	d06a      	beq.n	80074f2 <_strtod_l+0x8fa>
 800741c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007420:	d867      	bhi.n	80074f2 <_strtod_l+0x8fa>
 8007422:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007426:	f67f ae9d 	bls.w	8007164 <_strtod_l+0x56c>
 800742a:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <_strtod_l+0x85c>)
 800742c:	4650      	mov	r0, sl
 800742e:	4659      	mov	r1, fp
 8007430:	2200      	movs	r2, #0
 8007432:	f7f9 f8e9 	bl	8000608 <__aeabi_dmul>
 8007436:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <_strtod_l+0x860>)
 8007438:	400b      	ands	r3, r1
 800743a:	4682      	mov	sl, r0
 800743c:	468b      	mov	fp, r1
 800743e:	2b00      	cmp	r3, #0
 8007440:	f47f ae08 	bne.w	8007054 <_strtod_l+0x45c>
 8007444:	9a05      	ldr	r2, [sp, #20]
 8007446:	2322      	movs	r3, #34	@ 0x22
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e603      	b.n	8007054 <_strtod_l+0x45c>
 800744c:	08008d78 	.word	0x08008d78
 8007450:	fffffc02 	.word	0xfffffc02
 8007454:	39500000 	.word	0x39500000
 8007458:	7ff00000 	.word	0x7ff00000
 800745c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007460:	d165      	bne.n	800752e <_strtod_l+0x936>
 8007462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007468:	b35a      	cbz	r2, 80074c2 <_strtod_l+0x8ca>
 800746a:	4a9f      	ldr	r2, [pc, #636]	@ (80076e8 <_strtod_l+0xaf0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d12b      	bne.n	80074c8 <_strtod_l+0x8d0>
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	4651      	mov	r1, sl
 8007474:	b303      	cbz	r3, 80074b8 <_strtod_l+0x8c0>
 8007476:	4b9d      	ldr	r3, [pc, #628]	@ (80076ec <_strtod_l+0xaf4>)
 8007478:	465a      	mov	r2, fp
 800747a:	4013      	ands	r3, r2
 800747c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007480:	f04f 32ff 	mov.w	r2, #4294967295
 8007484:	d81b      	bhi.n	80074be <_strtod_l+0x8c6>
 8007486:	0d1b      	lsrs	r3, r3, #20
 8007488:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	4299      	cmp	r1, r3
 8007492:	d119      	bne.n	80074c8 <_strtod_l+0x8d0>
 8007494:	4b96      	ldr	r3, [pc, #600]	@ (80076f0 <_strtod_l+0xaf8>)
 8007496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007498:	429a      	cmp	r2, r3
 800749a:	d102      	bne.n	80074a2 <_strtod_l+0x8aa>
 800749c:	3101      	adds	r1, #1
 800749e:	f43f adce 	beq.w	800703e <_strtod_l+0x446>
 80074a2:	4b92      	ldr	r3, [pc, #584]	@ (80076ec <_strtod_l+0xaf4>)
 80074a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074a6:	401a      	ands	r2, r3
 80074a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80074ac:	f04f 0a00 	mov.w	sl, #0
 80074b0:	9b08      	ldr	r3, [sp, #32]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1b9      	bne.n	800742a <_strtod_l+0x832>
 80074b6:	e5cd      	b.n	8007054 <_strtod_l+0x45c>
 80074b8:	f04f 33ff 	mov.w	r3, #4294967295
 80074bc:	e7e8      	b.n	8007490 <_strtod_l+0x898>
 80074be:	4613      	mov	r3, r2
 80074c0:	e7e6      	b.n	8007490 <_strtod_l+0x898>
 80074c2:	ea53 030a 	orrs.w	r3, r3, sl
 80074c6:	d0a2      	beq.n	800740e <_strtod_l+0x816>
 80074c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074ca:	b1db      	cbz	r3, 8007504 <_strtod_l+0x90c>
 80074cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074ce:	4213      	tst	r3, r2
 80074d0:	d0ee      	beq.n	80074b0 <_strtod_l+0x8b8>
 80074d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074d4:	9a08      	ldr	r2, [sp, #32]
 80074d6:	4650      	mov	r0, sl
 80074d8:	4659      	mov	r1, fp
 80074da:	b1bb      	cbz	r3, 800750c <_strtod_l+0x914>
 80074dc:	f7ff fb6e 	bl	8006bbc <sulp>
 80074e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074e4:	ec53 2b10 	vmov	r2, r3, d0
 80074e8:	f7f8 fed8 	bl	800029c <__adddf3>
 80074ec:	4682      	mov	sl, r0
 80074ee:	468b      	mov	fp, r1
 80074f0:	e7de      	b.n	80074b0 <_strtod_l+0x8b8>
 80074f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80074f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074fe:	f04f 3aff 	mov.w	sl, #4294967295
 8007502:	e7d5      	b.n	80074b0 <_strtod_l+0x8b8>
 8007504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007506:	ea13 0f0a 	tst.w	r3, sl
 800750a:	e7e1      	b.n	80074d0 <_strtod_l+0x8d8>
 800750c:	f7ff fb56 	bl	8006bbc <sulp>
 8007510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007514:	ec53 2b10 	vmov	r2, r3, d0
 8007518:	f7f8 febe 	bl	8000298 <__aeabi_dsub>
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	4682      	mov	sl, r0
 8007522:	468b      	mov	fp, r1
 8007524:	f7f9 fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007528:	2800      	cmp	r0, #0
 800752a:	d0c1      	beq.n	80074b0 <_strtod_l+0x8b8>
 800752c:	e61a      	b.n	8007164 <_strtod_l+0x56c>
 800752e:	4641      	mov	r1, r8
 8007530:	4620      	mov	r0, r4
 8007532:	f7ff facd 	bl	8006ad0 <__ratio>
 8007536:	ec57 6b10 	vmov	r6, r7, d0
 800753a:	2200      	movs	r2, #0
 800753c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7f9 fadc 	bl	8000b00 <__aeabi_dcmple>
 8007548:	2800      	cmp	r0, #0
 800754a:	d06f      	beq.n	800762c <_strtod_l+0xa34>
 800754c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d17a      	bne.n	8007648 <_strtod_l+0xa50>
 8007552:	f1ba 0f00 	cmp.w	sl, #0
 8007556:	d158      	bne.n	800760a <_strtod_l+0xa12>
 8007558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800755e:	2b00      	cmp	r3, #0
 8007560:	d15a      	bne.n	8007618 <_strtod_l+0xa20>
 8007562:	4b64      	ldr	r3, [pc, #400]	@ (80076f4 <_strtod_l+0xafc>)
 8007564:	2200      	movs	r2, #0
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f9 fabf 	bl	8000aec <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d159      	bne.n	8007626 <_strtod_l+0xa2e>
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	4b60      	ldr	r3, [pc, #384]	@ (80076f8 <_strtod_l+0xb00>)
 8007578:	2200      	movs	r2, #0
 800757a:	f7f9 f845 	bl	8000608 <__aeabi_dmul>
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007586:	9606      	str	r6, [sp, #24]
 8007588:	9307      	str	r3, [sp, #28]
 800758a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800758e:	4d57      	ldr	r5, [pc, #348]	@ (80076ec <_strtod_l+0xaf4>)
 8007590:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007596:	401d      	ands	r5, r3
 8007598:	4b58      	ldr	r3, [pc, #352]	@ (80076fc <_strtod_l+0xb04>)
 800759a:	429d      	cmp	r5, r3
 800759c:	f040 80b2 	bne.w	8007704 <_strtod_l+0xb0c>
 80075a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80075a6:	ec4b ab10 	vmov	d0, sl, fp
 80075aa:	f7ff f9c9 	bl	8006940 <__ulp>
 80075ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075b2:	ec51 0b10 	vmov	r0, r1, d0
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	4652      	mov	r2, sl
 80075bc:	465b      	mov	r3, fp
 80075be:	f7f8 fe6d 	bl	800029c <__adddf3>
 80075c2:	460b      	mov	r3, r1
 80075c4:	4949      	ldr	r1, [pc, #292]	@ (80076ec <_strtod_l+0xaf4>)
 80075c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007700 <_strtod_l+0xb08>)
 80075c8:	4019      	ands	r1, r3
 80075ca:	4291      	cmp	r1, r2
 80075cc:	4682      	mov	sl, r0
 80075ce:	d942      	bls.n	8007656 <_strtod_l+0xa5e>
 80075d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80075d2:	4b47      	ldr	r3, [pc, #284]	@ (80076f0 <_strtod_l+0xaf8>)
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d103      	bne.n	80075e0 <_strtod_l+0x9e8>
 80075d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075da:	3301      	adds	r3, #1
 80075dc:	f43f ad2f 	beq.w	800703e <_strtod_l+0x446>
 80075e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80076f0 <_strtod_l+0xaf8>
 80075e4:	f04f 3aff 	mov.w	sl, #4294967295
 80075e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075ea:	9805      	ldr	r0, [sp, #20]
 80075ec:	f7fe fe7c 	bl	80062e8 <_Bfree>
 80075f0:	9805      	ldr	r0, [sp, #20]
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7fe fe78 	bl	80062e8 <_Bfree>
 80075f8:	9805      	ldr	r0, [sp, #20]
 80075fa:	4641      	mov	r1, r8
 80075fc:	f7fe fe74 	bl	80062e8 <_Bfree>
 8007600:	9805      	ldr	r0, [sp, #20]
 8007602:	4621      	mov	r1, r4
 8007604:	f7fe fe70 	bl	80062e8 <_Bfree>
 8007608:	e619      	b.n	800723e <_strtod_l+0x646>
 800760a:	f1ba 0f01 	cmp.w	sl, #1
 800760e:	d103      	bne.n	8007618 <_strtod_l+0xa20>
 8007610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	f43f ada6 	beq.w	8007164 <_strtod_l+0x56c>
 8007618:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80076c8 <_strtod_l+0xad0>
 800761c:	4f35      	ldr	r7, [pc, #212]	@ (80076f4 <_strtod_l+0xafc>)
 800761e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007622:	2600      	movs	r6, #0
 8007624:	e7b1      	b.n	800758a <_strtod_l+0x992>
 8007626:	4f34      	ldr	r7, [pc, #208]	@ (80076f8 <_strtod_l+0xb00>)
 8007628:	2600      	movs	r6, #0
 800762a:	e7aa      	b.n	8007582 <_strtod_l+0x98a>
 800762c:	4b32      	ldr	r3, [pc, #200]	@ (80076f8 <_strtod_l+0xb00>)
 800762e:	4630      	mov	r0, r6
 8007630:	4639      	mov	r1, r7
 8007632:	2200      	movs	r2, #0
 8007634:	f7f8 ffe8 	bl	8000608 <__aeabi_dmul>
 8007638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d09f      	beq.n	8007582 <_strtod_l+0x98a>
 8007642:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007646:	e7a0      	b.n	800758a <_strtod_l+0x992>
 8007648:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80076d0 <_strtod_l+0xad8>
 800764c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007650:	ec57 6b17 	vmov	r6, r7, d7
 8007654:	e799      	b.n	800758a <_strtod_l+0x992>
 8007656:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1c1      	bne.n	80075e8 <_strtod_l+0x9f0>
 8007664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007668:	0d1b      	lsrs	r3, r3, #20
 800766a:	051b      	lsls	r3, r3, #20
 800766c:	429d      	cmp	r5, r3
 800766e:	d1bb      	bne.n	80075e8 <_strtod_l+0x9f0>
 8007670:	4630      	mov	r0, r6
 8007672:	4639      	mov	r1, r7
 8007674:	f7f9 fb28 	bl	8000cc8 <__aeabi_d2lz>
 8007678:	f7f8 ff98 	bl	80005ac <__aeabi_l2d>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	f7f8 fe08 	bl	8000298 <__aeabi_dsub>
 8007688:	460b      	mov	r3, r1
 800768a:	4602      	mov	r2, r0
 800768c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007690:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007696:	ea46 060a 	orr.w	r6, r6, sl
 800769a:	431e      	orrs	r6, r3
 800769c:	d06f      	beq.n	800777e <_strtod_l+0xb86>
 800769e:	a30e      	add	r3, pc, #56	@ (adr r3, 80076d8 <_strtod_l+0xae0>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f9 fa22 	bl	8000aec <__aeabi_dcmplt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f47f acd3 	bne.w	8007054 <_strtod_l+0x45c>
 80076ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80076e0 <_strtod_l+0xae8>)
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076b8:	f7f9 fa36 	bl	8000b28 <__aeabi_dcmpgt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d093      	beq.n	80075e8 <_strtod_l+0x9f0>
 80076c0:	e4c8      	b.n	8007054 <_strtod_l+0x45c>
 80076c2:	bf00      	nop
 80076c4:	f3af 8000 	nop.w
 80076c8:	00000000 	.word	0x00000000
 80076cc:	bff00000 	.word	0xbff00000
 80076d0:	00000000 	.word	0x00000000
 80076d4:	3ff00000 	.word	0x3ff00000
 80076d8:	94a03595 	.word	0x94a03595
 80076dc:	3fdfffff 	.word	0x3fdfffff
 80076e0:	35afe535 	.word	0x35afe535
 80076e4:	3fe00000 	.word	0x3fe00000
 80076e8:	000fffff 	.word	0x000fffff
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	7fefffff 	.word	0x7fefffff
 80076f4:	3ff00000 	.word	0x3ff00000
 80076f8:	3fe00000 	.word	0x3fe00000
 80076fc:	7fe00000 	.word	0x7fe00000
 8007700:	7c9fffff 	.word	0x7c9fffff
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	b323      	cbz	r3, 8007752 <_strtod_l+0xb5a>
 8007708:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800770c:	d821      	bhi.n	8007752 <_strtod_l+0xb5a>
 800770e:	a328      	add	r3, pc, #160	@ (adr r3, 80077b0 <_strtod_l+0xbb8>)
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	4630      	mov	r0, r6
 8007716:	4639      	mov	r1, r7
 8007718:	f7f9 f9f2 	bl	8000b00 <__aeabi_dcmple>
 800771c:	b1a0      	cbz	r0, 8007748 <_strtod_l+0xb50>
 800771e:	4639      	mov	r1, r7
 8007720:	4630      	mov	r0, r6
 8007722:	f7f9 fa49 	bl	8000bb8 <__aeabi_d2uiz>
 8007726:	2801      	cmp	r0, #1
 8007728:	bf38      	it	cc
 800772a:	2001      	movcc	r0, #1
 800772c:	f7f8 fef2 	bl	8000514 <__aeabi_ui2d>
 8007730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007732:	4606      	mov	r6, r0
 8007734:	460f      	mov	r7, r1
 8007736:	b9fb      	cbnz	r3, 8007778 <_strtod_l+0xb80>
 8007738:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800773c:	9014      	str	r0, [sp, #80]	@ 0x50
 800773e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007740:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007744:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800774a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800774e:	1b5b      	subs	r3, r3, r5
 8007750:	9311      	str	r3, [sp, #68]	@ 0x44
 8007752:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007756:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800775a:	f7ff f8f1 	bl	8006940 <__ulp>
 800775e:	4650      	mov	r0, sl
 8007760:	ec53 2b10 	vmov	r2, r3, d0
 8007764:	4659      	mov	r1, fp
 8007766:	f7f8 ff4f 	bl	8000608 <__aeabi_dmul>
 800776a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800776e:	f7f8 fd95 	bl	800029c <__adddf3>
 8007772:	4682      	mov	sl, r0
 8007774:	468b      	mov	fp, r1
 8007776:	e770      	b.n	800765a <_strtod_l+0xa62>
 8007778:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800777c:	e7e0      	b.n	8007740 <_strtod_l+0xb48>
 800777e:	a30e      	add	r3, pc, #56	@ (adr r3, 80077b8 <_strtod_l+0xbc0>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f9 f9b2 	bl	8000aec <__aeabi_dcmplt>
 8007788:	e798      	b.n	80076bc <_strtod_l+0xac4>
 800778a:	2300      	movs	r3, #0
 800778c:	930e      	str	r3, [sp, #56]	@ 0x38
 800778e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007790:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	f7ff ba6d 	b.w	8006c72 <_strtod_l+0x7a>
 8007798:	2a65      	cmp	r2, #101	@ 0x65
 800779a:	f43f ab68 	beq.w	8006e6e <_strtod_l+0x276>
 800779e:	2a45      	cmp	r2, #69	@ 0x45
 80077a0:	f43f ab65 	beq.w	8006e6e <_strtod_l+0x276>
 80077a4:	2301      	movs	r3, #1
 80077a6:	f7ff bba0 	b.w	8006eea <_strtod_l+0x2f2>
 80077aa:	bf00      	nop
 80077ac:	f3af 8000 	nop.w
 80077b0:	ffc00000 	.word	0xffc00000
 80077b4:	41dfffff 	.word	0x41dfffff
 80077b8:	94a03595 	.word	0x94a03595
 80077bc:	3fcfffff 	.word	0x3fcfffff

080077c0 <_strtod_r>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	@ (80077c8 <_strtod_r+0x8>)
 80077c2:	f7ff ba19 	b.w	8006bf8 <_strtod_l>
 80077c6:	bf00      	nop
 80077c8:	20000080 	.word	0x20000080

080077cc <_strtol_l.isra.0>:
 80077cc:	2b24      	cmp	r3, #36	@ 0x24
 80077ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d2:	4686      	mov	lr, r0
 80077d4:	4690      	mov	r8, r2
 80077d6:	d801      	bhi.n	80077dc <_strtol_l.isra.0+0x10>
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d106      	bne.n	80077ea <_strtol_l.isra.0+0x1e>
 80077dc:	f7fd fdb8 	bl	8005350 <__errno>
 80077e0:	2316      	movs	r3, #22
 80077e2:	6003      	str	r3, [r0, #0]
 80077e4:	2000      	movs	r0, #0
 80077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ea:	4834      	ldr	r0, [pc, #208]	@ (80078bc <_strtol_l.isra.0+0xf0>)
 80077ec:	460d      	mov	r5, r1
 80077ee:	462a      	mov	r2, r5
 80077f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077f4:	5d06      	ldrb	r6, [r0, r4]
 80077f6:	f016 0608 	ands.w	r6, r6, #8
 80077fa:	d1f8      	bne.n	80077ee <_strtol_l.isra.0+0x22>
 80077fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80077fe:	d110      	bne.n	8007822 <_strtol_l.isra.0+0x56>
 8007800:	782c      	ldrb	r4, [r5, #0]
 8007802:	2601      	movs	r6, #1
 8007804:	1c95      	adds	r5, r2, #2
 8007806:	f033 0210 	bics.w	r2, r3, #16
 800780a:	d115      	bne.n	8007838 <_strtol_l.isra.0+0x6c>
 800780c:	2c30      	cmp	r4, #48	@ 0x30
 800780e:	d10d      	bne.n	800782c <_strtol_l.isra.0+0x60>
 8007810:	782a      	ldrb	r2, [r5, #0]
 8007812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007816:	2a58      	cmp	r2, #88	@ 0x58
 8007818:	d108      	bne.n	800782c <_strtol_l.isra.0+0x60>
 800781a:	786c      	ldrb	r4, [r5, #1]
 800781c:	3502      	adds	r5, #2
 800781e:	2310      	movs	r3, #16
 8007820:	e00a      	b.n	8007838 <_strtol_l.isra.0+0x6c>
 8007822:	2c2b      	cmp	r4, #43	@ 0x2b
 8007824:	bf04      	itt	eq
 8007826:	782c      	ldrbeq	r4, [r5, #0]
 8007828:	1c95      	addeq	r5, r2, #2
 800782a:	e7ec      	b.n	8007806 <_strtol_l.isra.0+0x3a>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f6      	bne.n	800781e <_strtol_l.isra.0+0x52>
 8007830:	2c30      	cmp	r4, #48	@ 0x30
 8007832:	bf14      	ite	ne
 8007834:	230a      	movne	r3, #10
 8007836:	2308      	moveq	r3, #8
 8007838:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800783c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007840:	2200      	movs	r2, #0
 8007842:	fbbc f9f3 	udiv	r9, ip, r3
 8007846:	4610      	mov	r0, r2
 8007848:	fb03 ca19 	mls	sl, r3, r9, ip
 800784c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007850:	2f09      	cmp	r7, #9
 8007852:	d80f      	bhi.n	8007874 <_strtol_l.isra.0+0xa8>
 8007854:	463c      	mov	r4, r7
 8007856:	42a3      	cmp	r3, r4
 8007858:	dd1b      	ble.n	8007892 <_strtol_l.isra.0+0xc6>
 800785a:	1c57      	adds	r7, r2, #1
 800785c:	d007      	beq.n	800786e <_strtol_l.isra.0+0xa2>
 800785e:	4581      	cmp	r9, r0
 8007860:	d314      	bcc.n	800788c <_strtol_l.isra.0+0xc0>
 8007862:	d101      	bne.n	8007868 <_strtol_l.isra.0+0x9c>
 8007864:	45a2      	cmp	sl, r4
 8007866:	db11      	blt.n	800788c <_strtol_l.isra.0+0xc0>
 8007868:	fb00 4003 	mla	r0, r0, r3, r4
 800786c:	2201      	movs	r2, #1
 800786e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007872:	e7eb      	b.n	800784c <_strtol_l.isra.0+0x80>
 8007874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007878:	2f19      	cmp	r7, #25
 800787a:	d801      	bhi.n	8007880 <_strtol_l.isra.0+0xb4>
 800787c:	3c37      	subs	r4, #55	@ 0x37
 800787e:	e7ea      	b.n	8007856 <_strtol_l.isra.0+0x8a>
 8007880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007884:	2f19      	cmp	r7, #25
 8007886:	d804      	bhi.n	8007892 <_strtol_l.isra.0+0xc6>
 8007888:	3c57      	subs	r4, #87	@ 0x57
 800788a:	e7e4      	b.n	8007856 <_strtol_l.isra.0+0x8a>
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	e7ed      	b.n	800786e <_strtol_l.isra.0+0xa2>
 8007892:	1c53      	adds	r3, r2, #1
 8007894:	d108      	bne.n	80078a8 <_strtol_l.isra.0+0xdc>
 8007896:	2322      	movs	r3, #34	@ 0x22
 8007898:	f8ce 3000 	str.w	r3, [lr]
 800789c:	4660      	mov	r0, ip
 800789e:	f1b8 0f00 	cmp.w	r8, #0
 80078a2:	d0a0      	beq.n	80077e6 <_strtol_l.isra.0+0x1a>
 80078a4:	1e69      	subs	r1, r5, #1
 80078a6:	e006      	b.n	80078b6 <_strtol_l.isra.0+0xea>
 80078a8:	b106      	cbz	r6, 80078ac <_strtol_l.isra.0+0xe0>
 80078aa:	4240      	negs	r0, r0
 80078ac:	f1b8 0f00 	cmp.w	r8, #0
 80078b0:	d099      	beq.n	80077e6 <_strtol_l.isra.0+0x1a>
 80078b2:	2a00      	cmp	r2, #0
 80078b4:	d1f6      	bne.n	80078a4 <_strtol_l.isra.0+0xd8>
 80078b6:	f8c8 1000 	str.w	r1, [r8]
 80078ba:	e794      	b.n	80077e6 <_strtol_l.isra.0+0x1a>
 80078bc:	08008da1 	.word	0x08008da1

080078c0 <_strtol_r>:
 80078c0:	f7ff bf84 	b.w	80077cc <_strtol_l.isra.0>

080078c4 <__ssputs_r>:
 80078c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	688e      	ldr	r6, [r1, #8]
 80078ca:	461f      	mov	r7, r3
 80078cc:	42be      	cmp	r6, r7
 80078ce:	680b      	ldr	r3, [r1, #0]
 80078d0:	4682      	mov	sl, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4690      	mov	r8, r2
 80078d6:	d82d      	bhi.n	8007934 <__ssputs_r+0x70>
 80078d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80078e0:	d026      	beq.n	8007930 <__ssputs_r+0x6c>
 80078e2:	6965      	ldr	r5, [r4, #20]
 80078e4:	6909      	ldr	r1, [r1, #16]
 80078e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ea:	eba3 0901 	sub.w	r9, r3, r1
 80078ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f2:	1c7b      	adds	r3, r7, #1
 80078f4:	444b      	add	r3, r9
 80078f6:	106d      	asrs	r5, r5, #1
 80078f8:	429d      	cmp	r5, r3
 80078fa:	bf38      	it	cc
 80078fc:	461d      	movcc	r5, r3
 80078fe:	0553      	lsls	r3, r2, #21
 8007900:	d527      	bpl.n	8007952 <__ssputs_r+0x8e>
 8007902:	4629      	mov	r1, r5
 8007904:	f7fe fc24 	bl	8006150 <_malloc_r>
 8007908:	4606      	mov	r6, r0
 800790a:	b360      	cbz	r0, 8007966 <__ssputs_r+0xa2>
 800790c:	6921      	ldr	r1, [r4, #16]
 800790e:	464a      	mov	r2, r9
 8007910:	f000 f9fe 	bl	8007d10 <memcpy>
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800791a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	6126      	str	r6, [r4, #16]
 8007922:	6165      	str	r5, [r4, #20]
 8007924:	444e      	add	r6, r9
 8007926:	eba5 0509 	sub.w	r5, r5, r9
 800792a:	6026      	str	r6, [r4, #0]
 800792c:	60a5      	str	r5, [r4, #8]
 800792e:	463e      	mov	r6, r7
 8007930:	42be      	cmp	r6, r7
 8007932:	d900      	bls.n	8007936 <__ssputs_r+0x72>
 8007934:	463e      	mov	r6, r7
 8007936:	6820      	ldr	r0, [r4, #0]
 8007938:	4632      	mov	r2, r6
 800793a:	4641      	mov	r1, r8
 800793c:	f7fd fc89 	bl	8005252 <memmove>
 8007940:	68a3      	ldr	r3, [r4, #8]
 8007942:	1b9b      	subs	r3, r3, r6
 8007944:	60a3      	str	r3, [r4, #8]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	4433      	add	r3, r6
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	2000      	movs	r0, #0
 800794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007952:	462a      	mov	r2, r5
 8007954:	f000 fd71 	bl	800843a <_realloc_r>
 8007958:	4606      	mov	r6, r0
 800795a:	2800      	cmp	r0, #0
 800795c:	d1e0      	bne.n	8007920 <__ssputs_r+0x5c>
 800795e:	6921      	ldr	r1, [r4, #16]
 8007960:	4650      	mov	r0, sl
 8007962:	f7fe fb81 	bl	8006068 <_free_r>
 8007966:	230c      	movs	r3, #12
 8007968:	f8ca 3000 	str.w	r3, [sl]
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e7e9      	b.n	800794e <__ssputs_r+0x8a>
	...

0800797c <_svfiprintf_r>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	4698      	mov	r8, r3
 8007982:	898b      	ldrh	r3, [r1, #12]
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	b09d      	sub	sp, #116	@ 0x74
 8007988:	4607      	mov	r7, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4614      	mov	r4, r2
 800798e:	d510      	bpl.n	80079b2 <_svfiprintf_r+0x36>
 8007990:	690b      	ldr	r3, [r1, #16]
 8007992:	b973      	cbnz	r3, 80079b2 <_svfiprintf_r+0x36>
 8007994:	2140      	movs	r1, #64	@ 0x40
 8007996:	f7fe fbdb 	bl	8006150 <_malloc_r>
 800799a:	6028      	str	r0, [r5, #0]
 800799c:	6128      	str	r0, [r5, #16]
 800799e:	b930      	cbnz	r0, 80079ae <_svfiprintf_r+0x32>
 80079a0:	230c      	movs	r3, #12
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	b01d      	add	sp, #116	@ 0x74
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	2340      	movs	r3, #64	@ 0x40
 80079b0:	616b      	str	r3, [r5, #20]
 80079b2:	2300      	movs	r3, #0
 80079b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079b6:	2320      	movs	r3, #32
 80079b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c0:	2330      	movs	r3, #48	@ 0x30
 80079c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b60 <_svfiprintf_r+0x1e4>
 80079c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079ca:	f04f 0901 	mov.w	r9, #1
 80079ce:	4623      	mov	r3, r4
 80079d0:	469a      	mov	sl, r3
 80079d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d6:	b10a      	cbz	r2, 80079dc <_svfiprintf_r+0x60>
 80079d8:	2a25      	cmp	r2, #37	@ 0x25
 80079da:	d1f9      	bne.n	80079d0 <_svfiprintf_r+0x54>
 80079dc:	ebba 0b04 	subs.w	fp, sl, r4
 80079e0:	d00b      	beq.n	80079fa <_svfiprintf_r+0x7e>
 80079e2:	465b      	mov	r3, fp
 80079e4:	4622      	mov	r2, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ff6b 	bl	80078c4 <__ssputs_r>
 80079ee:	3001      	adds	r0, #1
 80079f0:	f000 80a7 	beq.w	8007b42 <_svfiprintf_r+0x1c6>
 80079f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f6:	445a      	add	r2, fp
 80079f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80079fa:	f89a 3000 	ldrb.w	r3, [sl]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 809f 	beq.w	8007b42 <_svfiprintf_r+0x1c6>
 8007a04:	2300      	movs	r3, #0
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0e:	f10a 0a01 	add.w	sl, sl, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	9307      	str	r3, [sp, #28]
 8007a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a1c:	4654      	mov	r4, sl
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a24:	484e      	ldr	r0, [pc, #312]	@ (8007b60 <_svfiprintf_r+0x1e4>)
 8007a26:	f7f8 fbdb 	bl	80001e0 <memchr>
 8007a2a:	9a04      	ldr	r2, [sp, #16]
 8007a2c:	b9d8      	cbnz	r0, 8007a66 <_svfiprintf_r+0xea>
 8007a2e:	06d0      	lsls	r0, r2, #27
 8007a30:	bf44      	itt	mi
 8007a32:	2320      	movmi	r3, #32
 8007a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a38:	0711      	lsls	r1, r2, #28
 8007a3a:	bf44      	itt	mi
 8007a3c:	232b      	movmi	r3, #43	@ 0x2b
 8007a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a42:	f89a 3000 	ldrb.w	r3, [sl]
 8007a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a48:	d015      	beq.n	8007a76 <_svfiprintf_r+0xfa>
 8007a4a:	9a07      	ldr	r2, [sp, #28]
 8007a4c:	4654      	mov	r4, sl
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f04f 0c0a 	mov.w	ip, #10
 8007a54:	4621      	mov	r1, r4
 8007a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5a:	3b30      	subs	r3, #48	@ 0x30
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d94b      	bls.n	8007af8 <_svfiprintf_r+0x17c>
 8007a60:	b1b0      	cbz	r0, 8007a90 <_svfiprintf_r+0x114>
 8007a62:	9207      	str	r2, [sp, #28]
 8007a64:	e014      	b.n	8007a90 <_svfiprintf_r+0x114>
 8007a66:	eba0 0308 	sub.w	r3, r0, r8
 8007a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	46a2      	mov	sl, r4
 8007a74:	e7d2      	b.n	8007a1c <_svfiprintf_r+0xa0>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9103      	str	r1, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfbb      	ittet	lt
 8007a82:	425b      	neglt	r3, r3
 8007a84:	f042 0202 	orrlt.w	r2, r2, #2
 8007a88:	9307      	strge	r3, [sp, #28]
 8007a8a:	9307      	strlt	r3, [sp, #28]
 8007a8c:	bfb8      	it	lt
 8007a8e:	9204      	strlt	r2, [sp, #16]
 8007a90:	7823      	ldrb	r3, [r4, #0]
 8007a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a94:	d10a      	bne.n	8007aac <_svfiprintf_r+0x130>
 8007a96:	7863      	ldrb	r3, [r4, #1]
 8007a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a9a:	d132      	bne.n	8007b02 <_svfiprintf_r+0x186>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	9203      	str	r2, [sp, #12]
 8007aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aa8:	3402      	adds	r4, #2
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b70 <_svfiprintf_r+0x1f4>
 8007ab0:	7821      	ldrb	r1, [r4, #0]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f7f8 fb93 	bl	80001e0 <memchr>
 8007aba:	b138      	cbz	r0, 8007acc <_svfiprintf_r+0x150>
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	2240      	movs	r2, #64	@ 0x40
 8007ac4:	4082      	lsls	r2, r0
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	3401      	adds	r4, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad0:	4824      	ldr	r0, [pc, #144]	@ (8007b64 <_svfiprintf_r+0x1e8>)
 8007ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ad6:	2206      	movs	r2, #6
 8007ad8:	f7f8 fb82 	bl	80001e0 <memchr>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d036      	beq.n	8007b4e <_svfiprintf_r+0x1d2>
 8007ae0:	4b21      	ldr	r3, [pc, #132]	@ (8007b68 <_svfiprintf_r+0x1ec>)
 8007ae2:	bb1b      	cbnz	r3, 8007b2c <_svfiprintf_r+0x1b0>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	3307      	adds	r3, #7
 8007ae8:	f023 0307 	bic.w	r3, r3, #7
 8007aec:	3308      	adds	r3, #8
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af2:	4433      	add	r3, r6
 8007af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af6:	e76a      	b.n	80079ce <_svfiprintf_r+0x52>
 8007af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afc:	460c      	mov	r4, r1
 8007afe:	2001      	movs	r0, #1
 8007b00:	e7a8      	b.n	8007a54 <_svfiprintf_r+0xd8>
 8007b02:	2300      	movs	r3, #0
 8007b04:	3401      	adds	r4, #1
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f04f 0c0a 	mov.w	ip, #10
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b14:	3a30      	subs	r2, #48	@ 0x30
 8007b16:	2a09      	cmp	r2, #9
 8007b18:	d903      	bls.n	8007b22 <_svfiprintf_r+0x1a6>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0c6      	beq.n	8007aac <_svfiprintf_r+0x130>
 8007b1e:	9105      	str	r1, [sp, #20]
 8007b20:	e7c4      	b.n	8007aac <_svfiprintf_r+0x130>
 8007b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b26:	4604      	mov	r4, r0
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e7f0      	b.n	8007b0e <_svfiprintf_r+0x192>
 8007b2c:	ab03      	add	r3, sp, #12
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	462a      	mov	r2, r5
 8007b32:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <_svfiprintf_r+0x1f0>)
 8007b34:	a904      	add	r1, sp, #16
 8007b36:	4638      	mov	r0, r7
 8007b38:	f7fc fca0 	bl	800447c <_printf_float>
 8007b3c:	1c42      	adds	r2, r0, #1
 8007b3e:	4606      	mov	r6, r0
 8007b40:	d1d6      	bne.n	8007af0 <_svfiprintf_r+0x174>
 8007b42:	89ab      	ldrh	r3, [r5, #12]
 8007b44:	065b      	lsls	r3, r3, #25
 8007b46:	f53f af2d 	bmi.w	80079a4 <_svfiprintf_r+0x28>
 8007b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b4c:	e72c      	b.n	80079a8 <_svfiprintf_r+0x2c>
 8007b4e:	ab03      	add	r3, sp, #12
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	462a      	mov	r2, r5
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <_svfiprintf_r+0x1f0>)
 8007b56:	a904      	add	r1, sp, #16
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7fc ff27 	bl	80049ac <_printf_i>
 8007b5e:	e7ed      	b.n	8007b3c <_svfiprintf_r+0x1c0>
 8007b60:	08008b99 	.word	0x08008b99
 8007b64:	08008ba3 	.word	0x08008ba3
 8007b68:	0800447d 	.word	0x0800447d
 8007b6c:	080078c5 	.word	0x080078c5
 8007b70:	08008b9f 	.word	0x08008b9f

08007b74 <__sflush_r>:
 8007b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	0716      	lsls	r6, r2, #28
 8007b7e:	4605      	mov	r5, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	d454      	bmi.n	8007c2e <__sflush_r+0xba>
 8007b84:	684b      	ldr	r3, [r1, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dc02      	bgt.n	8007b90 <__sflush_r+0x1c>
 8007b8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd48      	ble.n	8007c22 <__sflush_r+0xae>
 8007b90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d045      	beq.n	8007c22 <__sflush_r+0xae>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b9c:	682f      	ldr	r7, [r5, #0]
 8007b9e:	6a21      	ldr	r1, [r4, #32]
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	d030      	beq.n	8007c06 <__sflush_r+0x92>
 8007ba4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	0759      	lsls	r1, r3, #29
 8007baa:	d505      	bpl.n	8007bb8 <__sflush_r+0x44>
 8007bac:	6863      	ldr	r3, [r4, #4]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bb2:	b10b      	cbz	r3, 8007bb8 <__sflush_r+0x44>
 8007bb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b0      	blx	r6
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	d106      	bne.n	8007bd6 <__sflush_r+0x62>
 8007bc8:	6829      	ldr	r1, [r5, #0]
 8007bca:	291d      	cmp	r1, #29
 8007bcc:	d82b      	bhi.n	8007c26 <__sflush_r+0xb2>
 8007bce:	4a2a      	ldr	r2, [pc, #168]	@ (8007c78 <__sflush_r+0x104>)
 8007bd0:	40ca      	lsrs	r2, r1
 8007bd2:	07d6      	lsls	r6, r2, #31
 8007bd4:	d527      	bpl.n	8007c26 <__sflush_r+0xb2>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6062      	str	r2, [r4, #4]
 8007bda:	04d9      	lsls	r1, r3, #19
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	d504      	bpl.n	8007bec <__sflush_r+0x78>
 8007be2:	1c42      	adds	r2, r0, #1
 8007be4:	d101      	bne.n	8007bea <__sflush_r+0x76>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	b903      	cbnz	r3, 8007bec <__sflush_r+0x78>
 8007bea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	b1b9      	cbz	r1, 8007c22 <__sflush_r+0xae>
 8007bf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	d002      	beq.n	8007c00 <__sflush_r+0x8c>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7fe fa34 	bl	8006068 <_free_r>
 8007c00:	2300      	movs	r3, #0
 8007c02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c04:	e00d      	b.n	8007c22 <__sflush_r+0xae>
 8007c06:	2301      	movs	r3, #1
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b0      	blx	r6
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	1c50      	adds	r0, r2, #1
 8007c10:	d1c9      	bne.n	8007ba6 <__sflush_r+0x32>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0c6      	beq.n	8007ba6 <__sflush_r+0x32>
 8007c18:	2b1d      	cmp	r3, #29
 8007c1a:	d001      	beq.n	8007c20 <__sflush_r+0xac>
 8007c1c:	2b16      	cmp	r3, #22
 8007c1e:	d11e      	bne.n	8007c5e <__sflush_r+0xea>
 8007c20:	602f      	str	r7, [r5, #0]
 8007c22:	2000      	movs	r0, #0
 8007c24:	e022      	b.n	8007c6c <__sflush_r+0xf8>
 8007c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	e01b      	b.n	8007c66 <__sflush_r+0xf2>
 8007c2e:	690f      	ldr	r7, [r1, #16]
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	d0f6      	beq.n	8007c22 <__sflush_r+0xae>
 8007c34:	0793      	lsls	r3, r2, #30
 8007c36:	680e      	ldr	r6, [r1, #0]
 8007c38:	bf08      	it	eq
 8007c3a:	694b      	ldreq	r3, [r1, #20]
 8007c3c:	600f      	str	r7, [r1, #0]
 8007c3e:	bf18      	it	ne
 8007c40:	2300      	movne	r3, #0
 8007c42:	eba6 0807 	sub.w	r8, r6, r7
 8007c46:	608b      	str	r3, [r1, #8]
 8007c48:	f1b8 0f00 	cmp.w	r8, #0
 8007c4c:	dde9      	ble.n	8007c22 <__sflush_r+0xae>
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c52:	4643      	mov	r3, r8
 8007c54:	463a      	mov	r2, r7
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b0      	blx	r6
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dc08      	bgt.n	8007c70 <__sflush_r+0xfc>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	4407      	add	r7, r0
 8007c72:	eba8 0800 	sub.w	r8, r8, r0
 8007c76:	e7e7      	b.n	8007c48 <__sflush_r+0xd4>
 8007c78:	20400001 	.word	0x20400001

08007c7c <_fflush_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	4605      	mov	r5, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b913      	cbnz	r3, 8007c8c <_fflush_r+0x10>
 8007c86:	2500      	movs	r5, #0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	b118      	cbz	r0, 8007c96 <_fflush_r+0x1a>
 8007c8e:	6a03      	ldr	r3, [r0, #32]
 8007c90:	b90b      	cbnz	r3, 8007c96 <_fflush_r+0x1a>
 8007c92:	f7fd fa43 	bl	800511c <__sinit>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f3      	beq.n	8007c86 <_fflush_r+0xa>
 8007c9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ca0:	07d0      	lsls	r0, r2, #31
 8007ca2:	d404      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca4:	0599      	lsls	r1, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007caa:	f7fd fb7c 	bl	80053a6 <__retarget_lock_acquire_recursive>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f7ff ff5f 	bl	8007b74 <__sflush_r>
 8007cb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb8:	07da      	lsls	r2, r3, #31
 8007cba:	4605      	mov	r5, r0
 8007cbc:	d4e4      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	059b      	lsls	r3, r3, #22
 8007cc2:	d4e1      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fd fb6f 	bl	80053a8 <__retarget_lock_release_recursive>
 8007cca:	e7dd      	b.n	8007c88 <_fflush_r+0xc>

08007ccc <strncmp>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	b16a      	cbz	r2, 8007cec <strncmp+0x20>
 8007cd0:	3901      	subs	r1, #1
 8007cd2:	1884      	adds	r4, r0, r2
 8007cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d103      	bne.n	8007ce8 <strncmp+0x1c>
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d001      	beq.n	8007ce8 <strncmp+0x1c>
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	d1f5      	bne.n	8007cd4 <strncmp+0x8>
 8007ce8:	1ad0      	subs	r0, r2, r3
 8007cea:	bd10      	pop	{r4, pc}
 8007cec:	4610      	mov	r0, r2
 8007cee:	e7fc      	b.n	8007cea <strncmp+0x1e>

08007cf0 <_sbrk_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d06      	ldr	r5, [pc, #24]	@ (8007d0c <_sbrk_r+0x1c>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7fa f960 	bl	8001fc0 <_sbrk>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_sbrk_r+0x1a>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_sbrk_r+0x1a>
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	200004bc 	.word	0x200004bc

08007d10 <memcpy>:
 8007d10:	440a      	add	r2, r1
 8007d12:	4291      	cmp	r1, r2
 8007d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d18:	d100      	bne.n	8007d1c <memcpy+0xc>
 8007d1a:	4770      	bx	lr
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d26:	4291      	cmp	r1, r2
 8007d28:	d1f9      	bne.n	8007d1e <memcpy+0xe>
 8007d2a:	bd10      	pop	{r4, pc}
 8007d2c:	0000      	movs	r0, r0
	...

08007d30 <nan>:
 8007d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d38 <nan+0x8>
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	00000000 	.word	0x00000000
 8007d3c:	7ff80000 	.word	0x7ff80000

08007d40 <__assert_func>:
 8007d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d42:	4614      	mov	r4, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b09      	ldr	r3, [pc, #36]	@ (8007d6c <__assert_func+0x2c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	68d8      	ldr	r0, [r3, #12]
 8007d4e:	b14c      	cbz	r4, 8007d64 <__assert_func+0x24>
 8007d50:	4b07      	ldr	r3, [pc, #28]	@ (8007d70 <__assert_func+0x30>)
 8007d52:	9100      	str	r1, [sp, #0]
 8007d54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d58:	4906      	ldr	r1, [pc, #24]	@ (8007d74 <__assert_func+0x34>)
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	f000 fba8 	bl	80084b0 <fiprintf>
 8007d60:	f000 fbb8 	bl	80084d4 <abort>
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <__assert_func+0x38>)
 8007d66:	461c      	mov	r4, r3
 8007d68:	e7f3      	b.n	8007d52 <__assert_func+0x12>
 8007d6a:	bf00      	nop
 8007d6c:	20000030 	.word	0x20000030
 8007d70:	08008bb2 	.word	0x08008bb2
 8007d74:	08008bbf 	.word	0x08008bbf
 8007d78:	08008bed 	.word	0x08008bed

08007d7c <_calloc_r>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	fba1 5402 	umull	r5, r4, r1, r2
 8007d82:	b934      	cbnz	r4, 8007d92 <_calloc_r+0x16>
 8007d84:	4629      	mov	r1, r5
 8007d86:	f7fe f9e3 	bl	8006150 <_malloc_r>
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	b928      	cbnz	r0, 8007d9a <_calloc_r+0x1e>
 8007d8e:	4630      	mov	r0, r6
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
 8007d92:	220c      	movs	r2, #12
 8007d94:	6002      	str	r2, [r0, #0]
 8007d96:	2600      	movs	r6, #0
 8007d98:	e7f9      	b.n	8007d8e <_calloc_r+0x12>
 8007d9a:	462a      	mov	r2, r5
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f7fd fa72 	bl	8005286 <memset>
 8007da2:	e7f4      	b.n	8007d8e <_calloc_r+0x12>

08007da4 <rshift>:
 8007da4:	6903      	ldr	r3, [r0, #16]
 8007da6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007daa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007db2:	f100 0414 	add.w	r4, r0, #20
 8007db6:	dd45      	ble.n	8007e44 <rshift+0xa0>
 8007db8:	f011 011f 	ands.w	r1, r1, #31
 8007dbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007dc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dc4:	d10c      	bne.n	8007de0 <rshift+0x3c>
 8007dc6:	f100 0710 	add.w	r7, r0, #16
 8007dca:	4629      	mov	r1, r5
 8007dcc:	42b1      	cmp	r1, r6
 8007dce:	d334      	bcc.n	8007e3a <rshift+0x96>
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	1eea      	subs	r2, r5, #3
 8007dd6:	4296      	cmp	r6, r2
 8007dd8:	bf38      	it	cc
 8007dda:	2300      	movcc	r3, #0
 8007ddc:	4423      	add	r3, r4
 8007dde:	e015      	b.n	8007e0c <rshift+0x68>
 8007de0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007de4:	f1c1 0820 	rsb	r8, r1, #32
 8007de8:	40cf      	lsrs	r7, r1
 8007dea:	f105 0e04 	add.w	lr, r5, #4
 8007dee:	46a1      	mov	r9, r4
 8007df0:	4576      	cmp	r6, lr
 8007df2:	46f4      	mov	ip, lr
 8007df4:	d815      	bhi.n	8007e22 <rshift+0x7e>
 8007df6:	1a9a      	subs	r2, r3, r2
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	3a04      	subs	r2, #4
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	42ae      	cmp	r6, r5
 8007e00:	bf38      	it	cc
 8007e02:	2200      	movcc	r2, #0
 8007e04:	18a3      	adds	r3, r4, r2
 8007e06:	50a7      	str	r7, [r4, r2]
 8007e08:	b107      	cbz	r7, 8007e0c <rshift+0x68>
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	1b1a      	subs	r2, r3, r4
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e14:	bf08      	it	eq
 8007e16:	2300      	moveq	r3, #0
 8007e18:	6102      	str	r2, [r0, #16]
 8007e1a:	bf08      	it	eq
 8007e1c:	6143      	streq	r3, [r0, #20]
 8007e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e22:	f8dc c000 	ldr.w	ip, [ip]
 8007e26:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e2a:	ea4c 0707 	orr.w	r7, ip, r7
 8007e2e:	f849 7b04 	str.w	r7, [r9], #4
 8007e32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e36:	40cf      	lsrs	r7, r1
 8007e38:	e7da      	b.n	8007df0 <rshift+0x4c>
 8007e3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e42:	e7c3      	b.n	8007dcc <rshift+0x28>
 8007e44:	4623      	mov	r3, r4
 8007e46:	e7e1      	b.n	8007e0c <rshift+0x68>

08007e48 <__hexdig_fun>:
 8007e48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d802      	bhi.n	8007e56 <__hexdig_fun+0xe>
 8007e50:	3820      	subs	r0, #32
 8007e52:	b2c0      	uxtb	r0, r0
 8007e54:	4770      	bx	lr
 8007e56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	d801      	bhi.n	8007e62 <__hexdig_fun+0x1a>
 8007e5e:	3847      	subs	r0, #71	@ 0x47
 8007e60:	e7f7      	b.n	8007e52 <__hexdig_fun+0xa>
 8007e62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d801      	bhi.n	8007e6e <__hexdig_fun+0x26>
 8007e6a:	3827      	subs	r0, #39	@ 0x27
 8007e6c:	e7f1      	b.n	8007e52 <__hexdig_fun+0xa>
 8007e6e:	2000      	movs	r0, #0
 8007e70:	4770      	bx	lr
	...

08007e74 <__gethex>:
 8007e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	468a      	mov	sl, r1
 8007e7c:	9302      	str	r3, [sp, #8]
 8007e7e:	680b      	ldr	r3, [r1, #0]
 8007e80:	9001      	str	r0, [sp, #4]
 8007e82:	4690      	mov	r8, r2
 8007e84:	1c9c      	adds	r4, r3, #2
 8007e86:	46a1      	mov	r9, r4
 8007e88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e8c:	2830      	cmp	r0, #48	@ 0x30
 8007e8e:	d0fa      	beq.n	8007e86 <__gethex+0x12>
 8007e90:	eba9 0303 	sub.w	r3, r9, r3
 8007e94:	f1a3 0b02 	sub.w	fp, r3, #2
 8007e98:	f7ff ffd6 	bl	8007e48 <__hexdig_fun>
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d168      	bne.n	8007f74 <__gethex+0x100>
 8007ea2:	49a0      	ldr	r1, [pc, #640]	@ (8008124 <__gethex+0x2b0>)
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	f7ff ff10 	bl	8007ccc <strncmp>
 8007eac:	4607      	mov	r7, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d167      	bne.n	8007f82 <__gethex+0x10e>
 8007eb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007eb6:	4626      	mov	r6, r4
 8007eb8:	f7ff ffc6 	bl	8007e48 <__hexdig_fun>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d062      	beq.n	8007f86 <__gethex+0x112>
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	7818      	ldrb	r0, [r3, #0]
 8007ec4:	2830      	cmp	r0, #48	@ 0x30
 8007ec6:	4699      	mov	r9, r3
 8007ec8:	f103 0301 	add.w	r3, r3, #1
 8007ecc:	d0f9      	beq.n	8007ec2 <__gethex+0x4e>
 8007ece:	f7ff ffbb 	bl	8007e48 <__hexdig_fun>
 8007ed2:	fab0 f580 	clz	r5, r0
 8007ed6:	096d      	lsrs	r5, r5, #5
 8007ed8:	f04f 0b01 	mov.w	fp, #1
 8007edc:	464a      	mov	r2, r9
 8007ede:	4616      	mov	r6, r2
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	7830      	ldrb	r0, [r6, #0]
 8007ee4:	f7ff ffb0 	bl	8007e48 <__hexdig_fun>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1f8      	bne.n	8007ede <__gethex+0x6a>
 8007eec:	498d      	ldr	r1, [pc, #564]	@ (8008124 <__gethex+0x2b0>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7ff feeb 	bl	8007ccc <strncmp>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d13f      	bne.n	8007f7a <__gethex+0x106>
 8007efa:	b944      	cbnz	r4, 8007f0e <__gethex+0x9a>
 8007efc:	1c74      	adds	r4, r6, #1
 8007efe:	4622      	mov	r2, r4
 8007f00:	4616      	mov	r6, r2
 8007f02:	3201      	adds	r2, #1
 8007f04:	7830      	ldrb	r0, [r6, #0]
 8007f06:	f7ff ff9f 	bl	8007e48 <__hexdig_fun>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1f8      	bne.n	8007f00 <__gethex+0x8c>
 8007f0e:	1ba4      	subs	r4, r4, r6
 8007f10:	00a7      	lsls	r7, r4, #2
 8007f12:	7833      	ldrb	r3, [r6, #0]
 8007f14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f18:	2b50      	cmp	r3, #80	@ 0x50
 8007f1a:	d13e      	bne.n	8007f9a <__gethex+0x126>
 8007f1c:	7873      	ldrb	r3, [r6, #1]
 8007f1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f20:	d033      	beq.n	8007f8a <__gethex+0x116>
 8007f22:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f24:	d034      	beq.n	8007f90 <__gethex+0x11c>
 8007f26:	1c71      	adds	r1, r6, #1
 8007f28:	2400      	movs	r4, #0
 8007f2a:	7808      	ldrb	r0, [r1, #0]
 8007f2c:	f7ff ff8c 	bl	8007e48 <__hexdig_fun>
 8007f30:	1e43      	subs	r3, r0, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b18      	cmp	r3, #24
 8007f36:	d830      	bhi.n	8007f9a <__gethex+0x126>
 8007f38:	f1a0 0210 	sub.w	r2, r0, #16
 8007f3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f40:	f7ff ff82 	bl	8007e48 <__hexdig_fun>
 8007f44:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f48:	fa5f fc8c 	uxtb.w	ip, ip
 8007f4c:	f1bc 0f18 	cmp.w	ip, #24
 8007f50:	f04f 030a 	mov.w	r3, #10
 8007f54:	d91e      	bls.n	8007f94 <__gethex+0x120>
 8007f56:	b104      	cbz	r4, 8007f5a <__gethex+0xe6>
 8007f58:	4252      	negs	r2, r2
 8007f5a:	4417      	add	r7, r2
 8007f5c:	f8ca 1000 	str.w	r1, [sl]
 8007f60:	b1ed      	cbz	r5, 8007f9e <__gethex+0x12a>
 8007f62:	f1bb 0f00 	cmp.w	fp, #0
 8007f66:	bf0c      	ite	eq
 8007f68:	2506      	moveq	r5, #6
 8007f6a:	2500      	movne	r5, #0
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	b005      	add	sp, #20
 8007f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	2500      	movs	r5, #0
 8007f76:	462c      	mov	r4, r5
 8007f78:	e7b0      	b.n	8007edc <__gethex+0x68>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	d1c7      	bne.n	8007f0e <__gethex+0x9a>
 8007f7e:	4627      	mov	r7, r4
 8007f80:	e7c7      	b.n	8007f12 <__gethex+0x9e>
 8007f82:	464e      	mov	r6, r9
 8007f84:	462f      	mov	r7, r5
 8007f86:	2501      	movs	r5, #1
 8007f88:	e7c3      	b.n	8007f12 <__gethex+0x9e>
 8007f8a:	2400      	movs	r4, #0
 8007f8c:	1cb1      	adds	r1, r6, #2
 8007f8e:	e7cc      	b.n	8007f2a <__gethex+0xb6>
 8007f90:	2401      	movs	r4, #1
 8007f92:	e7fb      	b.n	8007f8c <__gethex+0x118>
 8007f94:	fb03 0002 	mla	r0, r3, r2, r0
 8007f98:	e7ce      	b.n	8007f38 <__gethex+0xc4>
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	e7de      	b.n	8007f5c <__gethex+0xe8>
 8007f9e:	eba6 0309 	sub.w	r3, r6, r9
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	2b07      	cmp	r3, #7
 8007fa8:	dc0a      	bgt.n	8007fc0 <__gethex+0x14c>
 8007faa:	9801      	ldr	r0, [sp, #4]
 8007fac:	f7fe f95c 	bl	8006268 <_Balloc>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	b940      	cbnz	r0, 8007fc6 <__gethex+0x152>
 8007fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8008128 <__gethex+0x2b4>)
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	21e4      	movs	r1, #228	@ 0xe4
 8007fba:	485c      	ldr	r0, [pc, #368]	@ (800812c <__gethex+0x2b8>)
 8007fbc:	f7ff fec0 	bl	8007d40 <__assert_func>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	105b      	asrs	r3, r3, #1
 8007fc4:	e7ef      	b.n	8007fa6 <__gethex+0x132>
 8007fc6:	f100 0a14 	add.w	sl, r0, #20
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4655      	mov	r5, sl
 8007fce:	469b      	mov	fp, r3
 8007fd0:	45b1      	cmp	r9, r6
 8007fd2:	d337      	bcc.n	8008044 <__gethex+0x1d0>
 8007fd4:	f845 bb04 	str.w	fp, [r5], #4
 8007fd8:	eba5 050a 	sub.w	r5, r5, sl
 8007fdc:	10ad      	asrs	r5, r5, #2
 8007fde:	6125      	str	r5, [r4, #16]
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	f7fe fa33 	bl	800644c <__hi0bits>
 8007fe6:	016d      	lsls	r5, r5, #5
 8007fe8:	f8d8 6000 	ldr.w	r6, [r8]
 8007fec:	1a2d      	subs	r5, r5, r0
 8007fee:	42b5      	cmp	r5, r6
 8007ff0:	dd54      	ble.n	800809c <__gethex+0x228>
 8007ff2:	1bad      	subs	r5, r5, r6
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f7fe fdbf 	bl	8006b7a <__any_on>
 8007ffc:	4681      	mov	r9, r0
 8007ffe:	b178      	cbz	r0, 8008020 <__gethex+0x1ac>
 8008000:	1e6b      	subs	r3, r5, #1
 8008002:	1159      	asrs	r1, r3, #5
 8008004:	f003 021f 	and.w	r2, r3, #31
 8008008:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800800c:	f04f 0901 	mov.w	r9, #1
 8008010:	fa09 f202 	lsl.w	r2, r9, r2
 8008014:	420a      	tst	r2, r1
 8008016:	d003      	beq.n	8008020 <__gethex+0x1ac>
 8008018:	454b      	cmp	r3, r9
 800801a:	dc36      	bgt.n	800808a <__gethex+0x216>
 800801c:	f04f 0902 	mov.w	r9, #2
 8008020:	4629      	mov	r1, r5
 8008022:	4620      	mov	r0, r4
 8008024:	f7ff febe 	bl	8007da4 <rshift>
 8008028:	442f      	add	r7, r5
 800802a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800802e:	42bb      	cmp	r3, r7
 8008030:	da42      	bge.n	80080b8 <__gethex+0x244>
 8008032:	9801      	ldr	r0, [sp, #4]
 8008034:	4621      	mov	r1, r4
 8008036:	f7fe f957 	bl	80062e8 <_Bfree>
 800803a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800803c:	2300      	movs	r3, #0
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	25a3      	movs	r5, #163	@ 0xa3
 8008042:	e793      	b.n	8007f6c <__gethex+0xf8>
 8008044:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008048:	2a2e      	cmp	r2, #46	@ 0x2e
 800804a:	d012      	beq.n	8008072 <__gethex+0x1fe>
 800804c:	2b20      	cmp	r3, #32
 800804e:	d104      	bne.n	800805a <__gethex+0x1e6>
 8008050:	f845 bb04 	str.w	fp, [r5], #4
 8008054:	f04f 0b00 	mov.w	fp, #0
 8008058:	465b      	mov	r3, fp
 800805a:	7830      	ldrb	r0, [r6, #0]
 800805c:	9303      	str	r3, [sp, #12]
 800805e:	f7ff fef3 	bl	8007e48 <__hexdig_fun>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	f000 000f 	and.w	r0, r0, #15
 8008068:	4098      	lsls	r0, r3
 800806a:	ea4b 0b00 	orr.w	fp, fp, r0
 800806e:	3304      	adds	r3, #4
 8008070:	e7ae      	b.n	8007fd0 <__gethex+0x15c>
 8008072:	45b1      	cmp	r9, r6
 8008074:	d8ea      	bhi.n	800804c <__gethex+0x1d8>
 8008076:	492b      	ldr	r1, [pc, #172]	@ (8008124 <__gethex+0x2b0>)
 8008078:	9303      	str	r3, [sp, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff fe25 	bl	8007ccc <strncmp>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	2800      	cmp	r0, #0
 8008086:	d1e1      	bne.n	800804c <__gethex+0x1d8>
 8008088:	e7a2      	b.n	8007fd0 <__gethex+0x15c>
 800808a:	1ea9      	subs	r1, r5, #2
 800808c:	4620      	mov	r0, r4
 800808e:	f7fe fd74 	bl	8006b7a <__any_on>
 8008092:	2800      	cmp	r0, #0
 8008094:	d0c2      	beq.n	800801c <__gethex+0x1a8>
 8008096:	f04f 0903 	mov.w	r9, #3
 800809a:	e7c1      	b.n	8008020 <__gethex+0x1ac>
 800809c:	da09      	bge.n	80080b2 <__gethex+0x23e>
 800809e:	1b75      	subs	r5, r6, r5
 80080a0:	4621      	mov	r1, r4
 80080a2:	9801      	ldr	r0, [sp, #4]
 80080a4:	462a      	mov	r2, r5
 80080a6:	f7fe fb2f 	bl	8006708 <__lshift>
 80080aa:	1b7f      	subs	r7, r7, r5
 80080ac:	4604      	mov	r4, r0
 80080ae:	f100 0a14 	add.w	sl, r0, #20
 80080b2:	f04f 0900 	mov.w	r9, #0
 80080b6:	e7b8      	b.n	800802a <__gethex+0x1b6>
 80080b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080bc:	42bd      	cmp	r5, r7
 80080be:	dd6f      	ble.n	80081a0 <__gethex+0x32c>
 80080c0:	1bed      	subs	r5, r5, r7
 80080c2:	42ae      	cmp	r6, r5
 80080c4:	dc34      	bgt.n	8008130 <__gethex+0x2bc>
 80080c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d022      	beq.n	8008114 <__gethex+0x2a0>
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d024      	beq.n	800811c <__gethex+0x2a8>
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d115      	bne.n	8008102 <__gethex+0x28e>
 80080d6:	42ae      	cmp	r6, r5
 80080d8:	d113      	bne.n	8008102 <__gethex+0x28e>
 80080da:	2e01      	cmp	r6, #1
 80080dc:	d10b      	bne.n	80080f6 <__gethex+0x282>
 80080de:	9a02      	ldr	r2, [sp, #8]
 80080e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	2301      	movs	r3, #1
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	f8ca 3000 	str.w	r3, [sl]
 80080ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080f0:	2562      	movs	r5, #98	@ 0x62
 80080f2:	601c      	str	r4, [r3, #0]
 80080f4:	e73a      	b.n	8007f6c <__gethex+0xf8>
 80080f6:	1e71      	subs	r1, r6, #1
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7fe fd3e 	bl	8006b7a <__any_on>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d1ed      	bne.n	80080de <__gethex+0x26a>
 8008102:	9801      	ldr	r0, [sp, #4]
 8008104:	4621      	mov	r1, r4
 8008106:	f7fe f8ef 	bl	80062e8 <_Bfree>
 800810a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800810c:	2300      	movs	r3, #0
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	2550      	movs	r5, #80	@ 0x50
 8008112:	e72b      	b.n	8007f6c <__gethex+0xf8>
 8008114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f3      	bne.n	8008102 <__gethex+0x28e>
 800811a:	e7e0      	b.n	80080de <__gethex+0x26a>
 800811c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1dd      	bne.n	80080de <__gethex+0x26a>
 8008122:	e7ee      	b.n	8008102 <__gethex+0x28e>
 8008124:	08008b97 	.word	0x08008b97
 8008128:	08008b2d 	.word	0x08008b2d
 800812c:	08008bee 	.word	0x08008bee
 8008130:	1e6f      	subs	r7, r5, #1
 8008132:	f1b9 0f00 	cmp.w	r9, #0
 8008136:	d130      	bne.n	800819a <__gethex+0x326>
 8008138:	b127      	cbz	r7, 8008144 <__gethex+0x2d0>
 800813a:	4639      	mov	r1, r7
 800813c:	4620      	mov	r0, r4
 800813e:	f7fe fd1c 	bl	8006b7a <__any_on>
 8008142:	4681      	mov	r9, r0
 8008144:	117a      	asrs	r2, r7, #5
 8008146:	2301      	movs	r3, #1
 8008148:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800814c:	f007 071f 	and.w	r7, r7, #31
 8008150:	40bb      	lsls	r3, r7
 8008152:	4213      	tst	r3, r2
 8008154:	4629      	mov	r1, r5
 8008156:	4620      	mov	r0, r4
 8008158:	bf18      	it	ne
 800815a:	f049 0902 	orrne.w	r9, r9, #2
 800815e:	f7ff fe21 	bl	8007da4 <rshift>
 8008162:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008166:	1b76      	subs	r6, r6, r5
 8008168:	2502      	movs	r5, #2
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d047      	beq.n	8008200 <__gethex+0x38c>
 8008170:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d015      	beq.n	80081a4 <__gethex+0x330>
 8008178:	2b03      	cmp	r3, #3
 800817a:	d017      	beq.n	80081ac <__gethex+0x338>
 800817c:	2b01      	cmp	r3, #1
 800817e:	d109      	bne.n	8008194 <__gethex+0x320>
 8008180:	f019 0f02 	tst.w	r9, #2
 8008184:	d006      	beq.n	8008194 <__gethex+0x320>
 8008186:	f8da 3000 	ldr.w	r3, [sl]
 800818a:	ea49 0903 	orr.w	r9, r9, r3
 800818e:	f019 0f01 	tst.w	r9, #1
 8008192:	d10e      	bne.n	80081b2 <__gethex+0x33e>
 8008194:	f045 0510 	orr.w	r5, r5, #16
 8008198:	e032      	b.n	8008200 <__gethex+0x38c>
 800819a:	f04f 0901 	mov.w	r9, #1
 800819e:	e7d1      	b.n	8008144 <__gethex+0x2d0>
 80081a0:	2501      	movs	r5, #1
 80081a2:	e7e2      	b.n	800816a <__gethex+0x2f6>
 80081a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081a6:	f1c3 0301 	rsb	r3, r3, #1
 80081aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0f0      	beq.n	8008194 <__gethex+0x320>
 80081b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081b6:	f104 0314 	add.w	r3, r4, #20
 80081ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80081be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80081c2:	f04f 0c00 	mov.w	ip, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80081d0:	d01b      	beq.n	800820a <__gethex+0x396>
 80081d2:	3201      	adds	r2, #1
 80081d4:	6002      	str	r2, [r0, #0]
 80081d6:	2d02      	cmp	r5, #2
 80081d8:	f104 0314 	add.w	r3, r4, #20
 80081dc:	d13c      	bne.n	8008258 <__gethex+0x3e4>
 80081de:	f8d8 2000 	ldr.w	r2, [r8]
 80081e2:	3a01      	subs	r2, #1
 80081e4:	42b2      	cmp	r2, r6
 80081e6:	d109      	bne.n	80081fc <__gethex+0x388>
 80081e8:	1171      	asrs	r1, r6, #5
 80081ea:	2201      	movs	r2, #1
 80081ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081f0:	f006 061f 	and.w	r6, r6, #31
 80081f4:	fa02 f606 	lsl.w	r6, r2, r6
 80081f8:	421e      	tst	r6, r3
 80081fa:	d13a      	bne.n	8008272 <__gethex+0x3fe>
 80081fc:	f045 0520 	orr.w	r5, r5, #32
 8008200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008202:	601c      	str	r4, [r3, #0]
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	601f      	str	r7, [r3, #0]
 8008208:	e6b0      	b.n	8007f6c <__gethex+0xf8>
 800820a:	4299      	cmp	r1, r3
 800820c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008210:	d8d9      	bhi.n	80081c6 <__gethex+0x352>
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	459b      	cmp	fp, r3
 8008216:	db17      	blt.n	8008248 <__gethex+0x3d4>
 8008218:	6861      	ldr	r1, [r4, #4]
 800821a:	9801      	ldr	r0, [sp, #4]
 800821c:	3101      	adds	r1, #1
 800821e:	f7fe f823 	bl	8006268 <_Balloc>
 8008222:	4681      	mov	r9, r0
 8008224:	b918      	cbnz	r0, 800822e <__gethex+0x3ba>
 8008226:	4b1a      	ldr	r3, [pc, #104]	@ (8008290 <__gethex+0x41c>)
 8008228:	4602      	mov	r2, r0
 800822a:	2184      	movs	r1, #132	@ 0x84
 800822c:	e6c5      	b.n	8007fba <__gethex+0x146>
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	3202      	adds	r2, #2
 8008232:	f104 010c 	add.w	r1, r4, #12
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	300c      	adds	r0, #12
 800823a:	f7ff fd69 	bl	8007d10 <memcpy>
 800823e:	4621      	mov	r1, r4
 8008240:	9801      	ldr	r0, [sp, #4]
 8008242:	f7fe f851 	bl	80062e8 <_Bfree>
 8008246:	464c      	mov	r4, r9
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008250:	6122      	str	r2, [r4, #16]
 8008252:	2201      	movs	r2, #1
 8008254:	615a      	str	r2, [r3, #20]
 8008256:	e7be      	b.n	80081d6 <__gethex+0x362>
 8008258:	6922      	ldr	r2, [r4, #16]
 800825a:	455a      	cmp	r2, fp
 800825c:	dd0b      	ble.n	8008276 <__gethex+0x402>
 800825e:	2101      	movs	r1, #1
 8008260:	4620      	mov	r0, r4
 8008262:	f7ff fd9f 	bl	8007da4 <rshift>
 8008266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800826a:	3701      	adds	r7, #1
 800826c:	42bb      	cmp	r3, r7
 800826e:	f6ff aee0 	blt.w	8008032 <__gethex+0x1be>
 8008272:	2501      	movs	r5, #1
 8008274:	e7c2      	b.n	80081fc <__gethex+0x388>
 8008276:	f016 061f 	ands.w	r6, r6, #31
 800827a:	d0fa      	beq.n	8008272 <__gethex+0x3fe>
 800827c:	4453      	add	r3, sl
 800827e:	f1c6 0620 	rsb	r6, r6, #32
 8008282:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008286:	f7fe f8e1 	bl	800644c <__hi0bits>
 800828a:	42b0      	cmp	r0, r6
 800828c:	dbe7      	blt.n	800825e <__gethex+0x3ea>
 800828e:	e7f0      	b.n	8008272 <__gethex+0x3fe>
 8008290:	08008b2d 	.word	0x08008b2d

08008294 <L_shift>:
 8008294:	f1c2 0208 	rsb	r2, r2, #8
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	b570      	push	{r4, r5, r6, lr}
 800829c:	f1c2 0620 	rsb	r6, r2, #32
 80082a0:	6843      	ldr	r3, [r0, #4]
 80082a2:	6804      	ldr	r4, [r0, #0]
 80082a4:	fa03 f506 	lsl.w	r5, r3, r6
 80082a8:	432c      	orrs	r4, r5
 80082aa:	40d3      	lsrs	r3, r2
 80082ac:	6004      	str	r4, [r0, #0]
 80082ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80082b2:	4288      	cmp	r0, r1
 80082b4:	d3f4      	bcc.n	80082a0 <L_shift+0xc>
 80082b6:	bd70      	pop	{r4, r5, r6, pc}

080082b8 <__match>:
 80082b8:	b530      	push	{r4, r5, lr}
 80082ba:	6803      	ldr	r3, [r0, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c2:	b914      	cbnz	r4, 80082ca <__match+0x12>
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	2001      	movs	r0, #1
 80082c8:	bd30      	pop	{r4, r5, pc}
 80082ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80082d2:	2d19      	cmp	r5, #25
 80082d4:	bf98      	it	ls
 80082d6:	3220      	addls	r2, #32
 80082d8:	42a2      	cmp	r2, r4
 80082da:	d0f0      	beq.n	80082be <__match+0x6>
 80082dc:	2000      	movs	r0, #0
 80082de:	e7f3      	b.n	80082c8 <__match+0x10>

080082e0 <__hexnan>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	680b      	ldr	r3, [r1, #0]
 80082e6:	6801      	ldr	r1, [r0, #0]
 80082e8:	115e      	asrs	r6, r3, #5
 80082ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082ee:	f013 031f 	ands.w	r3, r3, #31
 80082f2:	b087      	sub	sp, #28
 80082f4:	bf18      	it	ne
 80082f6:	3604      	addne	r6, #4
 80082f8:	2500      	movs	r5, #0
 80082fa:	1f37      	subs	r7, r6, #4
 80082fc:	4682      	mov	sl, r0
 80082fe:	4690      	mov	r8, r2
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	f846 5c04 	str.w	r5, [r6, #-4]
 8008306:	46b9      	mov	r9, r7
 8008308:	463c      	mov	r4, r7
 800830a:	9502      	str	r5, [sp, #8]
 800830c:	46ab      	mov	fp, r5
 800830e:	784a      	ldrb	r2, [r1, #1]
 8008310:	1c4b      	adds	r3, r1, #1
 8008312:	9303      	str	r3, [sp, #12]
 8008314:	b342      	cbz	r2, 8008368 <__hexnan+0x88>
 8008316:	4610      	mov	r0, r2
 8008318:	9105      	str	r1, [sp, #20]
 800831a:	9204      	str	r2, [sp, #16]
 800831c:	f7ff fd94 	bl	8007e48 <__hexdig_fun>
 8008320:	2800      	cmp	r0, #0
 8008322:	d151      	bne.n	80083c8 <__hexnan+0xe8>
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	9905      	ldr	r1, [sp, #20]
 8008328:	2a20      	cmp	r2, #32
 800832a:	d818      	bhi.n	800835e <__hexnan+0x7e>
 800832c:	9b02      	ldr	r3, [sp, #8]
 800832e:	459b      	cmp	fp, r3
 8008330:	dd13      	ble.n	800835a <__hexnan+0x7a>
 8008332:	454c      	cmp	r4, r9
 8008334:	d206      	bcs.n	8008344 <__hexnan+0x64>
 8008336:	2d07      	cmp	r5, #7
 8008338:	dc04      	bgt.n	8008344 <__hexnan+0x64>
 800833a:	462a      	mov	r2, r5
 800833c:	4649      	mov	r1, r9
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff ffa8 	bl	8008294 <L_shift>
 8008344:	4544      	cmp	r4, r8
 8008346:	d952      	bls.n	80083ee <__hexnan+0x10e>
 8008348:	2300      	movs	r3, #0
 800834a:	f1a4 0904 	sub.w	r9, r4, #4
 800834e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008352:	f8cd b008 	str.w	fp, [sp, #8]
 8008356:	464c      	mov	r4, r9
 8008358:	461d      	mov	r5, r3
 800835a:	9903      	ldr	r1, [sp, #12]
 800835c:	e7d7      	b.n	800830e <__hexnan+0x2e>
 800835e:	2a29      	cmp	r2, #41	@ 0x29
 8008360:	d157      	bne.n	8008412 <__hexnan+0x132>
 8008362:	3102      	adds	r1, #2
 8008364:	f8ca 1000 	str.w	r1, [sl]
 8008368:	f1bb 0f00 	cmp.w	fp, #0
 800836c:	d051      	beq.n	8008412 <__hexnan+0x132>
 800836e:	454c      	cmp	r4, r9
 8008370:	d206      	bcs.n	8008380 <__hexnan+0xa0>
 8008372:	2d07      	cmp	r5, #7
 8008374:	dc04      	bgt.n	8008380 <__hexnan+0xa0>
 8008376:	462a      	mov	r2, r5
 8008378:	4649      	mov	r1, r9
 800837a:	4620      	mov	r0, r4
 800837c:	f7ff ff8a 	bl	8008294 <L_shift>
 8008380:	4544      	cmp	r4, r8
 8008382:	d936      	bls.n	80083f2 <__hexnan+0x112>
 8008384:	f1a8 0204 	sub.w	r2, r8, #4
 8008388:	4623      	mov	r3, r4
 800838a:	f853 1b04 	ldr.w	r1, [r3], #4
 800838e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008392:	429f      	cmp	r7, r3
 8008394:	d2f9      	bcs.n	800838a <__hexnan+0xaa>
 8008396:	1b3b      	subs	r3, r7, r4
 8008398:	f023 0303 	bic.w	r3, r3, #3
 800839c:	3304      	adds	r3, #4
 800839e:	3401      	adds	r4, #1
 80083a0:	3e03      	subs	r6, #3
 80083a2:	42b4      	cmp	r4, r6
 80083a4:	bf88      	it	hi
 80083a6:	2304      	movhi	r3, #4
 80083a8:	4443      	add	r3, r8
 80083aa:	2200      	movs	r2, #0
 80083ac:	f843 2b04 	str.w	r2, [r3], #4
 80083b0:	429f      	cmp	r7, r3
 80083b2:	d2fb      	bcs.n	80083ac <__hexnan+0xcc>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	b91b      	cbnz	r3, 80083c0 <__hexnan+0xe0>
 80083b8:	4547      	cmp	r7, r8
 80083ba:	d128      	bne.n	800840e <__hexnan+0x12e>
 80083bc:	2301      	movs	r3, #1
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	2005      	movs	r0, #5
 80083c2:	b007      	add	sp, #28
 80083c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c8:	3501      	adds	r5, #1
 80083ca:	2d08      	cmp	r5, #8
 80083cc:	f10b 0b01 	add.w	fp, fp, #1
 80083d0:	dd06      	ble.n	80083e0 <__hexnan+0x100>
 80083d2:	4544      	cmp	r4, r8
 80083d4:	d9c1      	bls.n	800835a <__hexnan+0x7a>
 80083d6:	2300      	movs	r3, #0
 80083d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80083dc:	2501      	movs	r5, #1
 80083de:	3c04      	subs	r4, #4
 80083e0:	6822      	ldr	r2, [r4, #0]
 80083e2:	f000 000f 	and.w	r0, r0, #15
 80083e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80083ea:	6020      	str	r0, [r4, #0]
 80083ec:	e7b5      	b.n	800835a <__hexnan+0x7a>
 80083ee:	2508      	movs	r5, #8
 80083f0:	e7b3      	b.n	800835a <__hexnan+0x7a>
 80083f2:	9b01      	ldr	r3, [sp, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0dd      	beq.n	80083b4 <__hexnan+0xd4>
 80083f8:	f1c3 0320 	rsb	r3, r3, #32
 80083fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008400:	40da      	lsrs	r2, r3
 8008402:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008406:	4013      	ands	r3, r2
 8008408:	f846 3c04 	str.w	r3, [r6, #-4]
 800840c:	e7d2      	b.n	80083b4 <__hexnan+0xd4>
 800840e:	3f04      	subs	r7, #4
 8008410:	e7d0      	b.n	80083b4 <__hexnan+0xd4>
 8008412:	2004      	movs	r0, #4
 8008414:	e7d5      	b.n	80083c2 <__hexnan+0xe2>

08008416 <__ascii_mbtowc>:
 8008416:	b082      	sub	sp, #8
 8008418:	b901      	cbnz	r1, 800841c <__ascii_mbtowc+0x6>
 800841a:	a901      	add	r1, sp, #4
 800841c:	b142      	cbz	r2, 8008430 <__ascii_mbtowc+0x1a>
 800841e:	b14b      	cbz	r3, 8008434 <__ascii_mbtowc+0x1e>
 8008420:	7813      	ldrb	r3, [r2, #0]
 8008422:	600b      	str	r3, [r1, #0]
 8008424:	7812      	ldrb	r2, [r2, #0]
 8008426:	1e10      	subs	r0, r2, #0
 8008428:	bf18      	it	ne
 800842a:	2001      	movne	r0, #1
 800842c:	b002      	add	sp, #8
 800842e:	4770      	bx	lr
 8008430:	4610      	mov	r0, r2
 8008432:	e7fb      	b.n	800842c <__ascii_mbtowc+0x16>
 8008434:	f06f 0001 	mvn.w	r0, #1
 8008438:	e7f8      	b.n	800842c <__ascii_mbtowc+0x16>

0800843a <_realloc_r>:
 800843a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843e:	4607      	mov	r7, r0
 8008440:	4614      	mov	r4, r2
 8008442:	460d      	mov	r5, r1
 8008444:	b921      	cbnz	r1, 8008450 <_realloc_r+0x16>
 8008446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844a:	4611      	mov	r1, r2
 800844c:	f7fd be80 	b.w	8006150 <_malloc_r>
 8008450:	b92a      	cbnz	r2, 800845e <_realloc_r+0x24>
 8008452:	f7fd fe09 	bl	8006068 <_free_r>
 8008456:	4625      	mov	r5, r4
 8008458:	4628      	mov	r0, r5
 800845a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800845e:	f000 f840 	bl	80084e2 <_malloc_usable_size_r>
 8008462:	4284      	cmp	r4, r0
 8008464:	4606      	mov	r6, r0
 8008466:	d802      	bhi.n	800846e <_realloc_r+0x34>
 8008468:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800846c:	d8f4      	bhi.n	8008458 <_realloc_r+0x1e>
 800846e:	4621      	mov	r1, r4
 8008470:	4638      	mov	r0, r7
 8008472:	f7fd fe6d 	bl	8006150 <_malloc_r>
 8008476:	4680      	mov	r8, r0
 8008478:	b908      	cbnz	r0, 800847e <_realloc_r+0x44>
 800847a:	4645      	mov	r5, r8
 800847c:	e7ec      	b.n	8008458 <_realloc_r+0x1e>
 800847e:	42b4      	cmp	r4, r6
 8008480:	4622      	mov	r2, r4
 8008482:	4629      	mov	r1, r5
 8008484:	bf28      	it	cs
 8008486:	4632      	movcs	r2, r6
 8008488:	f7ff fc42 	bl	8007d10 <memcpy>
 800848c:	4629      	mov	r1, r5
 800848e:	4638      	mov	r0, r7
 8008490:	f7fd fdea 	bl	8006068 <_free_r>
 8008494:	e7f1      	b.n	800847a <_realloc_r+0x40>

08008496 <__ascii_wctomb>:
 8008496:	4603      	mov	r3, r0
 8008498:	4608      	mov	r0, r1
 800849a:	b141      	cbz	r1, 80084ae <__ascii_wctomb+0x18>
 800849c:	2aff      	cmp	r2, #255	@ 0xff
 800849e:	d904      	bls.n	80084aa <__ascii_wctomb+0x14>
 80084a0:	228a      	movs	r2, #138	@ 0x8a
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	4770      	bx	lr
 80084aa:	700a      	strb	r2, [r1, #0]
 80084ac:	2001      	movs	r0, #1
 80084ae:	4770      	bx	lr

080084b0 <fiprintf>:
 80084b0:	b40e      	push	{r1, r2, r3}
 80084b2:	b503      	push	{r0, r1, lr}
 80084b4:	4601      	mov	r1, r0
 80084b6:	ab03      	add	r3, sp, #12
 80084b8:	4805      	ldr	r0, [pc, #20]	@ (80084d0 <fiprintf+0x20>)
 80084ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80084be:	6800      	ldr	r0, [r0, #0]
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	f000 f83f 	bl	8008544 <_vfiprintf_r>
 80084c6:	b002      	add	sp, #8
 80084c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084cc:	b003      	add	sp, #12
 80084ce:	4770      	bx	lr
 80084d0:	20000030 	.word	0x20000030

080084d4 <abort>:
 80084d4:	b508      	push	{r3, lr}
 80084d6:	2006      	movs	r0, #6
 80084d8:	f000 fa08 	bl	80088ec <raise>
 80084dc:	2001      	movs	r0, #1
 80084de:	f7f9 fcf6 	bl	8001ece <_exit>

080084e2 <_malloc_usable_size_r>:
 80084e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e6:	1f18      	subs	r0, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bfbc      	itt	lt
 80084ec:	580b      	ldrlt	r3, [r1, r0]
 80084ee:	18c0      	addlt	r0, r0, r3
 80084f0:	4770      	bx	lr

080084f2 <__sfputc_r>:
 80084f2:	6893      	ldr	r3, [r2, #8]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	b410      	push	{r4}
 80084fa:	6093      	str	r3, [r2, #8]
 80084fc:	da08      	bge.n	8008510 <__sfputc_r+0x1e>
 80084fe:	6994      	ldr	r4, [r2, #24]
 8008500:	42a3      	cmp	r3, r4
 8008502:	db01      	blt.n	8008508 <__sfputc_r+0x16>
 8008504:	290a      	cmp	r1, #10
 8008506:	d103      	bne.n	8008510 <__sfputc_r+0x1e>
 8008508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850c:	f000 b932 	b.w	8008774 <__swbuf_r>
 8008510:	6813      	ldr	r3, [r2, #0]
 8008512:	1c58      	adds	r0, r3, #1
 8008514:	6010      	str	r0, [r2, #0]
 8008516:	7019      	strb	r1, [r3, #0]
 8008518:	4608      	mov	r0, r1
 800851a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800851e:	4770      	bx	lr

08008520 <__sfputs_r>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	4606      	mov	r6, r0
 8008524:	460f      	mov	r7, r1
 8008526:	4614      	mov	r4, r2
 8008528:	18d5      	adds	r5, r2, r3
 800852a:	42ac      	cmp	r4, r5
 800852c:	d101      	bne.n	8008532 <__sfputs_r+0x12>
 800852e:	2000      	movs	r0, #0
 8008530:	e007      	b.n	8008542 <__sfputs_r+0x22>
 8008532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008536:	463a      	mov	r2, r7
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff ffda 	bl	80084f2 <__sfputc_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d1f3      	bne.n	800852a <__sfputs_r+0xa>
 8008542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008544 <_vfiprintf_r>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	460d      	mov	r5, r1
 800854a:	b09d      	sub	sp, #116	@ 0x74
 800854c:	4614      	mov	r4, r2
 800854e:	4698      	mov	r8, r3
 8008550:	4606      	mov	r6, r0
 8008552:	b118      	cbz	r0, 800855c <_vfiprintf_r+0x18>
 8008554:	6a03      	ldr	r3, [r0, #32]
 8008556:	b90b      	cbnz	r3, 800855c <_vfiprintf_r+0x18>
 8008558:	f7fc fde0 	bl	800511c <__sinit>
 800855c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800855e:	07d9      	lsls	r1, r3, #31
 8008560:	d405      	bmi.n	800856e <_vfiprintf_r+0x2a>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	059a      	lsls	r2, r3, #22
 8008566:	d402      	bmi.n	800856e <_vfiprintf_r+0x2a>
 8008568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800856a:	f7fc ff1c 	bl	80053a6 <__retarget_lock_acquire_recursive>
 800856e:	89ab      	ldrh	r3, [r5, #12]
 8008570:	071b      	lsls	r3, r3, #28
 8008572:	d501      	bpl.n	8008578 <_vfiprintf_r+0x34>
 8008574:	692b      	ldr	r3, [r5, #16]
 8008576:	b99b      	cbnz	r3, 80085a0 <_vfiprintf_r+0x5c>
 8008578:	4629      	mov	r1, r5
 800857a:	4630      	mov	r0, r6
 800857c:	f000 f938 	bl	80087f0 <__swsetup_r>
 8008580:	b170      	cbz	r0, 80085a0 <_vfiprintf_r+0x5c>
 8008582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008584:	07dc      	lsls	r4, r3, #31
 8008586:	d504      	bpl.n	8008592 <_vfiprintf_r+0x4e>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	b01d      	add	sp, #116	@ 0x74
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	0598      	lsls	r0, r3, #22
 8008596:	d4f7      	bmi.n	8008588 <_vfiprintf_r+0x44>
 8008598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800859a:	f7fc ff05 	bl	80053a8 <__retarget_lock_release_recursive>
 800859e:	e7f3      	b.n	8008588 <_vfiprintf_r+0x44>
 80085a0:	2300      	movs	r3, #0
 80085a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a4:	2320      	movs	r3, #32
 80085a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ae:	2330      	movs	r3, #48	@ 0x30
 80085b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008760 <_vfiprintf_r+0x21c>
 80085b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085b8:	f04f 0901 	mov.w	r9, #1
 80085bc:	4623      	mov	r3, r4
 80085be:	469a      	mov	sl, r3
 80085c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c4:	b10a      	cbz	r2, 80085ca <_vfiprintf_r+0x86>
 80085c6:	2a25      	cmp	r2, #37	@ 0x25
 80085c8:	d1f9      	bne.n	80085be <_vfiprintf_r+0x7a>
 80085ca:	ebba 0b04 	subs.w	fp, sl, r4
 80085ce:	d00b      	beq.n	80085e8 <_vfiprintf_r+0xa4>
 80085d0:	465b      	mov	r3, fp
 80085d2:	4622      	mov	r2, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ffa2 	bl	8008520 <__sfputs_r>
 80085dc:	3001      	adds	r0, #1
 80085de:	f000 80a7 	beq.w	8008730 <_vfiprintf_r+0x1ec>
 80085e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e4:	445a      	add	r2, fp
 80085e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085e8:	f89a 3000 	ldrb.w	r3, [sl]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 809f 	beq.w	8008730 <_vfiprintf_r+0x1ec>
 80085f2:	2300      	movs	r3, #0
 80085f4:	f04f 32ff 	mov.w	r2, #4294967295
 80085f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085fc:	f10a 0a01 	add.w	sl, sl, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	9307      	str	r3, [sp, #28]
 8008604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008608:	931a      	str	r3, [sp, #104]	@ 0x68
 800860a:	4654      	mov	r4, sl
 800860c:	2205      	movs	r2, #5
 800860e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008612:	4853      	ldr	r0, [pc, #332]	@ (8008760 <_vfiprintf_r+0x21c>)
 8008614:	f7f7 fde4 	bl	80001e0 <memchr>
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	b9d8      	cbnz	r0, 8008654 <_vfiprintf_r+0x110>
 800861c:	06d1      	lsls	r1, r2, #27
 800861e:	bf44      	itt	mi
 8008620:	2320      	movmi	r3, #32
 8008622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008626:	0713      	lsls	r3, r2, #28
 8008628:	bf44      	itt	mi
 800862a:	232b      	movmi	r3, #43	@ 0x2b
 800862c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008630:	f89a 3000 	ldrb.w	r3, [sl]
 8008634:	2b2a      	cmp	r3, #42	@ 0x2a
 8008636:	d015      	beq.n	8008664 <_vfiprintf_r+0x120>
 8008638:	9a07      	ldr	r2, [sp, #28]
 800863a:	4654      	mov	r4, sl
 800863c:	2000      	movs	r0, #0
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4621      	mov	r1, r4
 8008644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008648:	3b30      	subs	r3, #48	@ 0x30
 800864a:	2b09      	cmp	r3, #9
 800864c:	d94b      	bls.n	80086e6 <_vfiprintf_r+0x1a2>
 800864e:	b1b0      	cbz	r0, 800867e <_vfiprintf_r+0x13a>
 8008650:	9207      	str	r2, [sp, #28]
 8008652:	e014      	b.n	800867e <_vfiprintf_r+0x13a>
 8008654:	eba0 0308 	sub.w	r3, r0, r8
 8008658:	fa09 f303 	lsl.w	r3, r9, r3
 800865c:	4313      	orrs	r3, r2
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	46a2      	mov	sl, r4
 8008662:	e7d2      	b.n	800860a <_vfiprintf_r+0xc6>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	1d19      	adds	r1, r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	9103      	str	r1, [sp, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	bfbb      	ittet	lt
 8008670:	425b      	neglt	r3, r3
 8008672:	f042 0202 	orrlt.w	r2, r2, #2
 8008676:	9307      	strge	r3, [sp, #28]
 8008678:	9307      	strlt	r3, [sp, #28]
 800867a:	bfb8      	it	lt
 800867c:	9204      	strlt	r2, [sp, #16]
 800867e:	7823      	ldrb	r3, [r4, #0]
 8008680:	2b2e      	cmp	r3, #46	@ 0x2e
 8008682:	d10a      	bne.n	800869a <_vfiprintf_r+0x156>
 8008684:	7863      	ldrb	r3, [r4, #1]
 8008686:	2b2a      	cmp	r3, #42	@ 0x2a
 8008688:	d132      	bne.n	80086f0 <_vfiprintf_r+0x1ac>
 800868a:	9b03      	ldr	r3, [sp, #12]
 800868c:	1d1a      	adds	r2, r3, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	9203      	str	r2, [sp, #12]
 8008692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008696:	3402      	adds	r4, #2
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008770 <_vfiprintf_r+0x22c>
 800869e:	7821      	ldrb	r1, [r4, #0]
 80086a0:	2203      	movs	r2, #3
 80086a2:	4650      	mov	r0, sl
 80086a4:	f7f7 fd9c 	bl	80001e0 <memchr>
 80086a8:	b138      	cbz	r0, 80086ba <_vfiprintf_r+0x176>
 80086aa:	9b04      	ldr	r3, [sp, #16]
 80086ac:	eba0 000a 	sub.w	r0, r0, sl
 80086b0:	2240      	movs	r2, #64	@ 0x40
 80086b2:	4082      	lsls	r2, r0
 80086b4:	4313      	orrs	r3, r2
 80086b6:	3401      	adds	r4, #1
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086be:	4829      	ldr	r0, [pc, #164]	@ (8008764 <_vfiprintf_r+0x220>)
 80086c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086c4:	2206      	movs	r2, #6
 80086c6:	f7f7 fd8b 	bl	80001e0 <memchr>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d03f      	beq.n	800874e <_vfiprintf_r+0x20a>
 80086ce:	4b26      	ldr	r3, [pc, #152]	@ (8008768 <_vfiprintf_r+0x224>)
 80086d0:	bb1b      	cbnz	r3, 800871a <_vfiprintf_r+0x1d6>
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	3307      	adds	r3, #7
 80086d6:	f023 0307 	bic.w	r3, r3, #7
 80086da:	3308      	adds	r3, #8
 80086dc:	9303      	str	r3, [sp, #12]
 80086de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e0:	443b      	add	r3, r7
 80086e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e4:	e76a      	b.n	80085bc <_vfiprintf_r+0x78>
 80086e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ea:	460c      	mov	r4, r1
 80086ec:	2001      	movs	r0, #1
 80086ee:	e7a8      	b.n	8008642 <_vfiprintf_r+0xfe>
 80086f0:	2300      	movs	r3, #0
 80086f2:	3401      	adds	r4, #1
 80086f4:	9305      	str	r3, [sp, #20]
 80086f6:	4619      	mov	r1, r3
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	4620      	mov	r0, r4
 80086fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008702:	3a30      	subs	r2, #48	@ 0x30
 8008704:	2a09      	cmp	r2, #9
 8008706:	d903      	bls.n	8008710 <_vfiprintf_r+0x1cc>
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0c6      	beq.n	800869a <_vfiprintf_r+0x156>
 800870c:	9105      	str	r1, [sp, #20]
 800870e:	e7c4      	b.n	800869a <_vfiprintf_r+0x156>
 8008710:	fb0c 2101 	mla	r1, ip, r1, r2
 8008714:	4604      	mov	r4, r0
 8008716:	2301      	movs	r3, #1
 8008718:	e7f0      	b.n	80086fc <_vfiprintf_r+0x1b8>
 800871a:	ab03      	add	r3, sp, #12
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	462a      	mov	r2, r5
 8008720:	4b12      	ldr	r3, [pc, #72]	@ (800876c <_vfiprintf_r+0x228>)
 8008722:	a904      	add	r1, sp, #16
 8008724:	4630      	mov	r0, r6
 8008726:	f7fb fea9 	bl	800447c <_printf_float>
 800872a:	4607      	mov	r7, r0
 800872c:	1c78      	adds	r0, r7, #1
 800872e:	d1d6      	bne.n	80086de <_vfiprintf_r+0x19a>
 8008730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008732:	07d9      	lsls	r1, r3, #31
 8008734:	d405      	bmi.n	8008742 <_vfiprintf_r+0x1fe>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	059a      	lsls	r2, r3, #22
 800873a:	d402      	bmi.n	8008742 <_vfiprintf_r+0x1fe>
 800873c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800873e:	f7fc fe33 	bl	80053a8 <__retarget_lock_release_recursive>
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	065b      	lsls	r3, r3, #25
 8008746:	f53f af1f 	bmi.w	8008588 <_vfiprintf_r+0x44>
 800874a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800874c:	e71e      	b.n	800858c <_vfiprintf_r+0x48>
 800874e:	ab03      	add	r3, sp, #12
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	462a      	mov	r2, r5
 8008754:	4b05      	ldr	r3, [pc, #20]	@ (800876c <_vfiprintf_r+0x228>)
 8008756:	a904      	add	r1, sp, #16
 8008758:	4630      	mov	r0, r6
 800875a:	f7fc f927 	bl	80049ac <_printf_i>
 800875e:	e7e4      	b.n	800872a <_vfiprintf_r+0x1e6>
 8008760:	08008b99 	.word	0x08008b99
 8008764:	08008ba3 	.word	0x08008ba3
 8008768:	0800447d 	.word	0x0800447d
 800876c:	08008521 	.word	0x08008521
 8008770:	08008b9f 	.word	0x08008b9f

08008774 <__swbuf_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	4614      	mov	r4, r2
 800877a:	4605      	mov	r5, r0
 800877c:	b118      	cbz	r0, 8008786 <__swbuf_r+0x12>
 800877e:	6a03      	ldr	r3, [r0, #32]
 8008780:	b90b      	cbnz	r3, 8008786 <__swbuf_r+0x12>
 8008782:	f7fc fccb 	bl	800511c <__sinit>
 8008786:	69a3      	ldr	r3, [r4, #24]
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	071a      	lsls	r2, r3, #28
 800878e:	d501      	bpl.n	8008794 <__swbuf_r+0x20>
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	b943      	cbnz	r3, 80087a6 <__swbuf_r+0x32>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f82a 	bl	80087f0 <__swsetup_r>
 800879c:	b118      	cbz	r0, 80087a6 <__swbuf_r+0x32>
 800879e:	f04f 37ff 	mov.w	r7, #4294967295
 80087a2:	4638      	mov	r0, r7
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	6922      	ldr	r2, [r4, #16]
 80087aa:	1a98      	subs	r0, r3, r2
 80087ac:	6963      	ldr	r3, [r4, #20]
 80087ae:	b2f6      	uxtb	r6, r6
 80087b0:	4283      	cmp	r3, r0
 80087b2:	4637      	mov	r7, r6
 80087b4:	dc05      	bgt.n	80087c2 <__swbuf_r+0x4e>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff fa5f 	bl	8007c7c <_fflush_r>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d1ed      	bne.n	800879e <__swbuf_r+0x2a>
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60a3      	str	r3, [r4, #8]
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	6022      	str	r2, [r4, #0]
 80087ce:	701e      	strb	r6, [r3, #0]
 80087d0:	6962      	ldr	r2, [r4, #20]
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d004      	beq.n	80087e2 <__swbuf_r+0x6e>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d5e1      	bpl.n	80087a2 <__swbuf_r+0x2e>
 80087de:	2e0a      	cmp	r6, #10
 80087e0:	d1df      	bne.n	80087a2 <__swbuf_r+0x2e>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7ff fa49 	bl	8007c7c <_fflush_r>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0d9      	beq.n	80087a2 <__swbuf_r+0x2e>
 80087ee:	e7d6      	b.n	800879e <__swbuf_r+0x2a>

080087f0 <__swsetup_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4b29      	ldr	r3, [pc, #164]	@ (8008898 <__swsetup_r+0xa8>)
 80087f4:	4605      	mov	r5, r0
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	460c      	mov	r4, r1
 80087fa:	b118      	cbz	r0, 8008804 <__swsetup_r+0x14>
 80087fc:	6a03      	ldr	r3, [r0, #32]
 80087fe:	b90b      	cbnz	r3, 8008804 <__swsetup_r+0x14>
 8008800:	f7fc fc8c 	bl	800511c <__sinit>
 8008804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008808:	0719      	lsls	r1, r3, #28
 800880a:	d422      	bmi.n	8008852 <__swsetup_r+0x62>
 800880c:	06da      	lsls	r2, r3, #27
 800880e:	d407      	bmi.n	8008820 <__swsetup_r+0x30>
 8008810:	2209      	movs	r2, #9
 8008812:	602a      	str	r2, [r5, #0]
 8008814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e033      	b.n	8008888 <__swsetup_r+0x98>
 8008820:	0758      	lsls	r0, r3, #29
 8008822:	d512      	bpl.n	800884a <__swsetup_r+0x5a>
 8008824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008826:	b141      	cbz	r1, 800883a <__swsetup_r+0x4a>
 8008828:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800882c:	4299      	cmp	r1, r3
 800882e:	d002      	beq.n	8008836 <__swsetup_r+0x46>
 8008830:	4628      	mov	r0, r5
 8008832:	f7fd fc19 	bl	8006068 <_free_r>
 8008836:	2300      	movs	r3, #0
 8008838:	6363      	str	r3, [r4, #52]	@ 0x34
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	2300      	movs	r3, #0
 8008844:	6063      	str	r3, [r4, #4]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f043 0308 	orr.w	r3, r3, #8
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	b94b      	cbnz	r3, 800886a <__swsetup_r+0x7a>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800885c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008860:	d003      	beq.n	800886a <__swsetup_r+0x7a>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 f883 	bl	8008970 <__smakebuf_r>
 800886a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886e:	f013 0201 	ands.w	r2, r3, #1
 8008872:	d00a      	beq.n	800888a <__swsetup_r+0x9a>
 8008874:	2200      	movs	r2, #0
 8008876:	60a2      	str	r2, [r4, #8]
 8008878:	6962      	ldr	r2, [r4, #20]
 800887a:	4252      	negs	r2, r2
 800887c:	61a2      	str	r2, [r4, #24]
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	b942      	cbnz	r2, 8008894 <__swsetup_r+0xa4>
 8008882:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008886:	d1c5      	bne.n	8008814 <__swsetup_r+0x24>
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	0799      	lsls	r1, r3, #30
 800888c:	bf58      	it	pl
 800888e:	6962      	ldrpl	r2, [r4, #20]
 8008890:	60a2      	str	r2, [r4, #8]
 8008892:	e7f4      	b.n	800887e <__swsetup_r+0x8e>
 8008894:	2000      	movs	r0, #0
 8008896:	e7f7      	b.n	8008888 <__swsetup_r+0x98>
 8008898:	20000030 	.word	0x20000030

0800889c <_raise_r>:
 800889c:	291f      	cmp	r1, #31
 800889e:	b538      	push	{r3, r4, r5, lr}
 80088a0:	4605      	mov	r5, r0
 80088a2:	460c      	mov	r4, r1
 80088a4:	d904      	bls.n	80088b0 <_raise_r+0x14>
 80088a6:	2316      	movs	r3, #22
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	f04f 30ff 	mov.w	r0, #4294967295
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088b2:	b112      	cbz	r2, 80088ba <_raise_r+0x1e>
 80088b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b8:	b94b      	cbnz	r3, 80088ce <_raise_r+0x32>
 80088ba:	4628      	mov	r0, r5
 80088bc:	f000 f830 	bl	8008920 <_getpid_r>
 80088c0:	4622      	mov	r2, r4
 80088c2:	4601      	mov	r1, r0
 80088c4:	4628      	mov	r0, r5
 80088c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ca:	f000 b817 	b.w	80088fc <_kill_r>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d00a      	beq.n	80088e8 <_raise_r+0x4c>
 80088d2:	1c59      	adds	r1, r3, #1
 80088d4:	d103      	bne.n	80088de <_raise_r+0x42>
 80088d6:	2316      	movs	r3, #22
 80088d8:	6003      	str	r3, [r0, #0]
 80088da:	2001      	movs	r0, #1
 80088dc:	e7e7      	b.n	80088ae <_raise_r+0x12>
 80088de:	2100      	movs	r1, #0
 80088e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088e4:	4620      	mov	r0, r4
 80088e6:	4798      	blx	r3
 80088e8:	2000      	movs	r0, #0
 80088ea:	e7e0      	b.n	80088ae <_raise_r+0x12>

080088ec <raise>:
 80088ec:	4b02      	ldr	r3, [pc, #8]	@ (80088f8 <raise+0xc>)
 80088ee:	4601      	mov	r1, r0
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	f7ff bfd3 	b.w	800889c <_raise_r>
 80088f6:	bf00      	nop
 80088f8:	20000030 	.word	0x20000030

080088fc <_kill_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d07      	ldr	r5, [pc, #28]	@ (800891c <_kill_r+0x20>)
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	f7f9 fad0 	bl	8001eae <_kill>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d102      	bne.n	8008918 <_kill_r+0x1c>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	b103      	cbz	r3, 8008918 <_kill_r+0x1c>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop
 800891c:	200004bc 	.word	0x200004bc

08008920 <_getpid_r>:
 8008920:	f7f9 babd 	b.w	8001e9e <_getpid>

08008924 <__swhatbuf_r>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	460c      	mov	r4, r1
 8008928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892c:	2900      	cmp	r1, #0
 800892e:	b096      	sub	sp, #88	@ 0x58
 8008930:	4615      	mov	r5, r2
 8008932:	461e      	mov	r6, r3
 8008934:	da0d      	bge.n	8008952 <__swhatbuf_r+0x2e>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800893c:	f04f 0100 	mov.w	r1, #0
 8008940:	bf14      	ite	ne
 8008942:	2340      	movne	r3, #64	@ 0x40
 8008944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008948:	2000      	movs	r0, #0
 800894a:	6031      	str	r1, [r6, #0]
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	b016      	add	sp, #88	@ 0x58
 8008950:	bd70      	pop	{r4, r5, r6, pc}
 8008952:	466a      	mov	r2, sp
 8008954:	f000 f848 	bl	80089e8 <_fstat_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	dbec      	blt.n	8008936 <__swhatbuf_r+0x12>
 800895c:	9901      	ldr	r1, [sp, #4]
 800895e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008966:	4259      	negs	r1, r3
 8008968:	4159      	adcs	r1, r3
 800896a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800896e:	e7eb      	b.n	8008948 <__swhatbuf_r+0x24>

08008970 <__smakebuf_r>:
 8008970:	898b      	ldrh	r3, [r1, #12]
 8008972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008974:	079d      	lsls	r5, r3, #30
 8008976:	4606      	mov	r6, r0
 8008978:	460c      	mov	r4, r1
 800897a:	d507      	bpl.n	800898c <__smakebuf_r+0x1c>
 800897c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	2301      	movs	r3, #1
 8008986:	6163      	str	r3, [r4, #20]
 8008988:	b003      	add	sp, #12
 800898a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898c:	ab01      	add	r3, sp, #4
 800898e:	466a      	mov	r2, sp
 8008990:	f7ff ffc8 	bl	8008924 <__swhatbuf_r>
 8008994:	9f00      	ldr	r7, [sp, #0]
 8008996:	4605      	mov	r5, r0
 8008998:	4639      	mov	r1, r7
 800899a:	4630      	mov	r0, r6
 800899c:	f7fd fbd8 	bl	8006150 <_malloc_r>
 80089a0:	b948      	cbnz	r0, 80089b6 <__smakebuf_r+0x46>
 80089a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a6:	059a      	lsls	r2, r3, #22
 80089a8:	d4ee      	bmi.n	8008988 <__smakebuf_r+0x18>
 80089aa:	f023 0303 	bic.w	r3, r3, #3
 80089ae:	f043 0302 	orr.w	r3, r3, #2
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	e7e2      	b.n	800897c <__smakebuf_r+0xc>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	6020      	str	r0, [r4, #0]
 80089ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089c6:	b15b      	cbz	r3, 80089e0 <__smakebuf_r+0x70>
 80089c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 f81d 	bl	8008a0c <_isatty_r>
 80089d2:	b128      	cbz	r0, 80089e0 <__smakebuf_r+0x70>
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	f023 0303 	bic.w	r3, r3, #3
 80089da:	f043 0301 	orr.w	r3, r3, #1
 80089de:	81a3      	strh	r3, [r4, #12]
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	431d      	orrs	r5, r3
 80089e4:	81a5      	strh	r5, [r4, #12]
 80089e6:	e7cf      	b.n	8008988 <__smakebuf_r+0x18>

080089e8 <_fstat_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4d07      	ldr	r5, [pc, #28]	@ (8008a08 <_fstat_r+0x20>)
 80089ec:	2300      	movs	r3, #0
 80089ee:	4604      	mov	r4, r0
 80089f0:	4608      	mov	r0, r1
 80089f2:	4611      	mov	r1, r2
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	f7f9 faba 	bl	8001f6e <_fstat>
 80089fa:	1c43      	adds	r3, r0, #1
 80089fc:	d102      	bne.n	8008a04 <_fstat_r+0x1c>
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	b103      	cbz	r3, 8008a04 <_fstat_r+0x1c>
 8008a02:	6023      	str	r3, [r4, #0]
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	bf00      	nop
 8008a08:	200004bc 	.word	0x200004bc

08008a0c <_isatty_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d06      	ldr	r5, [pc, #24]	@ (8008a28 <_isatty_r+0x1c>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	602b      	str	r3, [r5, #0]
 8008a18:	f7f9 fab9 	bl	8001f8e <_isatty>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_isatty_r+0x1a>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_isatty_r+0x1a>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	200004bc 	.word	0x200004bc

08008a2c <_init>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr

08008a38 <_fini>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr
