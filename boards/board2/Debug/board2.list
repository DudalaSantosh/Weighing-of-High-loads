
board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003f40  08003f40  00004f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fac  08003fac  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb4  08003fb4  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb4  08003fb4  00004fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003fbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000006c  08004028  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004028  000052c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009990  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001906  00000000  00000000  0000ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00010338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c5  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a90  00000000  00000000  000112d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4e4  00000000  00000000  00026d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008697b  00000000  00000000  00031249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7bc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000292c  00000000  00000000  000b7c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ba534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f28 	.word	0x08003f28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003f28 	.word	0x08003f28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_12


void CS_Select (void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005b6:	4802      	ldr	r0, [pc, #8]	@ (80005c0 <CS_Select+0x14>)
 80005b8:	f001 f8e0 	bl	800177c <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40020400 	.word	0x40020400

080005c4 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ce:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <CS_UnSelect+0x14>)
 80005d0:	f001 f8d4 	bl	800177c <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020400 	.word	0x40020400

080005dc <CE_Enable>:


void CE_Enable (void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e6:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <CE_Enable+0x14>)
 80005e8:	f001 f8c8 	bl	800177c <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020400 	.word	0x40020400

080005f4 <CE_Disable>:

void CE_Disable (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fe:	4802      	ldr	r0, [pc, #8]	@ (8000608 <CE_Disable+0x14>)
 8000600:	f001 f8bc 	bl	800177c <HAL_GPIO_WritePin>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020400 	.word	0x40020400

0800060c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	b2db      	uxtb	r3, r3
 8000624:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800062a:	f7ff ffbf 	bl	80005ac <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800062e:	f107 010c 	add.w	r1, r7, #12
 8000632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000636:	2202      	movs	r2, #2
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <nrf24_WriteReg+0x40>)
 800063a:	f001 fdb4 	bl	80021a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800063e:	f7ff ffc1 	bl	80005c4 <CS_UnSelect>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000088 	.word	0x20000088

08000650 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	b2db      	uxtb	r3, r3
 8000666:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000668:	f7ff ffa0 	bl	80005ac <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800066c:	f107 0114 	add.w	r1, r7, #20
 8000670:	2364      	movs	r3, #100	@ 0x64
 8000672:	2201      	movs	r2, #1
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <nrf24_WriteRegMulti+0x48>)
 8000676:	f001 fd96 	bl	80021a6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	b29a      	uxth	r2, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <nrf24_WriteRegMulti+0x48>)
 8000686:	f001 fd8e 	bl	80021a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800068a:	f7ff ff9b 	bl	80005c4 <CS_UnSelect>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000088 	.word	0x20000088

0800069c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006aa:	f7ff ff7f 	bl	80005ac <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80006ae:	1df9      	adds	r1, r7, #7
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	4808      	ldr	r0, [pc, #32]	@ (80006d8 <nrf24_ReadReg+0x3c>)
 80006b6:	f001 fd76 	bl	80021a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80006ba:	f107 010f 	add.w	r1, r7, #15
 80006be:	2364      	movs	r3, #100	@ 0x64
 80006c0:	2201      	movs	r2, #1
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <nrf24_ReadReg+0x3c>)
 80006c4:	f001 feb3 	bl	800242e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006c8:	f7ff ff7c 	bl	80005c4 <CS_UnSelect>

	return data;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000088 	.word	0x20000088

080006dc <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80006e6:	f7ff ff61 	bl	80005ac <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80006ea:	1df9      	adds	r1, r7, #7
 80006ec:	2364      	movs	r3, #100	@ 0x64
 80006ee:	2201      	movs	r2, #1
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <nrfsendCmd+0x28>)
 80006f2:	f001 fd58 	bl	80021a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80006f6:	f7ff ff65 	bl	80005c4 <CS_UnSelect>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000088 	.word	0x20000088

08000708 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b07      	cmp	r3, #7
 8000716:	d104      	bne.n	8000722 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000718:	2100      	movs	r1, #0
 800071a:	2007      	movs	r0, #7
 800071c:	f7ff ff76 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000720:	e090      	b.n	8000844 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b17      	cmp	r3, #23
 8000726:	d104      	bne.n	8000732 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000728:	2111      	movs	r1, #17
 800072a:	2017      	movs	r0, #23
 800072c:	f7ff ff6e 	bl	800060c <nrf24_WriteReg>
}
 8000730:	e088      	b.n	8000844 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000732:	2108      	movs	r1, #8
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff ff69 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800073a:	213f      	movs	r1, #63	@ 0x3f
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff65 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000742:	2103      	movs	r1, #3
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff ff61 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800074a:	2103      	movs	r1, #3
 800074c:	2003      	movs	r0, #3
 800074e:	f7ff ff5d 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000752:	2103      	movs	r1, #3
 8000754:	2004      	movs	r0, #4
 8000756:	f7ff ff59 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800075a:	2102      	movs	r1, #2
 800075c:	2005      	movs	r0, #5
 800075e:	f7ff ff55 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000762:	210e      	movs	r1, #14
 8000764:	2006      	movs	r0, #6
 8000766:	f7ff ff51 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800076a:	2100      	movs	r1, #0
 800076c:	2007      	movs	r0, #7
 800076e:	f7ff ff4d 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000772:	2100      	movs	r1, #0
 8000774:	2008      	movs	r0, #8
 8000776:	f7ff ff49 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800077a:	2100      	movs	r1, #0
 800077c:	2009      	movs	r0, #9
 800077e:	f7ff ff45 	bl	800060c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000782:	4a32      	ldr	r2, [pc, #200]	@ (800084c <nrf24_reset+0x144>)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078c:	6018      	str	r0, [r3, #0]
 800078e:	3304      	adds	r3, #4
 8000790:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2205      	movs	r2, #5
 8000798:	4619      	mov	r1, r3
 800079a:	200a      	movs	r0, #10
 800079c:	f7ff ff58 	bl	8000650 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80007a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000850 <nrf24_reset+0x148>)
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007aa:	6018      	str	r0, [r3, #0]
 80007ac:	3304      	adds	r3, #4
 80007ae:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2205      	movs	r2, #5
 80007b6:	4619      	mov	r1, r3
 80007b8:	200b      	movs	r0, #11
 80007ba:	f7ff ff49 	bl	8000650 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80007be:	21c3      	movs	r1, #195	@ 0xc3
 80007c0:	200c      	movs	r0, #12
 80007c2:	f7ff ff23 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80007c6:	21c4      	movs	r1, #196	@ 0xc4
 80007c8:	200d      	movs	r0, #13
 80007ca:	f7ff ff1f 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80007ce:	21c5      	movs	r1, #197	@ 0xc5
 80007d0:	200e      	movs	r0, #14
 80007d2:	f7ff ff1b 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80007d6:	21c6      	movs	r1, #198	@ 0xc6
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ff17 	bl	800060c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80007de:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <nrf24_reset+0x144>)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e8:	6018      	str	r0, [r3, #0]
 80007ea:	3304      	adds	r3, #4
 80007ec:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2205      	movs	r2, #5
 80007f4:	4619      	mov	r1, r3
 80007f6:	2010      	movs	r0, #16
 80007f8:	f7ff ff2a 	bl	8000650 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80007fc:	2100      	movs	r1, #0
 80007fe:	2011      	movs	r0, #17
 8000800:	f7ff ff04 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000804:	2100      	movs	r1, #0
 8000806:	2012      	movs	r0, #18
 8000808:	f7ff ff00 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800080c:	2100      	movs	r1, #0
 800080e:	2013      	movs	r0, #19
 8000810:	f7ff fefc 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2014      	movs	r0, #20
 8000818:	f7ff fef8 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800081c:	2100      	movs	r1, #0
 800081e:	2015      	movs	r0, #21
 8000820:	f7ff fef4 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000824:	2100      	movs	r1, #0
 8000826:	2016      	movs	r0, #22
 8000828:	f7ff fef0 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800082c:	2111      	movs	r1, #17
 800082e:	2017      	movs	r0, #23
 8000830:	f7ff feec 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000834:	2100      	movs	r1, #0
 8000836:	201c      	movs	r0, #28
 8000838:	f7ff fee8 	bl	800060c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800083c:	2100      	movs	r1, #0
 800083e:	201d      	movs	r0, #29
 8000840:	f7ff fee4 	bl	800060c <nrf24_WriteReg>
}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08003f40 	.word	0x08003f40
 8000850:	08003f48 	.word	0x08003f48

08000854 <NRF24_Init>:




void NRF24_Init (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000858:	f7ff fecc 	bl	80005f4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ff53 	bl	8000708 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fed1 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800086a:	2100      	movs	r1, #0
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fecd 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000872:	2100      	movs	r1, #0
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fec9 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800087a:	2103      	movs	r1, #3
 800087c:	2003      	movs	r0, #3
 800087e:	f7ff fec5 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000882:	2100      	movs	r1, #0
 8000884:	2004      	movs	r0, #4
 8000886:	f7ff fec1 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800088a:	2100      	movs	r1, #0
 800088c:	2005      	movs	r0, #5
 800088e:	f7ff febd 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000892:	210e      	movs	r1, #14
 8000894:	2006      	movs	r0, #6
 8000896:	f7ff feb9 	bl	800060c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800089a:	f7ff fe9f 	bl	80005dc <CE_Enable>

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80008b0:	f7ff fea0 	bl	80005f4 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	4619      	mov	r1, r3
 80008b8:	2005      	movs	r0, #5
 80008ba:	f7ff fea7 	bl	800060c <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 80008be:	2205      	movs	r2, #5
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	2010      	movs	r0, #16
 80008c4:	f7ff fec4 	bl	8000650 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fee7 	bl	800069c <nrf24_ReadReg>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	f023 030d 	bic.w	r3, r3, #13
 80008d8:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	4619      	mov	r1, r3
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fe94 	bl	800060c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80008e4:	f7ff fe7a 	bl	80005dc <CE_Enable>
    // 1) --- Ensure CONFIG = PWR_UP=1, PRIM_RX=0 (TX mode) ---
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);        // CSN = 0
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ee:	4826      	ldr	r0, [pc, #152]	@ (8000988 <NRF24_TxMode+0xe4>)
 80008f0:	f000 ff44 	bl	800177c <HAL_GPIO_WritePin>
      uint8_t cfg_cmd = 0x00;                                     // R_REGISTER | CONFIG
 80008f4:	2300      	movs	r3, #0
 80008f6:	737b      	strb	r3, [r7, #13]
      HAL_SPI_Transmit(&hspi2, &cfg_cmd, 1, HAL_MAX_DELAY);
 80008f8:	f107 010d 	add.w	r1, r7, #13
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000900:	2201      	movs	r2, #1
 8000902:	4822      	ldr	r0, [pc, #136]	@ (800098c <NRF24_TxMode+0xe8>)
 8000904:	f001 fc4f 	bl	80021a6 <HAL_SPI_Transmit>
      uint8_t cfg_val = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	733b      	strb	r3, [r7, #12]
      HAL_SPI_Receive(&hspi2, &cfg_val, 1, HAL_MAX_DELAY);
 800090c:	f107 010c 	add.w	r1, r7, #12
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	2201      	movs	r2, #1
 8000916:	481d      	ldr	r0, [pc, #116]	@ (800098c <NRF24_TxMode+0xe8>)
 8000918:	f001 fd89 	bl	800242e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);          // CSN = 1
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000922:	4819      	ldr	r0, [pc, #100]	@ (8000988 <NRF24_TxMode+0xe4>)
 8000924:	f000 ff2a 	bl	800177c <HAL_GPIO_WritePin>

    if ((cfg_val & (1<<1)) == 0 || (cfg_val & (1<<0)))
 8000928:	7b3b      	ldrb	r3, [r7, #12]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <NRF24_TxMode+0x98>
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d021      	beq.n	8000980 <NRF24_TxMode+0xdc>
    {
        uint8_t new_cfg = (cfg_val | (1<<1)) & ~(1<<0);
 800093c:	7b3b      	ldrb	r3, [r7, #12]
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	73bb      	strb	r3, [r7, #14]
        uint8_t write_cfg[2] = { (0x20 | 0x00), new_cfg };        // W_REGISTER|CONFIG
 800094a:	2320      	movs	r3, #32
 800094c:	723b      	strb	r3, [r7, #8]
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	727b      	strb	r3, [r7, #9]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);    // CSN = 0
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000958:	480b      	ldr	r0, [pc, #44]	@ (8000988 <NRF24_TxMode+0xe4>)
 800095a:	f000 ff0f 	bl	800177c <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&hspi2, write_cfg, 2, HAL_MAX_DELAY);
 800095e:	f107 0108 	add.w	r1, r7, #8
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	2202      	movs	r2, #2
 8000968:	4808      	ldr	r0, [pc, #32]	@ (800098c <NRF24_TxMode+0xe8>)
 800096a:	f001 fc1c 	bl	80021a6 <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);      // CSN = 1
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <NRF24_TxMode+0xe4>)
 8000976:	f000 ff01 	bl	800177c <HAL_GPIO_WritePin>
        HAL_Delay(2);  // allow power-up
 800097a:	2002      	movs	r0, #2
 800097c:	f000 fc70 	bl	8001260 <HAL_Delay>
    }
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020400 	.word	0x40020400
 800098c:	20000088 	.word	0x20000088

08000990 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 800099c:	f7ff fe06 	bl	80005ac <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80009a0:	23a0      	movs	r3, #160	@ 0xa0
 80009a2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80009a4:	f107 010e 	add.w	r1, r7, #14
 80009a8:	2364      	movs	r3, #100	@ 0x64
 80009aa:	2201      	movs	r2, #1
 80009ac:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <NRF24_Transmit+0x78>)
 80009ae:	f001 fbfa 	bl	80021a6 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	2220      	movs	r2, #32
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <NRF24_Transmit+0x78>)
 80009bc:	f001 fbf3 	bl	80021a6 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80009c0:	f7ff fe00 	bl	80005c4 <CS_UnSelect>

	HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fc4b 	bl	8001260 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80009ca:	2017      	movs	r0, #23
 80009cc:	f7ff fe66 	bl	800069c <nrf24_ReadReg>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00f      	beq.n	80009fe <NRF24_Transmit+0x6e>
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10a      	bne.n	80009fe <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 80009e8:	23e1      	movs	r3, #225	@ 0xe1
 80009ea:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe74 	bl	80006dc <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80009f4:	2017      	movs	r0, #23
 80009f6:	f7ff fe87 	bl	8000708 <nrf24_reset>

		return 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <NRF24_Transmit+0x70>
	}

	return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000088 	.word	0x20000088

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	@ 0x50
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fbb3 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f89d 	bl	8000b54 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	@ 0x64
 8000a1c:	f000 fc20 	bl	8001260 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f000 f982 	bl	8000d28 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a24:	f000 f8f6 	bl	8000c14 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000a28:	f000 f92a 	bl	8000c80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a2c:	f000 f952 	bl	8000cd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_Delay(10);
 8000a30:	200a      	movs	r0, #10
 8000a32:	f000 fc15 	bl	8001260 <HAL_Delay>
  	  NRF24_Init();
 8000a36:	f7ff ff0d 	bl	8000854 <NRF24_Init>

  	  NRF24_TxMode(TxAddress, 10);
 8000a3a:	210a      	movs	r1, #10
 8000a3c:	483d      	ldr	r0, [pc, #244]	@ (8000b34 <main+0x128>)
 8000a3e:	f7ff ff31 	bl	80008a4 <NRF24_TxMode>
  	 HAL_Delay(5);
 8000a42:	2005      	movs	r0, #5
 8000a44:	f000 fc0c 	bl	8001260 <HAL_Delay>
     HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a4e:	483a      	ldr	r0, [pc, #232]	@ (8000b38 <main+0x12c>)
 8000a50:	f000 fe94 	bl	800177c <HAL_GPIO_WritePin>

	 char TxBuf[16];
	 uint8_t status;
	 HAL_Delay(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a58:	f000 fc02 	bl	8001260 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
    {


	  int txLen = snprintf(TxBuf, sizeof(TxBuf), "=REQ:%d\n", 2);
 8000a5c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000a60:	2302      	movs	r3, #2
 8000a62:	4a36      	ldr	r2, [pc, #216]	@ (8000b3c <main+0x130>)
 8000a64:	2110      	movs	r1, #16
 8000a66:	f002 fd89 	bl	800357c <sniprintf>
 8000a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4833      	ldr	r0, [pc, #204]	@ (8000b40 <main+0x134>)
 8000a72:	f000 fe83 	bl	800177c <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuf, txLen, 1000);
 8000a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	4830      	ldr	r0, [pc, #192]	@ (8000b44 <main+0x138>)
 8000a84:	f002 f928 	bl	8002cd8 <HAL_UART_Transmit>
//	  while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) == RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	482c      	ldr	r0, [pc, #176]	@ (8000b40 <main+0x134>)
 8000a8e:	f000 fe75 	bl	800177c <HAL_GPIO_WritePin>

	  char RxBuf[16];
	  uint8_t c;
	  int idx = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	64bb      	str	r3, [r7, #72]	@ 0x48
	  int pdx=0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	647b      	str	r3, [r7, #68]	@ 0x44
	  int flg=0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	643b      	str	r3, [r7, #64]	@ 0x40
	  while (HAL_UART_Receive(&huart2, &c, 1, 1000) == HAL_OK) {
 8000a9e:	e018      	b.n	8000ad2 <main+0xc6>

	      RxBuf[idx++] = c;
 8000aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000aa6:	7efa      	ldrb	r2, [r7, #27]
 8000aa8:	3350      	adds	r3, #80	@ 0x50
 8000aaa:	443b      	add	r3, r7
 8000aac:	f803 2c34 	strb.w	r2, [r3, #-52]
	      if(c=='+' || flg==1){
 8000ab0:	7efb      	ldrb	r3, [r7, #27]
 8000ab2:	2b2b      	cmp	r3, #43	@ 0x2b
 8000ab4:	d002      	beq.n	8000abc <main+0xb0>
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <main+0xc0>
	    	  TxData[pdx++]=c;
 8000abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	647a      	str	r2, [r7, #68]	@ 0x44
 8000ac2:	7ef9      	ldrb	r1, [r7, #27]
 8000ac4:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <main+0x13c>)
 8000ac6:	54d1      	strb	r1, [r2, r3]
	    	  flg=1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	643b      	str	r3, [r7, #64]	@ 0x40
	      }
	      if (c == '\n') break;
 8000acc:	7efb      	ldrb	r3, [r7, #27]
 8000ace:	2b0a      	cmp	r3, #10
 8000ad0:	d00b      	beq.n	8000aea <main+0xde>
	  while (HAL_UART_Receive(&huart2, &c, 1, 1000) == HAL_OK) {
 8000ad2:	f107 011b 	add.w	r1, r7, #27
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	2201      	movs	r2, #1
 8000adc:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <main+0x138>)
 8000ade:	f002 f986 	bl	8002dee <HAL_UART_Receive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0db      	beq.n	8000aa0 <main+0x94>
 8000ae8:	e000      	b.n	8000aec <main+0xe0>
	      if (c == '\n') break;
 8000aea:	bf00      	nop
	  }
	  RxBuf[idx] = '\0';
 8000aec:	f107 021c 	add.w	r2, r7, #28
 8000af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000af2:	4413      	add	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
	  if(flg){
 8000af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <main+0xfe>
		  status = NRF24_Transmit(TxData);
 8000afe:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <main+0x13c>)
 8000b00:	f7ff ff46 	bl	8000990 <NRF24_Transmit>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  }
	  char bufs[25];
	  sprintf(bufs,"%d",status);
 8000b0a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8000b0e:	463b      	mov	r3, r7
 8000b10:	490e      	ldr	r1, [pc, #56]	@ (8000b4c <main+0x140>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fd68 	bl	80035e8 <siprintf>
	  if(status){
 8000b18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d004      	beq.n	8000b2a <main+0x11e>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b24:	480a      	ldr	r0, [pc, #40]	@ (8000b50 <main+0x144>)
 8000b26:	f000 fe42 	bl	80017ae <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	@ 0x64
 8000b2c:	f000 fb98 	bl	8001260 <HAL_Delay>
    {
 8000b30:	e794      	b.n	8000a5c <main+0x50>
 8000b32:	bf00      	nop
 8000b34:	20000000 	.word	0x20000000
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	08003f50 	.word	0x08003f50
 8000b40:	40020000 	.word	0x40020000
 8000b44:	20000128 	.word	0x20000128
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	08003f5c 	.word	0x08003f5c
 8000b50:	40020800 	.word	0x40020800

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fd62 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <SystemClock_Config+0xb8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <SystemClock_Config+0xb8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <SystemClock_Config+0xb8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <SystemClock_Config+0xbc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <SystemClock_Config+0xbc>)
 8000ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <SystemClock_Config+0xbc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fe0b 	bl	80017e4 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bd4:	f000 f93e 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f86e 	bl	8001cd4 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f000 f929 	bl	8000e54 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c1a:	4a18      	ldr	r2, [pc, #96]	@ (8000c7c <MX_SPI2_Init+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c60:	220a      	movs	r2, #10
 8000c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_SPI2_Init+0x64>)
 8000c66:	f001 fa15 	bl	8002094 <HAL_SPI_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c70:	f000 f8f0 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000088 	.word	0x20000088
 8000c7c:	40003800 	.word	0x40003800

08000c80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <MX_USART1_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000cb8:	f001 ffbe 	bl	8002c38 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f8c7 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000e0 	.word	0x200000e0
 8000cd0:	40011000 	.word	0x40011000

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <MX_USART2_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f001 ff94 	bl	8002c38 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f89d 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000128 	.word	0x20000128
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b40      	ldr	r3, [pc, #256]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a3f      	ldr	r2, [pc, #252]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b39      	ldr	r3, [pc, #228]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a38      	ldr	r2, [pc, #224]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b32      	ldr	r3, [pc, #200]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a31      	ldr	r2, [pc, #196]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <MX_GPIO_Init+0x11c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d98:	482b      	ldr	r0, [pc, #172]	@ (8000e48 <MX_GPIO_Init+0x120>)
 8000d9a:	f000 fcef 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|CONTROL_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000da4:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000da6:	f000 fce9 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5190 	mov.w	r1, #4608	@ 0x1200
 8000db0:	4827      	ldr	r0, [pc, #156]	@ (8000e50 <MX_GPIO_Init+0x128>)
 8000db2:	f000 fce3 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <MX_GPIO_Init+0x120>)
 8000dd0:	f000 fb50 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 CONTROL_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|CONTROL_Pin;
 8000dd4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000dee:	f000 fb41 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCN_Pin CE_Pin */
  GPIO_InitStruct.Pin = SCN_Pin|CE_Pin;
 8000df2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4811      	ldr	r0, [pc, #68]	@ (8000e50 <MX_GPIO_Init+0x128>)
 8000e0c:	f000 fb32 	bl	8001474 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e16:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <MX_GPIO_Init+0x120>)
 8000e18:	f000 fcb0 	bl	800177c <HAL_GPIO_WritePin>

/*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_GPIO_Init+0x120>)
 8000e36:	f000 fb1d 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <HAL_SPI_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12c      	bne.n	8000f2c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <HAL_SPI_MspInit+0x88>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <HAL_SPI_MspInit+0x88>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_SPI_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f0a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <HAL_SPI_MspInit+0x8c>)
 8000f28:	f000 faa4 	bl	8001474 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40003800 	.word	0x40003800
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	@ 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a32      	ldr	r2, [pc, #200]	@ (8001028 <HAL_UART_MspInit+0xe8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12d      	bne.n	8000fbe <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b31      	ldr	r3, [pc, #196]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	4a30      	ldr	r2, [pc, #192]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f72:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a29      	ldr	r2, [pc, #164]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b27      	ldr	r3, [pc, #156]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fac:	2307      	movs	r3, #7
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481e      	ldr	r0, [pc, #120]	@ (8001030 <HAL_UART_MspInit+0xf0>)
 8000fb8:	f000 fa5c 	bl	8001474 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbc:	e030      	b.n	8001020 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <HAL_UART_MspInit+0xf4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d12b      	bne.n	8001020 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a16      	ldr	r2, [pc, #88]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b10      	ldr	r3, [pc, #64]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_UART_MspInit+0xec>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001000:	230c      	movs	r3, #12
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001010:	2307      	movs	r3, #7
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <HAL_UART_MspInit+0xf0>)
 800101c:	f000 fa2a 	bl	8001474 <HAL_GPIO_Init>
}
 8001020:	bf00      	nop
 8001022:	3730      	adds	r7, #48	@ 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40011000 	.word	0x40011000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40004400 	.word	0x40004400

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <NMI_Handler+0x4>

08001040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <MemManage_Handler+0x4>

08001050 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <UsageFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108e:	f000 f8c7 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f002 fab8 	bl	800363c <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20010000 	.word	0x20010000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	20000170 	.word	0x20000170
 8001100:	200002c0 	.word	0x200002c0

08001104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800112c:	f7ff ffea 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	@ (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 fa77 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fc57 	bl	8000a0c <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001168:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800116c:	08003fbc 	.word	0x08003fbc
  ldr r2, =_sbss
 8001170:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001174:	200002c0 	.word	0x200002c0

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f931 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f808 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fe56 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_InitTick+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_InitTick+0x58>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f93b 	bl	800145a <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00e      	b.n	800120c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80a      	bhi.n	800120a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f4:	2200      	movs	r2, #0
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f000 f911 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <HAL_InitTick+0x5c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	e000      	b.n	800120c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000010 	.word	0x20000010
 8001218:	20000018 	.word	0x20000018
 800121c:	20000014 	.word	0x20000014

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000018 	.word	0x20000018
 8001244:	20000174 	.word	0x20000174

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000174 	.word	0x20000174

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d005      	beq.n	8001286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <HAL_Delay+0x44>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001286:	bf00      	nop
 8001288:	f7ff ffde 	bl	8001248 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	d8f7      	bhi.n	8001288 <HAL_Delay+0x28>
  {
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000018 	.word	0x20000018

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff47 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff5c 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffb0 	bl	80013c8 <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e159      	b.n	8001744 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8148 	bne.w	800173e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d130      	bne.n	8001528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a2 	beq.w	800173e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <HAL_GPIO_Init+0x2e8>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a56      	ldr	r2, [pc, #344]	@ (800175c <HAL_GPIO_Init+0x2e8>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b54      	ldr	r3, [pc, #336]	@ (800175c <HAL_GPIO_Init+0x2e8>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a52      	ldr	r2, [pc, #328]	@ (8001760 <HAL_GPIO_Init+0x2ec>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a49      	ldr	r2, [pc, #292]	@ (8001764 <HAL_GPIO_Init+0x2f0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0x202>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a48      	ldr	r2, [pc, #288]	@ (8001768 <HAL_GPIO_Init+0x2f4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x1fe>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a47      	ldr	r2, [pc, #284]	@ (800176c <HAL_GPIO_Init+0x2f8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x1fa>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a46      	ldr	r2, [pc, #280]	@ (8001770 <HAL_GPIO_Init+0x2fc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x1f6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a45      	ldr	r2, [pc, #276]	@ (8001774 <HAL_GPIO_Init+0x300>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x1f2>
 8001662:	2304      	movs	r3, #4
 8001664:	e008      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001666:	2307      	movs	r3, #7
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x204>
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x204>
 800166e:	2302      	movs	r3, #2
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x204>
 8001676:	2300      	movs	r3, #0
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f002 0203 	and.w	r2, r2, #3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001688:	4935      	ldr	r1, [pc, #212]	@ (8001760 <HAL_GPIO_Init+0x2ec>)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b38      	ldr	r3, [pc, #224]	@ (8001778 <HAL_GPIO_Init+0x304>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001778 <HAL_GPIO_Init+0x304>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <HAL_GPIO_Init+0x304>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a24      	ldr	r2, [pc, #144]	@ (8001778 <HAL_GPIO_Init+0x304>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <HAL_GPIO_Init+0x304>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <HAL_GPIO_Init+0x304>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <HAL_GPIO_Init+0x304>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001738:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <HAL_GPIO_Init+0x304>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3301      	adds	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	f67f aea2 	bls.w	8001490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40013800 	.word	0x40013800
 8001764:	40020000 	.word	0x40020000
 8001768:	40020400 	.word	0x40020400
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40021000 	.word	0x40021000
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	400b      	ands	r3, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e267      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d075      	beq.n	80018ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001802:	4b88      	ldr	r3, [pc, #544]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d00c      	beq.n	8001828 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180e:	4b85      	ldr	r3, [pc, #532]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001816:	2b08      	cmp	r3, #8
 8001818:	d112      	bne.n	8001840 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181a:	4b82      	ldr	r3, [pc, #520]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001826:	d10b      	bne.n	8001840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	4b7e      	ldr	r3, [pc, #504]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d05b      	beq.n	80018ec <HAL_RCC_OscConfig+0x108>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d157      	bne.n	80018ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e242      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001848:	d106      	bne.n	8001858 <HAL_RCC_OscConfig+0x74>
 800184a:	4b76      	ldr	r3, [pc, #472]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a75      	ldr	r2, [pc, #468]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01d      	b.n	8001894 <HAL_RCC_OscConfig+0xb0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x98>
 8001862:	4b70      	ldr	r3, [pc, #448]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6f      	ldr	r2, [pc, #444]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6c      	ldr	r2, [pc, #432]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0xb0>
 800187c:	4b69      	ldr	r3, [pc, #420]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a68      	ldr	r2, [pc, #416]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a65      	ldr	r2, [pc, #404]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fcd4 	bl	8001248 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fcd0 	bl	8001248 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	@ 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e207      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0xc0>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fcc0 	bl	8001248 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fcbc 	bl	8001248 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	@ 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1f3      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0xe8>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b47      	ldr	r3, [pc, #284]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800190e:	2b08      	cmp	r3, #8
 8001910:	d11c      	bne.n	800194c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001912:	4b44      	ldr	r3, [pc, #272]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d116      	bne.n	800194c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	4b41      	ldr	r3, [pc, #260]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x152>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e1c7      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4937      	ldr	r1, [pc, #220]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	e03a      	b.n	80019c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <HAL_RCC_OscConfig+0x244>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fc75 	bl	8001248 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fc71 	bl	8001248 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e1a8      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4925      	ldr	r1, [pc, #148]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <HAL_RCC_OscConfig+0x244>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fc54 	bl	8001248 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fc50 	bl	8001248 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e187      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d036      	beq.n	8001a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d016      	beq.n	8001a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_RCC_OscConfig+0x248>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff fc34 	bl	8001248 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc30 	bl	8001248 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e167      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_RCC_OscConfig+0x240>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x200>
 8001a02:	e01b      	b.n	8001a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x248>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fc1d 	bl	8001248 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	e00e      	b.n	8001a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff fc19 	bl	8001248 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d907      	bls.n	8001a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e150      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	42470000 	.word	0x42470000
 8001a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	4b88      	ldr	r3, [pc, #544]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ea      	bne.n	8001a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 8097 	beq.w	8001b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b81      	ldr	r3, [pc, #516]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10f      	bne.n	8001a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	4a7c      	ldr	r2, [pc, #496]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b77      	ldr	r3, [pc, #476]	@ (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b74      	ldr	r3, [pc, #464]	@ (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a73      	ldr	r2, [pc, #460]	@ (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fbd9 	bl	8001248 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff fbd5 	bl	8001248 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e10c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b6a      	ldr	r3, [pc, #424]	@ (8001c58 <HAL_RCC_OscConfig+0x474>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x2ea>
 8001ac0:	4b64      	ldr	r3, [pc, #400]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac4:	4a63      	ldr	r2, [pc, #396]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x324>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x30c>
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	4a5e      	ldr	r2, [pc, #376]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0x324>
 8001af0:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a57      	ldr	r2, [pc, #348]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afc:	4b55      	ldr	r3, [pc, #340]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b00:	4a54      	ldr	r2, [pc, #336]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b02:	f023 0304 	bic.w	r3, r3, #4
 8001b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d015      	beq.n	8001b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff fb9a 	bl	8001248 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b16:	e00a      	b.n	8001b2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff fb96 	bl	8001248 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0cb      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2e:	4b49      	ldr	r3, [pc, #292]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0ee      	beq.n	8001b18 <HAL_RCC_OscConfig+0x334>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fb84 	bl	8001248 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff fb80 	bl	8001248 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0b5      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ee      	bne.n	8001b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b39      	ldr	r3, [pc, #228]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	4a38      	ldr	r2, [pc, #224]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a1 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d05c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d141      	bne.n	8001c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_RCC_OscConfig+0x478>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fb54 	bl	8001248 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff fb50 	bl	8001248 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e087      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	491b      	ldr	r1, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <HAL_RCC_OscConfig+0x478>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fb29 	bl	8001248 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fb25 	bl	8001248 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e05c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x416>
 8001c18:	e054      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb12 	bl	8001248 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fb0e 	bl	8001248 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e045      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x444>
 8001c46:	e03d      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e038      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <HAL_RCC_OscConfig+0x4ec>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d028      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d121      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d11a      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d111      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca6:	085b      	lsrs	r3, r3, #1
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0cc      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b68      	ldr	r3, [pc, #416]	@ (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d90c      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b65      	ldr	r3, [pc, #404]	@ (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b63      	ldr	r3, [pc, #396]	@ (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0b8      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d020      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d28:	4b59      	ldr	r3, [pc, #356]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d40:	4b53      	ldr	r3, [pc, #332]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a52      	ldr	r2, [pc, #328]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b50      	ldr	r3, [pc, #320]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	494d      	ldr	r1, [pc, #308]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d044      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d119      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e07f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d92:	4b3f      	ldr	r3, [pc, #252]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e06f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	4b3b      	ldr	r3, [pc, #236]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e067      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db2:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f023 0203 	bic.w	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4934      	ldr	r1, [pc, #208]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc4:	f7ff fa40 	bl	8001248 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dcc:	f7ff fa3c 	bl	8001248 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e04f      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 020c 	and.w	r2, r3, #12
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1eb      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d20c      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e032      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4916      	ldr	r1, [pc, #88]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	490e      	ldr	r1, [pc, #56]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e5a:	f000 f821 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	490a      	ldr	r1, [pc, #40]	@ (8001e94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	5ccb      	ldrb	r3, [r1, r3]
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f9a0 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08003f60 	.word	0x08003f60
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	20000014 	.word	0x20000014

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea4:	b090      	sub	sp, #64	@ 0x40
 8001ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb8:	4b59      	ldr	r3, [pc, #356]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	f200 80a1 	bhi.w	800200c <HAL_RCC_GetSysClockFreq+0x16c>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d003      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x3a>
 8001ed2:	e09b      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed4:	4b53      	ldr	r3, [pc, #332]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ed8:	e09b      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eda:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x188>)
 8001edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ede:	e098      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eea:	4b4d      	ldr	r3, [pc, #308]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d028      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	2200      	movs	r2, #0
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f0c:	fb03 f201 	mul.w	r2, r3, r1
 8001f10:	2300      	movs	r3, #0
 8001f12:	fb00 f303 	mul.w	r3, r0, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f1a:	fba0 1202 	umull	r1, r2, r0, r2
 8001f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f20:	460a      	mov	r2, r1
 8001f22:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f26:	4413      	add	r3, r2
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	61fa      	str	r2, [r7, #28]
 8001f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f3a:	f7fe f9a1 	bl	8000280 <__aeabi_uldivmod>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4613      	mov	r3, r2
 8001f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f46:	e053      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f48:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	2200      	movs	r2, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	617a      	str	r2, [r7, #20]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f5a:	f04f 0b00 	mov.w	fp, #0
 8001f5e:	4652      	mov	r2, sl
 8001f60:	465b      	mov	r3, fp
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	0159      	lsls	r1, r3, #5
 8001f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f70:	0150      	lsls	r0, r2, #5
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	ebb2 080a 	subs.w	r8, r2, sl
 8001f7a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f92:	ebb2 0408 	subs.w	r4, r2, r8
 8001f96:	eb63 0509 	sbc.w	r5, r3, r9
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	00eb      	lsls	r3, r5, #3
 8001fa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa8:	00e2      	lsls	r2, r4, #3
 8001faa:	4614      	mov	r4, r2
 8001fac:	461d      	mov	r5, r3
 8001fae:	eb14 030a 	adds.w	r3, r4, sl
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	eb45 030b 	adc.w	r3, r5, fp
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	028b      	lsls	r3, r1, #10
 8001fca:	4621      	mov	r1, r4
 8001fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	028a      	lsls	r2, r1, #10
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe4:	f7fe f94c 	bl	8000280 <__aeabi_uldivmod>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4613      	mov	r3, r2
 8001fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002000:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800200a:	e002      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x184>)
 800200e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002014:	4618      	mov	r0, r3
 8002016:	3740      	adds	r7, #64	@ 0x40
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	00f42400 	.word	0x00f42400
 8002028:	017d7840 	.word	0x017d7840

0800202c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_RCC_GetHCLKFreq+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000010 	.word	0x20000010

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002048:	f7ff fff0 	bl	800202c <HAL_RCC_GetHCLKFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4903      	ldr	r1, [pc, #12]	@ (8002068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	08003f70 	.word	0x08003f70

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002070:	f7ff ffdc 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0b5b      	lsrs	r3, r3, #13
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4903      	ldr	r1, [pc, #12]	@ (8002090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	08003f70 	.word	0x08003f70

08002094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07b      	b.n	800219e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020b6:	d009      	beq.n	80020cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
 80020be:	e005      	b.n	80020cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fee2 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002102:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002150:	ea42 0103 	orr.w	r1, r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 0104 	and.w	r1, r3, #4
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	f003 0210 	and.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800218c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b088      	sub	sp, #32
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b6:	f7ff f847 	bl	8001248 <HAL_GetTick>
 80021ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d001      	beq.n	80021d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	e12a      	b.n	8002426 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_SPI_Transmit+0x36>
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e122      	b.n	8002426 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_SPI_Transmit+0x48>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e11b      	b.n	8002426 <HAL_SPI_Transmit+0x280>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800223c:	d10f      	bne.n	800225e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800224c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800225c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d007      	beq.n	800227c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002284:	d152      	bne.n	800232c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_SPI_Transmit+0xee>
 800228e:	8b7b      	ldrh	r3, [r7, #26]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d145      	bne.n	8002320 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	1c9a      	adds	r2, r3, #2
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022b8:	e032      	b.n	8002320 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d112      	bne.n	80022ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	1c9a      	adds	r2, r3, #2
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022ec:	e018      	b.n	8002320 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ee:	f7fe ffab 	bl	8001248 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d803      	bhi.n	8002306 <HAL_SPI_Transmit+0x160>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d102      	bne.n	800230c <HAL_SPI_Transmit+0x166>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e082      	b.n	8002426 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1c7      	bne.n	80022ba <HAL_SPI_Transmit+0x114>
 800232a:	e053      	b.n	80023d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_SPI_Transmit+0x194>
 8002334:	8b7b      	ldrh	r3, [r7, #26]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d147      	bne.n	80023ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002360:	e033      	b.n	80023ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d113      	bne.n	8002398 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	330c      	adds	r3, #12
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002396:	e018      	b.n	80023ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002398:	f7fe ff56 	bl	8001248 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d803      	bhi.n	80023b0 <HAL_SPI_Transmit+0x20a>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d102      	bne.n	80023b6 <HAL_SPI_Transmit+0x210>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e02d      	b.n	8002426 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1c6      	bne.n	8002362 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fbd9 	bl	8002b90 <SPI_EndRxTxTransaction>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002424:	2300      	movs	r3, #0
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b088      	sub	sp, #32
 8002432:	af02      	add	r7, sp, #8
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	e104      	b.n	8002658 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_SPI_Receive+0x2c>
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0fc      	b.n	8002658 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002466:	d112      	bne.n	800248e <HAL_SPI_Receive+0x60>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10e      	bne.n	800248e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2204      	movs	r2, #4
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f8eb 	bl	8002660 <HAL_SPI_TransmitReceive>
 800248a:	4603      	mov	r3, r0
 800248c:	e0e4      	b.n	8002658 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800248e:	f7fe fedb 	bl	8001248 <HAL_GetTick>
 8002492:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_SPI_Receive+0x74>
 800249e:	2302      	movs	r3, #2
 80024a0:	e0da      	b.n	8002658 <HAL_SPI_Receive+0x22a>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2204      	movs	r2, #4
 80024ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f0:	d10f      	bne.n	8002512 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251c:	2b40      	cmp	r3, #64	@ 0x40
 800251e:	d007      	beq.n	8002530 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d170      	bne.n	800261a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002538:	e035      	b.n	80025a6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d115      	bne.n	8002574 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f103 020c 	add.w	r2, r3, #12
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002572:	e018      	b.n	80025a6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002574:	f7fe fe68 	bl	8001248 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d803      	bhi.n	800258c <HAL_SPI_Receive+0x15e>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d102      	bne.n	8002592 <HAL_SPI_Receive+0x164>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e058      	b.n	8002658 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1c4      	bne.n	800253a <HAL_SPI_Receive+0x10c>
 80025b0:	e038      	b.n	8002624 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d113      	bne.n	80025e8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	b292      	uxth	r2, r2
 80025cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d2:	1c9a      	adds	r2, r3, #2
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025e6:	e018      	b.n	800261a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e8:	f7fe fe2e 	bl	8001248 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d803      	bhi.n	8002600 <HAL_SPI_Receive+0x1d2>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d102      	bne.n	8002606 <HAL_SPI_Receive+0x1d8>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e01e      	b.n	8002658 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1c6      	bne.n	80025b2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fa4b 	bl	8002ac4 <SPI_EndRxTransaction>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002656:	2300      	movs	r3, #0
  }
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	@ 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800266e:	2301      	movs	r3, #1
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002672:	f7fe fde9 	bl	8001248 <HAL_GetTick>
 8002676:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d00c      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x4a>
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002696:	d106      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x46>
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d001      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e17f      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_SPI_TransmitReceive+0x5c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_SPI_TransmitReceive+0x5c>
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e174      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x6e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e16d      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d003      	beq.n	80026ea <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2205      	movs	r2, #5
 80026e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	887a      	ldrh	r2, [r7, #2]
 80026fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b40      	cmp	r3, #64	@ 0x40
 800272c:	d007      	beq.n	800273e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002746:	d17e      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_SPI_TransmitReceive+0xf6>
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d16c      	bne.n	8002830 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	1c9a      	adds	r2, r3, #2
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277a:	e059      	b.n	8002830 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d11b      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x162>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x162>
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	2b01      	cmp	r3, #1
 8002798:	d113      	bne.n	80027c2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	881a      	ldrh	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	1c9a      	adds	r2, r3, #2
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d119      	bne.n	8002804 <HAL_SPI_TransmitReceive+0x1a4>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d014      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	b292      	uxth	r2, r2
 80027e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	1c9a      	adds	r2, r3, #2
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002804:	f7fe fd20 	bl	8001248 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002810:	429a      	cmp	r2, r3
 8002812:	d80d      	bhi.n	8002830 <HAL_SPI_TransmitReceive+0x1d0>
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d009      	beq.n	8002830 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0bc      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1a0      	bne.n	800277c <HAL_SPI_TransmitReceive+0x11c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d19b      	bne.n	800277c <HAL_SPI_TransmitReceive+0x11c>
 8002844:	e082      	b.n	800294c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x1f4>
 800284e:	8afb      	ldrh	r3, [r7, #22]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d171      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287a:	e05d      	b.n	8002938 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d11c      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x264>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d017      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x264>
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	2b01      	cmp	r3, #1
 8002898:	d114      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d119      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x2a6>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d014      	beq.n	8002906 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002902:	2301      	movs	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002906:	f7fe fc9f 	bl	8001248 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002912:	429a      	cmp	r2, r3
 8002914:	d803      	bhi.n	800291e <HAL_SPI_TransmitReceive+0x2be>
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d102      	bne.n	8002924 <HAL_SPI_TransmitReceive+0x2c4>
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e038      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d19c      	bne.n	800287c <HAL_SPI_TransmitReceive+0x21c>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d197      	bne.n	800287c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f91d 	bl	8002b90 <SPI_EndRxTxTransaction>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e01d      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3728      	adds	r7, #40	@ 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029c4:	f7fe fc40 	bl	8001248 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029d4:	f7fe fc38 	bl	8001248 <HAL_GetTick>
 80029d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029da:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	0d1b      	lsrs	r3, r3, #20
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ea:	e055      	b.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d051      	beq.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029f4:	f7fe fc28 	bl	8001248 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d902      	bls.n	8002a0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d13d      	bne.n	8002a86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a22:	d111      	bne.n	8002a48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a2c:	d004      	beq.n	8002a38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a36:	d107      	bne.n	8002a48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a50:	d10f      	bne.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e018      	b.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	e002      	b.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d19a      	bne.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000010 	.word	0x20000010

08002ac4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ad8:	d111      	bne.n	8002afe <SPI_EndRxTransaction+0x3a>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae2:	d004      	beq.n	8002aee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aec:	d107      	bne.n	8002afe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b06:	d12a      	bne.n	8002b5e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b10:	d012      	beq.n	8002b38 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2180      	movs	r1, #128	@ 0x80
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff ff49 	bl	80029b4 <SPI_WaitFlagStateUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d02d      	beq.n	8002b84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e026      	b.n	8002b86 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2101      	movs	r1, #1
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7ff ff36 	bl	80029b4 <SPI_WaitFlagStateUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01a      	beq.n	8002b84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e013      	b.n	8002b86 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2101      	movs	r1, #1
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ff23 	bl	80029b4 <SPI_WaitFlagStateUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e000      	b.n	8002b86 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff04 	bl	80029b4 <SPI_WaitFlagStateUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e032      	b.n	8002c28 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <SPI_EndRxTxTransaction+0xa0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c34 <SPI_EndRxTxTransaction+0xa4>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	0d5b      	lsrs	r3, r3, #21
 8002bce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002be0:	d112      	bne.n	8002c08 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff fee1 	bl	80029b4 <SPI_WaitFlagStateUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d016      	beq.n	8002c26 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00f      	b.n	8002c28 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b80      	cmp	r3, #128	@ 0x80
 8002c20:	d0f2      	beq.n	8002c08 <SPI_EndRxTxTransaction+0x78>
 8002c22:	e000      	b.n	8002c26 <SPI_EndRxTxTransaction+0x96>
        break;
 8002c24:	bf00      	nop
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000010 	.word	0x20000010
 8002c34:	165e9f81 	.word	0x165e9f81

08002c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e042      	b.n	8002cd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe f96e 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fa09 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d175      	bne.n	8002de4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Transmit+0x2c>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e06e      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2221      	movs	r2, #33	@ 0x21
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fa97 	bl	8001248 <HAL_GetTick>
 8002d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d30:	d108      	bne.n	8002d44 <HAL_UART_Transmit+0x6c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e003      	b.n	8002d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d4c:	e02e      	b.n	8002dac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	@ 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f8df 	bl	8002f1c <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e03a      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3302      	adds	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e007      	b.n	8002d9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1cb      	bne.n	8002d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2140      	movs	r1, #64	@ 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f8ab 	bl	8002f1c <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e006      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08a      	sub	sp, #40	@ 0x28
 8002df2:	af02      	add	r7, sp, #8
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 8081 	bne.w	8002f12 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_UART_Receive+0x2e>
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e079      	b.n	8002f14 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2222      	movs	r2, #34	@ 0x22
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e34:	f7fe fa08 	bl	8001248 <HAL_GetTick>
 8002e38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	88fa      	ldrh	r2, [r7, #6]
 8002e44:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4e:	d108      	bne.n	8002e62 <HAL_UART_Receive+0x74>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e003      	b.n	8002e6a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e6a:	e047      	b.n	8002efc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2120      	movs	r1, #32
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f850 	bl	8002f1c <UART_WaitOnFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e042      	b.n	8002f14 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10c      	bne.n	8002eae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	e01f      	b.n	8002eee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb6:	d007      	beq.n	8002ec8 <HAL_UART_Receive+0xda>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_UART_Receive+0xe8>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e008      	b.n	8002ee8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1b2      	bne.n	8002e6c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2c:	e03b      	b.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d037      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7fe f987 	bl	8001248 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e03a      	b.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d023      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b80      	cmp	r3, #128	@ 0x80
 8002f62:	d020      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b40      	cmp	r3, #64	@ 0x40
 8002f68:	d01d      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d116      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f81d 	bl	8002fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2208      	movs	r2, #8
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d0b4      	beq.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b095      	sub	sp, #84	@ 0x54
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ffc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e5      	bne.n	8002fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3314      	adds	r3, #20
 8003010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	61fb      	str	r3, [r7, #28]
   return(result);
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3314      	adds	r3, #20
 8003028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800302a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e5      	bne.n	800300a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	2b01      	cmp	r3, #1
 8003044:	d119      	bne.n	800307a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	60bb      	str	r3, [r7, #8]
   return(result);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f023 0310 	bic.w	r3, r3, #16
 800305c:	647b      	str	r3, [r7, #68]	@ 0x44
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003066:	61ba      	str	r2, [r7, #24]
 8003068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	613b      	str	r3, [r7, #16]
   return(result);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e5      	bne.n	8003046 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003088:	bf00      	nop
 800308a:	3754      	adds	r7, #84	@ 0x54
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003098:	b0c0      	sub	sp, #256	@ 0x100
 800309a:	af00      	add	r7, sp, #0
 800309c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	ea40 0301 	orr.w	r3, r0, r1
 80030bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030ec:	f021 010c 	bic.w	r1, r1, #12
 80030f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030fa:	430b      	orrs	r3, r1
 80030fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	6999      	ldr	r1, [r3, #24]
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	ea40 0301 	orr.w	r3, r0, r1
 800311a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b8f      	ldr	r3, [pc, #572]	@ (8003360 <UART_SetConfig+0x2cc>)
 8003124:	429a      	cmp	r2, r3
 8003126:	d005      	beq.n	8003134 <UART_SetConfig+0xa0>
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b8d      	ldr	r3, [pc, #564]	@ (8003364 <UART_SetConfig+0x2d0>)
 8003130:	429a      	cmp	r2, r3
 8003132:	d104      	bne.n	800313e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7fe ff9a 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 8003138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800313c:	e003      	b.n	8003146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800313e:	f7fe ff81 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8003142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003150:	f040 810c 	bne.w	800336c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003158:	2200      	movs	r2, #0
 800315a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800315e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003166:	4622      	mov	r2, r4
 8003168:	462b      	mov	r3, r5
 800316a:	1891      	adds	r1, r2, r2
 800316c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800316e:	415b      	adcs	r3, r3
 8003170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003176:	4621      	mov	r1, r4
 8003178:	eb12 0801 	adds.w	r8, r2, r1
 800317c:	4629      	mov	r1, r5
 800317e:	eb43 0901 	adc.w	r9, r3, r1
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800318e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003196:	4690      	mov	r8, r2
 8003198:	4699      	mov	r9, r3
 800319a:	4623      	mov	r3, r4
 800319c:	eb18 0303 	adds.w	r3, r8, r3
 80031a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031a4:	462b      	mov	r3, r5
 80031a6:	eb49 0303 	adc.w	r3, r9, r3
 80031aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031c2:	460b      	mov	r3, r1
 80031c4:	18db      	adds	r3, r3, r3
 80031c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80031c8:	4613      	mov	r3, r2
 80031ca:	eb42 0303 	adc.w	r3, r2, r3
 80031ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80031d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031d8:	f7fd f852 	bl	8000280 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <UART_SetConfig+0x2d4>)
 80031e2:	fba3 2302 	umull	r2, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	011c      	lsls	r4, r3, #4
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	1891      	adds	r1, r2, r2
 8003202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003204:	415b      	adcs	r3, r3
 8003206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800320c:	4641      	mov	r1, r8
 800320e:	eb12 0a01 	adds.w	sl, r2, r1
 8003212:	4649      	mov	r1, r9
 8003214:	eb43 0b01 	adc.w	fp, r3, r1
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800322c:	4692      	mov	sl, r2
 800322e:	469b      	mov	fp, r3
 8003230:	4643      	mov	r3, r8
 8003232:	eb1a 0303 	adds.w	r3, sl, r3
 8003236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800323a:	464b      	mov	r3, r9
 800323c:	eb4b 0303 	adc.w	r3, fp, r3
 8003240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003258:	460b      	mov	r3, r1
 800325a:	18db      	adds	r3, r3, r3
 800325c:	643b      	str	r3, [r7, #64]	@ 0x40
 800325e:	4613      	mov	r3, r2
 8003260:	eb42 0303 	adc.w	r3, r2, r3
 8003264:	647b      	str	r3, [r7, #68]	@ 0x44
 8003266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800326a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800326e:	f7fd f807 	bl	8000280 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4611      	mov	r1, r2
 8003278:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <UART_SetConfig+0x2d4>)
 800327a:	fba3 2301 	umull	r2, r3, r3, r1
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	@ 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1acb      	subs	r3, r1, r3
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800328e:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <UART_SetConfig+0x2d4>)
 8003290:	fba3 2302 	umull	r2, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800329c:	441c      	add	r4, r3
 800329e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032b0:	4642      	mov	r2, r8
 80032b2:	464b      	mov	r3, r9
 80032b4:	1891      	adds	r1, r2, r2
 80032b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032b8:	415b      	adcs	r3, r3
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032c0:	4641      	mov	r1, r8
 80032c2:	1851      	adds	r1, r2, r1
 80032c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80032c6:	4649      	mov	r1, r9
 80032c8:	414b      	adcs	r3, r1
 80032ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032d8:	4659      	mov	r1, fp
 80032da:	00cb      	lsls	r3, r1, #3
 80032dc:	4651      	mov	r1, sl
 80032de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e2:	4651      	mov	r1, sl
 80032e4:	00ca      	lsls	r2, r1, #3
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	4642      	mov	r2, r8
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032f4:	464b      	mov	r3, r9
 80032f6:	460a      	mov	r2, r1
 80032f8:	eb42 0303 	adc.w	r3, r2, r3
 80032fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800330c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003314:	460b      	mov	r3, r1
 8003316:	18db      	adds	r3, r3, r3
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800331a:	4613      	mov	r3, r2
 800331c:	eb42 0303 	adc.w	r3, r2, r3
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800332a:	f7fc ffa9 	bl	8000280 <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <UART_SetConfig+0x2d4>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2164      	movs	r1, #100	@ 0x64
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3332      	adds	r3, #50	@ 0x32
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <UART_SetConfig+0x2d4>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f003 0207 	and.w	r2, r3, #7
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4422      	add	r2, r4
 800335a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800335c:	e106      	b.n	800356c <UART_SetConfig+0x4d8>
 800335e:	bf00      	nop
 8003360:	40011000 	.word	0x40011000
 8003364:	40011400 	.word	0x40011400
 8003368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800336c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800337a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800337e:	4642      	mov	r2, r8
 8003380:	464b      	mov	r3, r9
 8003382:	1891      	adds	r1, r2, r2
 8003384:	6239      	str	r1, [r7, #32]
 8003386:	415b      	adcs	r3, r3
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
 800338a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800338e:	4641      	mov	r1, r8
 8003390:	1854      	adds	r4, r2, r1
 8003392:	4649      	mov	r1, r9
 8003394:	eb43 0501 	adc.w	r5, r3, r1
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	00eb      	lsls	r3, r5, #3
 80033a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a6:	00e2      	lsls	r2, r4, #3
 80033a8:	4614      	mov	r4, r2
 80033aa:	461d      	mov	r5, r3
 80033ac:	4643      	mov	r3, r8
 80033ae:	18e3      	adds	r3, r4, r3
 80033b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033b4:	464b      	mov	r3, r9
 80033b6:	eb45 0303 	adc.w	r3, r5, r3
 80033ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033da:	4629      	mov	r1, r5
 80033dc:	008b      	lsls	r3, r1, #2
 80033de:	4621      	mov	r1, r4
 80033e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e4:	4621      	mov	r1, r4
 80033e6:	008a      	lsls	r2, r1, #2
 80033e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033ec:	f7fc ff48 	bl	8000280 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4b60      	ldr	r3, [pc, #384]	@ (8003578 <UART_SetConfig+0x4e4>)
 80033f6:	fba3 2302 	umull	r2, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	011c      	lsls	r4, r3, #4
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800340c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	1891      	adds	r1, r2, r2
 8003416:	61b9      	str	r1, [r7, #24]
 8003418:	415b      	adcs	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003420:	4641      	mov	r1, r8
 8003422:	1851      	adds	r1, r2, r1
 8003424:	6139      	str	r1, [r7, #16]
 8003426:	4649      	mov	r1, r9
 8003428:	414b      	adcs	r3, r1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003438:	4659      	mov	r1, fp
 800343a:	00cb      	lsls	r3, r1, #3
 800343c:	4651      	mov	r1, sl
 800343e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003442:	4651      	mov	r1, sl
 8003444:	00ca      	lsls	r2, r1, #3
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	4603      	mov	r3, r0
 800344c:	4642      	mov	r2, r8
 800344e:	189b      	adds	r3, r3, r2
 8003450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003454:	464b      	mov	r3, r9
 8003456:	460a      	mov	r2, r1
 8003458:	eb42 0303 	adc.w	r3, r2, r3
 800345c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800346a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003478:	4649      	mov	r1, r9
 800347a:	008b      	lsls	r3, r1, #2
 800347c:	4641      	mov	r1, r8
 800347e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003482:	4641      	mov	r1, r8
 8003484:	008a      	lsls	r2, r1, #2
 8003486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800348a:	f7fc fef9 	bl	8000280 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4611      	mov	r1, r2
 8003494:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <UART_SetConfig+0x4e4>)
 8003496:	fba3 2301 	umull	r2, r3, r3, r1
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2264      	movs	r2, #100	@ 0x64
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	1acb      	subs	r3, r1, r3
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	3332      	adds	r3, #50	@ 0x32
 80034a8:	4a33      	ldr	r2, [pc, #204]	@ (8003578 <UART_SetConfig+0x4e4>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b4:	441c      	add	r4, r3
 80034b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ba:	2200      	movs	r2, #0
 80034bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80034be:	677a      	str	r2, [r7, #116]	@ 0x74
 80034c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	1891      	adds	r1, r2, r2
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	415b      	adcs	r3, r3
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d4:	4641      	mov	r1, r8
 80034d6:	1851      	adds	r1, r2, r1
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	4649      	mov	r1, r9
 80034dc:	414b      	adcs	r3, r1
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034ec:	4659      	mov	r1, fp
 80034ee:	00cb      	lsls	r3, r1, #3
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f6:	4651      	mov	r1, sl
 80034f8:	00ca      	lsls	r2, r1, #3
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	4642      	mov	r2, r8
 8003502:	189b      	adds	r3, r3, r2
 8003504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003506:	464b      	mov	r3, r9
 8003508:	460a      	mov	r2, r1
 800350a:	eb42 0303 	adc.w	r3, r2, r3
 800350e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	663b      	str	r3, [r7, #96]	@ 0x60
 800351a:	667a      	str	r2, [r7, #100]	@ 0x64
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003528:	4649      	mov	r1, r9
 800352a:	008b      	lsls	r3, r1, #2
 800352c:	4641      	mov	r1, r8
 800352e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003532:	4641      	mov	r1, r8
 8003534:	008a      	lsls	r2, r1, #2
 8003536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800353a:	f7fc fea1 	bl	8000280 <__aeabi_uldivmod>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <UART_SetConfig+0x4e4>)
 8003544:	fba3 1302 	umull	r1, r3, r3, r2
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	2164      	movs	r1, #100	@ 0x64
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	3332      	adds	r3, #50	@ 0x32
 8003556:	4a08      	ldr	r2, [pc, #32]	@ (8003578 <UART_SetConfig+0x4e4>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4422      	add	r2, r4
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003572:	46bd      	mov	sp, r7
 8003574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003578:	51eb851f 	.word	0x51eb851f

0800357c <sniprintf>:
 800357c:	b40c      	push	{r2, r3}
 800357e:	b530      	push	{r4, r5, lr}
 8003580:	4b18      	ldr	r3, [pc, #96]	@ (80035e4 <sniprintf+0x68>)
 8003582:	1e0c      	subs	r4, r1, #0
 8003584:	681d      	ldr	r5, [r3, #0]
 8003586:	b09d      	sub	sp, #116	@ 0x74
 8003588:	da08      	bge.n	800359c <sniprintf+0x20>
 800358a:	238b      	movs	r3, #139	@ 0x8b
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	f04f 30ff 	mov.w	r0, #4294967295
 8003592:	b01d      	add	sp, #116	@ 0x74
 8003594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003598:	b002      	add	sp, #8
 800359a:	4770      	bx	lr
 800359c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80035a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80035aa:	bf14      	ite	ne
 80035ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80035b0:	4623      	moveq	r3, r4
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	9307      	str	r3, [sp, #28]
 80035b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ba:	9002      	str	r0, [sp, #8]
 80035bc:	9006      	str	r0, [sp, #24]
 80035be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80035c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80035c4:	ab21      	add	r3, sp, #132	@ 0x84
 80035c6:	a902      	add	r1, sp, #8
 80035c8:	4628      	mov	r0, r5
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	f000 f9b6 	bl	800393c <_svfiprintf_r>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	bfbc      	itt	lt
 80035d4:	238b      	movlt	r3, #139	@ 0x8b
 80035d6:	602b      	strlt	r3, [r5, #0]
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d0da      	beq.n	8003592 <sniprintf+0x16>
 80035dc:	9b02      	ldr	r3, [sp, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e7d6      	b.n	8003592 <sniprintf+0x16>
 80035e4:	2000001c 	.word	0x2000001c

080035e8 <siprintf>:
 80035e8:	b40e      	push	{r1, r2, r3}
 80035ea:	b510      	push	{r4, lr}
 80035ec:	b09d      	sub	sp, #116	@ 0x74
 80035ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80035f0:	9002      	str	r0, [sp, #8]
 80035f2:	9006      	str	r0, [sp, #24]
 80035f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035f8:	480a      	ldr	r0, [pc, #40]	@ (8003624 <siprintf+0x3c>)
 80035fa:	9107      	str	r1, [sp, #28]
 80035fc:	9104      	str	r1, [sp, #16]
 80035fe:	490a      	ldr	r1, [pc, #40]	@ (8003628 <siprintf+0x40>)
 8003600:	f853 2b04 	ldr.w	r2, [r3], #4
 8003604:	9105      	str	r1, [sp, #20]
 8003606:	2400      	movs	r4, #0
 8003608:	a902      	add	r1, sp, #8
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003610:	f000 f994 	bl	800393c <_svfiprintf_r>
 8003614:	9b02      	ldr	r3, [sp, #8]
 8003616:	701c      	strb	r4, [r3, #0]
 8003618:	b01d      	add	sp, #116	@ 0x74
 800361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800361e:	b003      	add	sp, #12
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2000001c 	.word	0x2000001c
 8003628:	ffff0208 	.word	0xffff0208

0800362c <memset>:
 800362c:	4402      	add	r2, r0
 800362e:	4603      	mov	r3, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <__errno>:
 800363c:	4b01      	ldr	r3, [pc, #4]	@ (8003644 <__errno+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000001c 	.word	0x2000001c

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	4d0d      	ldr	r5, [pc, #52]	@ (8003680 <__libc_init_array+0x38>)
 800364c:	4c0d      	ldr	r4, [pc, #52]	@ (8003684 <__libc_init_array+0x3c>)
 800364e:	1b64      	subs	r4, r4, r5
 8003650:	10a4      	asrs	r4, r4, #2
 8003652:	2600      	movs	r6, #0
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	4d0b      	ldr	r5, [pc, #44]	@ (8003688 <__libc_init_array+0x40>)
 800365a:	4c0c      	ldr	r4, [pc, #48]	@ (800368c <__libc_init_array+0x44>)
 800365c:	f000 fc64 	bl	8003f28 <_init>
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	2600      	movs	r6, #0
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f855 3b04 	ldr.w	r3, [r5], #4
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08003fb4 	.word	0x08003fb4
 8003684:	08003fb4 	.word	0x08003fb4
 8003688:	08003fb4 	.word	0x08003fb4
 800368c:	08003fb8 	.word	0x08003fb8

08003690 <__retarget_lock_acquire_recursive>:
 8003690:	4770      	bx	lr

08003692 <__retarget_lock_release_recursive>:
 8003692:	4770      	bx	lr

08003694 <_free_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	2900      	cmp	r1, #0
 800369a:	d041      	beq.n	8003720 <_free_r+0x8c>
 800369c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a0:	1f0c      	subs	r4, r1, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bfb8      	it	lt
 80036a6:	18e4      	addlt	r4, r4, r3
 80036a8:	f000 f8e0 	bl	800386c <__malloc_lock>
 80036ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <_free_r+0x90>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	b933      	cbnz	r3, 80036c0 <_free_r+0x2c>
 80036b2:	6063      	str	r3, [r4, #4]
 80036b4:	6014      	str	r4, [r2, #0]
 80036b6:	4628      	mov	r0, r5
 80036b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036bc:	f000 b8dc 	b.w	8003878 <__malloc_unlock>
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	d908      	bls.n	80036d6 <_free_r+0x42>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	1821      	adds	r1, r4, r0
 80036c8:	428b      	cmp	r3, r1
 80036ca:	bf01      	itttt	eq
 80036cc:	6819      	ldreq	r1, [r3, #0]
 80036ce:	685b      	ldreq	r3, [r3, #4]
 80036d0:	1809      	addeq	r1, r1, r0
 80036d2:	6021      	streq	r1, [r4, #0]
 80036d4:	e7ed      	b.n	80036b2 <_free_r+0x1e>
 80036d6:	461a      	mov	r2, r3
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b10b      	cbz	r3, 80036e0 <_free_r+0x4c>
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d9fa      	bls.n	80036d6 <_free_r+0x42>
 80036e0:	6811      	ldr	r1, [r2, #0]
 80036e2:	1850      	adds	r0, r2, r1
 80036e4:	42a0      	cmp	r0, r4
 80036e6:	d10b      	bne.n	8003700 <_free_r+0x6c>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	4401      	add	r1, r0
 80036ec:	1850      	adds	r0, r2, r1
 80036ee:	4283      	cmp	r3, r0
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	d1e0      	bne.n	80036b6 <_free_r+0x22>
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	6053      	str	r3, [r2, #4]
 80036fa:	4408      	add	r0, r1
 80036fc:	6010      	str	r0, [r2, #0]
 80036fe:	e7da      	b.n	80036b6 <_free_r+0x22>
 8003700:	d902      	bls.n	8003708 <_free_r+0x74>
 8003702:	230c      	movs	r3, #12
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	e7d6      	b.n	80036b6 <_free_r+0x22>
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	1821      	adds	r1, r4, r0
 800370c:	428b      	cmp	r3, r1
 800370e:	bf04      	itt	eq
 8003710:	6819      	ldreq	r1, [r3, #0]
 8003712:	685b      	ldreq	r3, [r3, #4]
 8003714:	6063      	str	r3, [r4, #4]
 8003716:	bf04      	itt	eq
 8003718:	1809      	addeq	r1, r1, r0
 800371a:	6021      	streq	r1, [r4, #0]
 800371c:	6054      	str	r4, [r2, #4]
 800371e:	e7ca      	b.n	80036b6 <_free_r+0x22>
 8003720:	bd38      	pop	{r3, r4, r5, pc}
 8003722:	bf00      	nop
 8003724:	200002bc 	.word	0x200002bc

08003728 <sbrk_aligned>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4e0f      	ldr	r6, [pc, #60]	@ (8003768 <sbrk_aligned+0x40>)
 800372c:	460c      	mov	r4, r1
 800372e:	6831      	ldr	r1, [r6, #0]
 8003730:	4605      	mov	r5, r0
 8003732:	b911      	cbnz	r1, 800373a <sbrk_aligned+0x12>
 8003734:	f000 fba4 	bl	8003e80 <_sbrk_r>
 8003738:	6030      	str	r0, [r6, #0]
 800373a:	4621      	mov	r1, r4
 800373c:	4628      	mov	r0, r5
 800373e:	f000 fb9f 	bl	8003e80 <_sbrk_r>
 8003742:	1c43      	adds	r3, r0, #1
 8003744:	d103      	bne.n	800374e <sbrk_aligned+0x26>
 8003746:	f04f 34ff 	mov.w	r4, #4294967295
 800374a:	4620      	mov	r0, r4
 800374c:	bd70      	pop	{r4, r5, r6, pc}
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d0f8      	beq.n	800374a <sbrk_aligned+0x22>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4628      	mov	r0, r5
 800375c:	f000 fb90 	bl	8003e80 <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d1f2      	bne.n	800374a <sbrk_aligned+0x22>
 8003764:	e7ef      	b.n	8003746 <sbrk_aligned+0x1e>
 8003766:	bf00      	nop
 8003768:	200002b8 	.word	0x200002b8

0800376c <_malloc_r>:
 800376c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003770:	1ccd      	adds	r5, r1, #3
 8003772:	f025 0503 	bic.w	r5, r5, #3
 8003776:	3508      	adds	r5, #8
 8003778:	2d0c      	cmp	r5, #12
 800377a:	bf38      	it	cc
 800377c:	250c      	movcc	r5, #12
 800377e:	2d00      	cmp	r5, #0
 8003780:	4606      	mov	r6, r0
 8003782:	db01      	blt.n	8003788 <_malloc_r+0x1c>
 8003784:	42a9      	cmp	r1, r5
 8003786:	d904      	bls.n	8003792 <_malloc_r+0x26>
 8003788:	230c      	movs	r3, #12
 800378a:	6033      	str	r3, [r6, #0]
 800378c:	2000      	movs	r0, #0
 800378e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003868 <_malloc_r+0xfc>
 8003796:	f000 f869 	bl	800386c <__malloc_lock>
 800379a:	f8d8 3000 	ldr.w	r3, [r8]
 800379e:	461c      	mov	r4, r3
 80037a0:	bb44      	cbnz	r4, 80037f4 <_malloc_r+0x88>
 80037a2:	4629      	mov	r1, r5
 80037a4:	4630      	mov	r0, r6
 80037a6:	f7ff ffbf 	bl	8003728 <sbrk_aligned>
 80037aa:	1c43      	adds	r3, r0, #1
 80037ac:	4604      	mov	r4, r0
 80037ae:	d158      	bne.n	8003862 <_malloc_r+0xf6>
 80037b0:	f8d8 4000 	ldr.w	r4, [r8]
 80037b4:	4627      	mov	r7, r4
 80037b6:	2f00      	cmp	r7, #0
 80037b8:	d143      	bne.n	8003842 <_malloc_r+0xd6>
 80037ba:	2c00      	cmp	r4, #0
 80037bc:	d04b      	beq.n	8003856 <_malloc_r+0xea>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	4639      	mov	r1, r7
 80037c2:	4630      	mov	r0, r6
 80037c4:	eb04 0903 	add.w	r9, r4, r3
 80037c8:	f000 fb5a 	bl	8003e80 <_sbrk_r>
 80037cc:	4581      	cmp	r9, r0
 80037ce:	d142      	bne.n	8003856 <_malloc_r+0xea>
 80037d0:	6821      	ldr	r1, [r4, #0]
 80037d2:	1a6d      	subs	r5, r5, r1
 80037d4:	4629      	mov	r1, r5
 80037d6:	4630      	mov	r0, r6
 80037d8:	f7ff ffa6 	bl	8003728 <sbrk_aligned>
 80037dc:	3001      	adds	r0, #1
 80037de:	d03a      	beq.n	8003856 <_malloc_r+0xea>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	442b      	add	r3, r5
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	f8d8 3000 	ldr.w	r3, [r8]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	bb62      	cbnz	r2, 8003848 <_malloc_r+0xdc>
 80037ee:	f8c8 7000 	str.w	r7, [r8]
 80037f2:	e00f      	b.n	8003814 <_malloc_r+0xa8>
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	1b52      	subs	r2, r2, r5
 80037f8:	d420      	bmi.n	800383c <_malloc_r+0xd0>
 80037fa:	2a0b      	cmp	r2, #11
 80037fc:	d917      	bls.n	800382e <_malloc_r+0xc2>
 80037fe:	1961      	adds	r1, r4, r5
 8003800:	42a3      	cmp	r3, r4
 8003802:	6025      	str	r5, [r4, #0]
 8003804:	bf18      	it	ne
 8003806:	6059      	strne	r1, [r3, #4]
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	bf08      	it	eq
 800380c:	f8c8 1000 	streq.w	r1, [r8]
 8003810:	5162      	str	r2, [r4, r5]
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	4630      	mov	r0, r6
 8003816:	f000 f82f 	bl	8003878 <__malloc_unlock>
 800381a:	f104 000b 	add.w	r0, r4, #11
 800381e:	1d23      	adds	r3, r4, #4
 8003820:	f020 0007 	bic.w	r0, r0, #7
 8003824:	1ac2      	subs	r2, r0, r3
 8003826:	bf1c      	itt	ne
 8003828:	1a1b      	subne	r3, r3, r0
 800382a:	50a3      	strne	r3, [r4, r2]
 800382c:	e7af      	b.n	800378e <_malloc_r+0x22>
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	42a3      	cmp	r3, r4
 8003832:	bf0c      	ite	eq
 8003834:	f8c8 2000 	streq.w	r2, [r8]
 8003838:	605a      	strne	r2, [r3, #4]
 800383a:	e7eb      	b.n	8003814 <_malloc_r+0xa8>
 800383c:	4623      	mov	r3, r4
 800383e:	6864      	ldr	r4, [r4, #4]
 8003840:	e7ae      	b.n	80037a0 <_malloc_r+0x34>
 8003842:	463c      	mov	r4, r7
 8003844:	687f      	ldr	r7, [r7, #4]
 8003846:	e7b6      	b.n	80037b6 <_malloc_r+0x4a>
 8003848:	461a      	mov	r2, r3
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	42a3      	cmp	r3, r4
 800384e:	d1fb      	bne.n	8003848 <_malloc_r+0xdc>
 8003850:	2300      	movs	r3, #0
 8003852:	6053      	str	r3, [r2, #4]
 8003854:	e7de      	b.n	8003814 <_malloc_r+0xa8>
 8003856:	230c      	movs	r3, #12
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	4630      	mov	r0, r6
 800385c:	f000 f80c 	bl	8003878 <__malloc_unlock>
 8003860:	e794      	b.n	800378c <_malloc_r+0x20>
 8003862:	6005      	str	r5, [r0, #0]
 8003864:	e7d6      	b.n	8003814 <_malloc_r+0xa8>
 8003866:	bf00      	nop
 8003868:	200002bc 	.word	0x200002bc

0800386c <__malloc_lock>:
 800386c:	4801      	ldr	r0, [pc, #4]	@ (8003874 <__malloc_lock+0x8>)
 800386e:	f7ff bf0f 	b.w	8003690 <__retarget_lock_acquire_recursive>
 8003872:	bf00      	nop
 8003874:	200002b4 	.word	0x200002b4

08003878 <__malloc_unlock>:
 8003878:	4801      	ldr	r0, [pc, #4]	@ (8003880 <__malloc_unlock+0x8>)
 800387a:	f7ff bf0a 	b.w	8003692 <__retarget_lock_release_recursive>
 800387e:	bf00      	nop
 8003880:	200002b4 	.word	0x200002b4

08003884 <__ssputs_r>:
 8003884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	688e      	ldr	r6, [r1, #8]
 800388a:	461f      	mov	r7, r3
 800388c:	42be      	cmp	r6, r7
 800388e:	680b      	ldr	r3, [r1, #0]
 8003890:	4682      	mov	sl, r0
 8003892:	460c      	mov	r4, r1
 8003894:	4690      	mov	r8, r2
 8003896:	d82d      	bhi.n	80038f4 <__ssputs_r+0x70>
 8003898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800389c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038a0:	d026      	beq.n	80038f0 <__ssputs_r+0x6c>
 80038a2:	6965      	ldr	r5, [r4, #20]
 80038a4:	6909      	ldr	r1, [r1, #16]
 80038a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038aa:	eba3 0901 	sub.w	r9, r3, r1
 80038ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038b2:	1c7b      	adds	r3, r7, #1
 80038b4:	444b      	add	r3, r9
 80038b6:	106d      	asrs	r5, r5, #1
 80038b8:	429d      	cmp	r5, r3
 80038ba:	bf38      	it	cc
 80038bc:	461d      	movcc	r5, r3
 80038be:	0553      	lsls	r3, r2, #21
 80038c0:	d527      	bpl.n	8003912 <__ssputs_r+0x8e>
 80038c2:	4629      	mov	r1, r5
 80038c4:	f7ff ff52 	bl	800376c <_malloc_r>
 80038c8:	4606      	mov	r6, r0
 80038ca:	b360      	cbz	r0, 8003926 <__ssputs_r+0xa2>
 80038cc:	6921      	ldr	r1, [r4, #16]
 80038ce:	464a      	mov	r2, r9
 80038d0:	f000 fae6 	bl	8003ea0 <memcpy>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	6126      	str	r6, [r4, #16]
 80038e2:	6165      	str	r5, [r4, #20]
 80038e4:	444e      	add	r6, r9
 80038e6:	eba5 0509 	sub.w	r5, r5, r9
 80038ea:	6026      	str	r6, [r4, #0]
 80038ec:	60a5      	str	r5, [r4, #8]
 80038ee:	463e      	mov	r6, r7
 80038f0:	42be      	cmp	r6, r7
 80038f2:	d900      	bls.n	80038f6 <__ssputs_r+0x72>
 80038f4:	463e      	mov	r6, r7
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	4632      	mov	r2, r6
 80038fa:	4641      	mov	r1, r8
 80038fc:	f000 faa6 	bl	8003e4c <memmove>
 8003900:	68a3      	ldr	r3, [r4, #8]
 8003902:	1b9b      	subs	r3, r3, r6
 8003904:	60a3      	str	r3, [r4, #8]
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	4433      	add	r3, r6
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	2000      	movs	r0, #0
 800390e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003912:	462a      	mov	r2, r5
 8003914:	f000 fad2 	bl	8003ebc <_realloc_r>
 8003918:	4606      	mov	r6, r0
 800391a:	2800      	cmp	r0, #0
 800391c:	d1e0      	bne.n	80038e0 <__ssputs_r+0x5c>
 800391e:	6921      	ldr	r1, [r4, #16]
 8003920:	4650      	mov	r0, sl
 8003922:	f7ff feb7 	bl	8003694 <_free_r>
 8003926:	230c      	movs	r3, #12
 8003928:	f8ca 3000 	str.w	r3, [sl]
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003932:	81a3      	strh	r3, [r4, #12]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	e7e9      	b.n	800390e <__ssputs_r+0x8a>
	...

0800393c <_svfiprintf_r>:
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	4698      	mov	r8, r3
 8003942:	898b      	ldrh	r3, [r1, #12]
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	b09d      	sub	sp, #116	@ 0x74
 8003948:	4607      	mov	r7, r0
 800394a:	460d      	mov	r5, r1
 800394c:	4614      	mov	r4, r2
 800394e:	d510      	bpl.n	8003972 <_svfiprintf_r+0x36>
 8003950:	690b      	ldr	r3, [r1, #16]
 8003952:	b973      	cbnz	r3, 8003972 <_svfiprintf_r+0x36>
 8003954:	2140      	movs	r1, #64	@ 0x40
 8003956:	f7ff ff09 	bl	800376c <_malloc_r>
 800395a:	6028      	str	r0, [r5, #0]
 800395c:	6128      	str	r0, [r5, #16]
 800395e:	b930      	cbnz	r0, 800396e <_svfiprintf_r+0x32>
 8003960:	230c      	movs	r3, #12
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	b01d      	add	sp, #116	@ 0x74
 800396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396e:	2340      	movs	r3, #64	@ 0x40
 8003970:	616b      	str	r3, [r5, #20]
 8003972:	2300      	movs	r3, #0
 8003974:	9309      	str	r3, [sp, #36]	@ 0x24
 8003976:	2320      	movs	r3, #32
 8003978:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800397c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003980:	2330      	movs	r3, #48	@ 0x30
 8003982:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b20 <_svfiprintf_r+0x1e4>
 8003986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800398a:	f04f 0901 	mov.w	r9, #1
 800398e:	4623      	mov	r3, r4
 8003990:	469a      	mov	sl, r3
 8003992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003996:	b10a      	cbz	r2, 800399c <_svfiprintf_r+0x60>
 8003998:	2a25      	cmp	r2, #37	@ 0x25
 800399a:	d1f9      	bne.n	8003990 <_svfiprintf_r+0x54>
 800399c:	ebba 0b04 	subs.w	fp, sl, r4
 80039a0:	d00b      	beq.n	80039ba <_svfiprintf_r+0x7e>
 80039a2:	465b      	mov	r3, fp
 80039a4:	4622      	mov	r2, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	4638      	mov	r0, r7
 80039aa:	f7ff ff6b 	bl	8003884 <__ssputs_r>
 80039ae:	3001      	adds	r0, #1
 80039b0:	f000 80a7 	beq.w	8003b02 <_svfiprintf_r+0x1c6>
 80039b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039b6:	445a      	add	r2, fp
 80039b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ba:	f89a 3000 	ldrb.w	r3, [sl]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 809f 	beq.w	8003b02 <_svfiprintf_r+0x1c6>
 80039c4:	2300      	movs	r3, #0
 80039c6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ce:	f10a 0a01 	add.w	sl, sl, #1
 80039d2:	9304      	str	r3, [sp, #16]
 80039d4:	9307      	str	r3, [sp, #28]
 80039d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039da:	931a      	str	r3, [sp, #104]	@ 0x68
 80039dc:	4654      	mov	r4, sl
 80039de:	2205      	movs	r2, #5
 80039e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e4:	484e      	ldr	r0, [pc, #312]	@ (8003b20 <_svfiprintf_r+0x1e4>)
 80039e6:	f7fc fbfb 	bl	80001e0 <memchr>
 80039ea:	9a04      	ldr	r2, [sp, #16]
 80039ec:	b9d8      	cbnz	r0, 8003a26 <_svfiprintf_r+0xea>
 80039ee:	06d0      	lsls	r0, r2, #27
 80039f0:	bf44      	itt	mi
 80039f2:	2320      	movmi	r3, #32
 80039f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039f8:	0711      	lsls	r1, r2, #28
 80039fa:	bf44      	itt	mi
 80039fc:	232b      	movmi	r3, #43	@ 0x2b
 80039fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a02:	f89a 3000 	ldrb.w	r3, [sl]
 8003a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a08:	d015      	beq.n	8003a36 <_svfiprintf_r+0xfa>
 8003a0a:	9a07      	ldr	r2, [sp, #28]
 8003a0c:	4654      	mov	r4, sl
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f04f 0c0a 	mov.w	ip, #10
 8003a14:	4621      	mov	r1, r4
 8003a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a1a:	3b30      	subs	r3, #48	@ 0x30
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	d94b      	bls.n	8003ab8 <_svfiprintf_r+0x17c>
 8003a20:	b1b0      	cbz	r0, 8003a50 <_svfiprintf_r+0x114>
 8003a22:	9207      	str	r2, [sp, #28]
 8003a24:	e014      	b.n	8003a50 <_svfiprintf_r+0x114>
 8003a26:	eba0 0308 	sub.w	r3, r0, r8
 8003a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	9304      	str	r3, [sp, #16]
 8003a32:	46a2      	mov	sl, r4
 8003a34:	e7d2      	b.n	80039dc <_svfiprintf_r+0xa0>
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	1d19      	adds	r1, r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	9103      	str	r1, [sp, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfbb      	ittet	lt
 8003a42:	425b      	neglt	r3, r3
 8003a44:	f042 0202 	orrlt.w	r2, r2, #2
 8003a48:	9307      	strge	r3, [sp, #28]
 8003a4a:	9307      	strlt	r3, [sp, #28]
 8003a4c:	bfb8      	it	lt
 8003a4e:	9204      	strlt	r2, [sp, #16]
 8003a50:	7823      	ldrb	r3, [r4, #0]
 8003a52:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a54:	d10a      	bne.n	8003a6c <_svfiprintf_r+0x130>
 8003a56:	7863      	ldrb	r3, [r4, #1]
 8003a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a5a:	d132      	bne.n	8003ac2 <_svfiprintf_r+0x186>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	1d1a      	adds	r2, r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	9203      	str	r2, [sp, #12]
 8003a64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a68:	3402      	adds	r4, #2
 8003a6a:	9305      	str	r3, [sp, #20]
 8003a6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b30 <_svfiprintf_r+0x1f4>
 8003a70:	7821      	ldrb	r1, [r4, #0]
 8003a72:	2203      	movs	r2, #3
 8003a74:	4650      	mov	r0, sl
 8003a76:	f7fc fbb3 	bl	80001e0 <memchr>
 8003a7a:	b138      	cbz	r0, 8003a8c <_svfiprintf_r+0x150>
 8003a7c:	9b04      	ldr	r3, [sp, #16]
 8003a7e:	eba0 000a 	sub.w	r0, r0, sl
 8003a82:	2240      	movs	r2, #64	@ 0x40
 8003a84:	4082      	lsls	r2, r0
 8003a86:	4313      	orrs	r3, r2
 8003a88:	3401      	adds	r4, #1
 8003a8a:	9304      	str	r3, [sp, #16]
 8003a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a90:	4824      	ldr	r0, [pc, #144]	@ (8003b24 <_svfiprintf_r+0x1e8>)
 8003a92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a96:	2206      	movs	r2, #6
 8003a98:	f7fc fba2 	bl	80001e0 <memchr>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d036      	beq.n	8003b0e <_svfiprintf_r+0x1d2>
 8003aa0:	4b21      	ldr	r3, [pc, #132]	@ (8003b28 <_svfiprintf_r+0x1ec>)
 8003aa2:	bb1b      	cbnz	r3, 8003aec <_svfiprintf_r+0x1b0>
 8003aa4:	9b03      	ldr	r3, [sp, #12]
 8003aa6:	3307      	adds	r3, #7
 8003aa8:	f023 0307 	bic.w	r3, r3, #7
 8003aac:	3308      	adds	r3, #8
 8003aae:	9303      	str	r3, [sp, #12]
 8003ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ab2:	4433      	add	r3, r6
 8003ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ab6:	e76a      	b.n	800398e <_svfiprintf_r+0x52>
 8003ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003abc:	460c      	mov	r4, r1
 8003abe:	2001      	movs	r0, #1
 8003ac0:	e7a8      	b.n	8003a14 <_svfiprintf_r+0xd8>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	3401      	adds	r4, #1
 8003ac6:	9305      	str	r3, [sp, #20]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f04f 0c0a 	mov.w	ip, #10
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ad4:	3a30      	subs	r2, #48	@ 0x30
 8003ad6:	2a09      	cmp	r2, #9
 8003ad8:	d903      	bls.n	8003ae2 <_svfiprintf_r+0x1a6>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0c6      	beq.n	8003a6c <_svfiprintf_r+0x130>
 8003ade:	9105      	str	r1, [sp, #20]
 8003ae0:	e7c4      	b.n	8003a6c <_svfiprintf_r+0x130>
 8003ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e7f0      	b.n	8003ace <_svfiprintf_r+0x192>
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	462a      	mov	r2, r5
 8003af2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <_svfiprintf_r+0x1f0>)
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	4638      	mov	r0, r7
 8003af8:	f3af 8000 	nop.w
 8003afc:	1c42      	adds	r2, r0, #1
 8003afe:	4606      	mov	r6, r0
 8003b00:	d1d6      	bne.n	8003ab0 <_svfiprintf_r+0x174>
 8003b02:	89ab      	ldrh	r3, [r5, #12]
 8003b04:	065b      	lsls	r3, r3, #25
 8003b06:	f53f af2d 	bmi.w	8003964 <_svfiprintf_r+0x28>
 8003b0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b0c:	e72c      	b.n	8003968 <_svfiprintf_r+0x2c>
 8003b0e:	ab03      	add	r3, sp, #12
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	462a      	mov	r2, r5
 8003b14:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <_svfiprintf_r+0x1f0>)
 8003b16:	a904      	add	r1, sp, #16
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f000 f879 	bl	8003c10 <_printf_i>
 8003b1e:	e7ed      	b.n	8003afc <_svfiprintf_r+0x1c0>
 8003b20:	08003f78 	.word	0x08003f78
 8003b24:	08003f82 	.word	0x08003f82
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	08003885 	.word	0x08003885
 8003b30:	08003f7e 	.word	0x08003f7e

08003b34 <_printf_common>:
 8003b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b38:	4616      	mov	r6, r2
 8003b3a:	4698      	mov	r8, r3
 8003b3c:	688a      	ldr	r2, [r1, #8]
 8003b3e:	690b      	ldr	r3, [r1, #16]
 8003b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bfb8      	it	lt
 8003b48:	4613      	movlt	r3, r2
 8003b4a:	6033      	str	r3, [r6, #0]
 8003b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b50:	4607      	mov	r7, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	b10a      	cbz	r2, 8003b5a <_printf_common+0x26>
 8003b56:	3301      	adds	r3, #1
 8003b58:	6033      	str	r3, [r6, #0]
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	0699      	lsls	r1, r3, #26
 8003b5e:	bf42      	ittt	mi
 8003b60:	6833      	ldrmi	r3, [r6, #0]
 8003b62:	3302      	addmi	r3, #2
 8003b64:	6033      	strmi	r3, [r6, #0]
 8003b66:	6825      	ldr	r5, [r4, #0]
 8003b68:	f015 0506 	ands.w	r5, r5, #6
 8003b6c:	d106      	bne.n	8003b7c <_printf_common+0x48>
 8003b6e:	f104 0a19 	add.w	sl, r4, #25
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	6832      	ldr	r2, [r6, #0]
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dc26      	bgt.n	8003bca <_printf_common+0x96>
 8003b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	3b00      	subs	r3, #0
 8003b84:	bf18      	it	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	0692      	lsls	r2, r2, #26
 8003b8a:	d42b      	bmi.n	8003be4 <_printf_common+0xb0>
 8003b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b90:	4641      	mov	r1, r8
 8003b92:	4638      	mov	r0, r7
 8003b94:	47c8      	blx	r9
 8003b96:	3001      	adds	r0, #1
 8003b98:	d01e      	beq.n	8003bd8 <_printf_common+0xa4>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	f003 0306 	and.w	r3, r3, #6
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf02      	ittt	eq
 8003ba6:	68e5      	ldreq	r5, [r4, #12]
 8003ba8:	6833      	ldreq	r3, [r6, #0]
 8003baa:	1aed      	subeq	r5, r5, r3
 8003bac:	68a3      	ldr	r3, [r4, #8]
 8003bae:	bf0c      	ite	eq
 8003bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb4:	2500      	movne	r5, #0
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	bfc4      	itt	gt
 8003bba:	1a9b      	subgt	r3, r3, r2
 8003bbc:	18ed      	addgt	r5, r5, r3
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	341a      	adds	r4, #26
 8003bc2:	42b5      	cmp	r5, r6
 8003bc4:	d11a      	bne.n	8003bfc <_printf_common+0xc8>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e008      	b.n	8003bdc <_printf_common+0xa8>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4652      	mov	r2, sl
 8003bce:	4641      	mov	r1, r8
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	47c8      	blx	r9
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d103      	bne.n	8003be0 <_printf_common+0xac>
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be0:	3501      	adds	r5, #1
 8003be2:	e7c6      	b.n	8003b72 <_printf_common+0x3e>
 8003be4:	18e1      	adds	r1, r4, r3
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	2030      	movs	r0, #48	@ 0x30
 8003bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bee:	4422      	add	r2, r4
 8003bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	e7c7      	b.n	8003b8c <_printf_common+0x58>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4622      	mov	r2, r4
 8003c00:	4641      	mov	r1, r8
 8003c02:	4638      	mov	r0, r7
 8003c04:	47c8      	blx	r9
 8003c06:	3001      	adds	r0, #1
 8003c08:	d0e6      	beq.n	8003bd8 <_printf_common+0xa4>
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7d9      	b.n	8003bc2 <_printf_common+0x8e>
	...

08003c10 <_printf_i>:
 8003c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	7e0f      	ldrb	r7, [r1, #24]
 8003c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c18:	2f78      	cmp	r7, #120	@ 0x78
 8003c1a:	4691      	mov	r9, r2
 8003c1c:	4680      	mov	r8, r0
 8003c1e:	460c      	mov	r4, r1
 8003c20:	469a      	mov	sl, r3
 8003c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c26:	d807      	bhi.n	8003c38 <_printf_i+0x28>
 8003c28:	2f62      	cmp	r7, #98	@ 0x62
 8003c2a:	d80a      	bhi.n	8003c42 <_printf_i+0x32>
 8003c2c:	2f00      	cmp	r7, #0
 8003c2e:	f000 80d1 	beq.w	8003dd4 <_printf_i+0x1c4>
 8003c32:	2f58      	cmp	r7, #88	@ 0x58
 8003c34:	f000 80b8 	beq.w	8003da8 <_printf_i+0x198>
 8003c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c40:	e03a      	b.n	8003cb8 <_printf_i+0xa8>
 8003c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c46:	2b15      	cmp	r3, #21
 8003c48:	d8f6      	bhi.n	8003c38 <_printf_i+0x28>
 8003c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c50 <_printf_i+0x40>)
 8003c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003cbd 	.word	0x08003cbd
 8003c58:	08003c39 	.word	0x08003c39
 8003c5c:	08003c39 	.word	0x08003c39
 8003c60:	08003c39 	.word	0x08003c39
 8003c64:	08003c39 	.word	0x08003c39
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003c39 	.word	0x08003c39
 8003c70:	08003c39 	.word	0x08003c39
 8003c74:	08003c39 	.word	0x08003c39
 8003c78:	08003c39 	.word	0x08003c39
 8003c7c:	08003dbb 	.word	0x08003dbb
 8003c80:	08003ce7 	.word	0x08003ce7
 8003c84:	08003d75 	.word	0x08003d75
 8003c88:	08003c39 	.word	0x08003c39
 8003c8c:	08003c39 	.word	0x08003c39
 8003c90:	08003ddd 	.word	0x08003ddd
 8003c94:	08003c39 	.word	0x08003c39
 8003c98:	08003ce7 	.word	0x08003ce7
 8003c9c:	08003c39 	.word	0x08003c39
 8003ca0:	08003c39 	.word	0x08003c39
 8003ca4:	08003d7d 	.word	0x08003d7d
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6032      	str	r2, [r6, #0]
 8003cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e09c      	b.n	8003df6 <_printf_i+0x1e6>
 8003cbc:	6833      	ldr	r3, [r6, #0]
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	1d19      	adds	r1, r3, #4
 8003cc2:	6031      	str	r1, [r6, #0]
 8003cc4:	0606      	lsls	r6, r0, #24
 8003cc6:	d501      	bpl.n	8003ccc <_printf_i+0xbc>
 8003cc8:	681d      	ldr	r5, [r3, #0]
 8003cca:	e003      	b.n	8003cd4 <_printf_i+0xc4>
 8003ccc:	0645      	lsls	r5, r0, #25
 8003cce:	d5fb      	bpl.n	8003cc8 <_printf_i+0xb8>
 8003cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	da03      	bge.n	8003ce0 <_printf_i+0xd0>
 8003cd8:	232d      	movs	r3, #45	@ 0x2d
 8003cda:	426d      	negs	r5, r5
 8003cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ce0:	4858      	ldr	r0, [pc, #352]	@ (8003e44 <_printf_i+0x234>)
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	e011      	b.n	8003d0a <_printf_i+0xfa>
 8003ce6:	6821      	ldr	r1, [r4, #0]
 8003ce8:	6833      	ldr	r3, [r6, #0]
 8003cea:	0608      	lsls	r0, r1, #24
 8003cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cf0:	d402      	bmi.n	8003cf8 <_printf_i+0xe8>
 8003cf2:	0649      	lsls	r1, r1, #25
 8003cf4:	bf48      	it	mi
 8003cf6:	b2ad      	uxthmi	r5, r5
 8003cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cfa:	4852      	ldr	r0, [pc, #328]	@ (8003e44 <_printf_i+0x234>)
 8003cfc:	6033      	str	r3, [r6, #0]
 8003cfe:	bf14      	ite	ne
 8003d00:	230a      	movne	r3, #10
 8003d02:	2308      	moveq	r3, #8
 8003d04:	2100      	movs	r1, #0
 8003d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d0a:	6866      	ldr	r6, [r4, #4]
 8003d0c:	60a6      	str	r6, [r4, #8]
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	db05      	blt.n	8003d1e <_printf_i+0x10e>
 8003d12:	6821      	ldr	r1, [r4, #0]
 8003d14:	432e      	orrs	r6, r5
 8003d16:	f021 0104 	bic.w	r1, r1, #4
 8003d1a:	6021      	str	r1, [r4, #0]
 8003d1c:	d04b      	beq.n	8003db6 <_printf_i+0x1a6>
 8003d1e:	4616      	mov	r6, r2
 8003d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d24:	fb03 5711 	mls	r7, r3, r1, r5
 8003d28:	5dc7      	ldrb	r7, [r0, r7]
 8003d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d2e:	462f      	mov	r7, r5
 8003d30:	42bb      	cmp	r3, r7
 8003d32:	460d      	mov	r5, r1
 8003d34:	d9f4      	bls.n	8003d20 <_printf_i+0x110>
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d10b      	bne.n	8003d52 <_printf_i+0x142>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	07df      	lsls	r7, r3, #31
 8003d3e:	d508      	bpl.n	8003d52 <_printf_i+0x142>
 8003d40:	6923      	ldr	r3, [r4, #16]
 8003d42:	6861      	ldr	r1, [r4, #4]
 8003d44:	4299      	cmp	r1, r3
 8003d46:	bfde      	ittt	le
 8003d48:	2330      	movle	r3, #48	@ 0x30
 8003d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d52:	1b92      	subs	r2, r2, r6
 8003d54:	6122      	str	r2, [r4, #16]
 8003d56:	f8cd a000 	str.w	sl, [sp]
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	aa03      	add	r2, sp, #12
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4640      	mov	r0, r8
 8003d62:	f7ff fee7 	bl	8003b34 <_printf_common>
 8003d66:	3001      	adds	r0, #1
 8003d68:	d14a      	bne.n	8003e00 <_printf_i+0x1f0>
 8003d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6e:	b004      	add	sp, #16
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f043 0320 	orr.w	r3, r3, #32
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	4832      	ldr	r0, [pc, #200]	@ (8003e48 <_printf_i+0x238>)
 8003d7e:	2778      	movs	r7, #120	@ 0x78
 8003d80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	6831      	ldr	r1, [r6, #0]
 8003d88:	061f      	lsls	r7, r3, #24
 8003d8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d8e:	d402      	bmi.n	8003d96 <_printf_i+0x186>
 8003d90:	065f      	lsls	r7, r3, #25
 8003d92:	bf48      	it	mi
 8003d94:	b2ad      	uxthmi	r5, r5
 8003d96:	6031      	str	r1, [r6, #0]
 8003d98:	07d9      	lsls	r1, r3, #31
 8003d9a:	bf44      	itt	mi
 8003d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003da0:	6023      	strmi	r3, [r4, #0]
 8003da2:	b11d      	cbz	r5, 8003dac <_printf_i+0x19c>
 8003da4:	2310      	movs	r3, #16
 8003da6:	e7ad      	b.n	8003d04 <_printf_i+0xf4>
 8003da8:	4826      	ldr	r0, [pc, #152]	@ (8003e44 <_printf_i+0x234>)
 8003daa:	e7e9      	b.n	8003d80 <_printf_i+0x170>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	f023 0320 	bic.w	r3, r3, #32
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	e7f6      	b.n	8003da4 <_printf_i+0x194>
 8003db6:	4616      	mov	r6, r2
 8003db8:	e7bd      	b.n	8003d36 <_printf_i+0x126>
 8003dba:	6833      	ldr	r3, [r6, #0]
 8003dbc:	6825      	ldr	r5, [r4, #0]
 8003dbe:	6961      	ldr	r1, [r4, #20]
 8003dc0:	1d18      	adds	r0, r3, #4
 8003dc2:	6030      	str	r0, [r6, #0]
 8003dc4:	062e      	lsls	r6, r5, #24
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	d501      	bpl.n	8003dce <_printf_i+0x1be>
 8003dca:	6019      	str	r1, [r3, #0]
 8003dcc:	e002      	b.n	8003dd4 <_printf_i+0x1c4>
 8003dce:	0668      	lsls	r0, r5, #25
 8003dd0:	d5fb      	bpl.n	8003dca <_printf_i+0x1ba>
 8003dd2:	8019      	strh	r1, [r3, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6123      	str	r3, [r4, #16]
 8003dd8:	4616      	mov	r6, r2
 8003dda:	e7bc      	b.n	8003d56 <_printf_i+0x146>
 8003ddc:	6833      	ldr	r3, [r6, #0]
 8003dde:	1d1a      	adds	r2, r3, #4
 8003de0:	6032      	str	r2, [r6, #0]
 8003de2:	681e      	ldr	r6, [r3, #0]
 8003de4:	6862      	ldr	r2, [r4, #4]
 8003de6:	2100      	movs	r1, #0
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7fc f9f9 	bl	80001e0 <memchr>
 8003dee:	b108      	cbz	r0, 8003df4 <_printf_i+0x1e4>
 8003df0:	1b80      	subs	r0, r0, r6
 8003df2:	6060      	str	r0, [r4, #4]
 8003df4:	6863      	ldr	r3, [r4, #4]
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dfe:	e7aa      	b.n	8003d56 <_printf_i+0x146>
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	4632      	mov	r2, r6
 8003e04:	4649      	mov	r1, r9
 8003e06:	4640      	mov	r0, r8
 8003e08:	47d0      	blx	sl
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d0ad      	beq.n	8003d6a <_printf_i+0x15a>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	079b      	lsls	r3, r3, #30
 8003e12:	d413      	bmi.n	8003e3c <_printf_i+0x22c>
 8003e14:	68e0      	ldr	r0, [r4, #12]
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	4298      	cmp	r0, r3
 8003e1a:	bfb8      	it	lt
 8003e1c:	4618      	movlt	r0, r3
 8003e1e:	e7a6      	b.n	8003d6e <_printf_i+0x15e>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4632      	mov	r2, r6
 8003e24:	4649      	mov	r1, r9
 8003e26:	4640      	mov	r0, r8
 8003e28:	47d0      	blx	sl
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d09d      	beq.n	8003d6a <_printf_i+0x15a>
 8003e2e:	3501      	adds	r5, #1
 8003e30:	68e3      	ldr	r3, [r4, #12]
 8003e32:	9903      	ldr	r1, [sp, #12]
 8003e34:	1a5b      	subs	r3, r3, r1
 8003e36:	42ab      	cmp	r3, r5
 8003e38:	dcf2      	bgt.n	8003e20 <_printf_i+0x210>
 8003e3a:	e7eb      	b.n	8003e14 <_printf_i+0x204>
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	f104 0619 	add.w	r6, r4, #25
 8003e42:	e7f5      	b.n	8003e30 <_printf_i+0x220>
 8003e44:	08003f89 	.word	0x08003f89
 8003e48:	08003f9a 	.word	0x08003f9a

08003e4c <memmove>:
 8003e4c:	4288      	cmp	r0, r1
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	eb01 0402 	add.w	r4, r1, r2
 8003e54:	d902      	bls.n	8003e5c <memmove+0x10>
 8003e56:	4284      	cmp	r4, r0
 8003e58:	4623      	mov	r3, r4
 8003e5a:	d807      	bhi.n	8003e6c <memmove+0x20>
 8003e5c:	1e43      	subs	r3, r0, #1
 8003e5e:	42a1      	cmp	r1, r4
 8003e60:	d008      	beq.n	8003e74 <memmove+0x28>
 8003e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e6a:	e7f8      	b.n	8003e5e <memmove+0x12>
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4601      	mov	r1, r0
 8003e70:	428a      	cmp	r2, r1
 8003e72:	d100      	bne.n	8003e76 <memmove+0x2a>
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e7e:	e7f7      	b.n	8003e70 <memmove+0x24>

08003e80 <_sbrk_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d06      	ldr	r5, [pc, #24]	@ (8003e9c <_sbrk_r+0x1c>)
 8003e84:	2300      	movs	r3, #0
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	f7fd f904 	bl	8001098 <_sbrk>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_sbrk_r+0x1a>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_sbrk_r+0x1a>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	200002b0 	.word	0x200002b0

08003ea0 <memcpy>:
 8003ea0:	440a      	add	r2, r1
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ea8:	d100      	bne.n	8003eac <memcpy+0xc>
 8003eaa:	4770      	bx	lr
 8003eac:	b510      	push	{r4, lr}
 8003eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb6:	4291      	cmp	r1, r2
 8003eb8:	d1f9      	bne.n	8003eae <memcpy+0xe>
 8003eba:	bd10      	pop	{r4, pc}

08003ebc <_realloc_r>:
 8003ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	460d      	mov	r5, r1
 8003ec6:	b921      	cbnz	r1, 8003ed2 <_realloc_r+0x16>
 8003ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ecc:	4611      	mov	r1, r2
 8003ece:	f7ff bc4d 	b.w	800376c <_malloc_r>
 8003ed2:	b92a      	cbnz	r2, 8003ee0 <_realloc_r+0x24>
 8003ed4:	f7ff fbde 	bl	8003694 <_free_r>
 8003ed8:	4625      	mov	r5, r4
 8003eda:	4628      	mov	r0, r5
 8003edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee0:	f000 f81a 	bl	8003f18 <_malloc_usable_size_r>
 8003ee4:	4284      	cmp	r4, r0
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	d802      	bhi.n	8003ef0 <_realloc_r+0x34>
 8003eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003eee:	d8f4      	bhi.n	8003eda <_realloc_r+0x1e>
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f7ff fc3a 	bl	800376c <_malloc_r>
 8003ef8:	4680      	mov	r8, r0
 8003efa:	b908      	cbnz	r0, 8003f00 <_realloc_r+0x44>
 8003efc:	4645      	mov	r5, r8
 8003efe:	e7ec      	b.n	8003eda <_realloc_r+0x1e>
 8003f00:	42b4      	cmp	r4, r6
 8003f02:	4622      	mov	r2, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	bf28      	it	cs
 8003f08:	4632      	movcs	r2, r6
 8003f0a:	f7ff ffc9 	bl	8003ea0 <memcpy>
 8003f0e:	4629      	mov	r1, r5
 8003f10:	4638      	mov	r0, r7
 8003f12:	f7ff fbbf 	bl	8003694 <_free_r>
 8003f16:	e7f1      	b.n	8003efc <_realloc_r+0x40>

08003f18 <_malloc_usable_size_r>:
 8003f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f1c:	1f18      	subs	r0, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bfbc      	itt	lt
 8003f22:	580b      	ldrlt	r3, [r1, r0]
 8003f24:	18c0      	addlt	r0, r0, r3
 8003f26:	4770      	bx	lr

08003f28 <_init>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr

08003f34 <_fini>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr
